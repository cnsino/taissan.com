<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Rust Cookbook系列】十九 Web 编程</title>
      <link href="/news/1682928435899.html"/>
      <url>/news/1682928435899.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-提取链接">1. 提取链接</h2><p>  需要安装<code>error-chain</code>库、<code>reqwest</code>库、<code>select</code>库、<code>url</code>库以及<code>tokio</code>库，可通过以下命令安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> <span class="token function">add</span> error_chain<span class="token function">cargo</span> <span class="token function">add</span> <span class="token keyword">select</span><span class="token function">cargo</span> <span class="token function">add</span> tokio <span class="token parameter variable">--features</span> full<span class="token function">cargo</span> <span class="token function">add</span> reqwest<span class="token function">cargo</span> <span class="token function">add</span> url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token string">"0.11.17"</span><span class="token key property">select</span> <span class="token punctuation">=</span> <span class="token string">"0.6.0"</span><span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.28.0"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"full"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">"2.3.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-从-HTML-网页中提取所有链接">1.1 从 HTML 网页中提取所有链接</h3><p>  使用 <code>reqwest::get</code> 执行 <code>HTTP GET</code> 请求，然后使用 <code>Document::from_read</code> 将响应信息解析为 <code>HTML</code> 文档。以“<code>a</code>”（锚元素）作为结构体 <code>Name</code> 的参数，将结构体 <code>Name</code> 作为条件，使用 <code>find</code> 方法检索所有链接。在结构体 <code>Selection</code> 上调用 <code>filter_map</code> 方法，从具有 “<code>href</code>” attr（属性）的链接检索所有 <code>URL</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">select<span class="token punctuation">::</span>document<span class="token punctuation">::</span></span><span class="token class-name">Document</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">select<span class="token punctuation">::</span>predicate<span class="token punctuation">::</span></span><span class="token class-name">Name</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>      foreign_links <span class="token punctuation">&#123;</span>          <span class="token class-name">ReqError</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">IoError</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://www.rust-lang.org/en-US/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Document</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//tools/install/learn<span class="token punctuation">..</span>. <span class="token comment"># 省略</span>https://github.com/rust-lang/www.rust-lang.org/issues/new/choosehttps://prev.rust-lang.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-检查网页死链">1.2 检查网页死链</h3><p>  调用 <code>get_base_url</code> 方法检索 <code>base URL</code>，如果 <code>HTML</code> 文档有 <code>base</code> 标签，从 <code>base</code> 标记获取 <code>href attr</code>，初始 URL 的默认值是 <code>Position::BeforePath</code>。遍历 <code>HTML</code> 文档中的链接，并创建一个 <code>tokio::spawn</code> 任务，该任务将使用 <code>url::ParseOptions</code> 结构体和 <code>Url::parse</code> 方法解析单个链接。任务执行中，使用 <code>reqwest</code> 向链接发起请求，并验证状态码结构体 <code>StatusCode</code>。实例中使用 <code>await</code> 异步等待任务完成，然后结束程序。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">StatusCode</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">select<span class="token punctuation">::</span>document<span class="token punctuation">::</span></span><span class="token class-name">Document</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">select<span class="token punctuation">::</span>predicate<span class="token punctuation">::</span></span><span class="token class-name">Name</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Position</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>  foreign_links <span class="token punctuation">&#123;</span>      <span class="token class-name">ReqError</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">IoError</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">UrlParseError</span><span class="token punctuation">(</span><span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">ParseError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">JoinError</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_base_url</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Url</span><span class="token punctuation">,</span> doc<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Document</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Url</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> base_tag_href <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string">"base"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> base_url <span class="token operator">=</span>        base_tag_href<span class="token punctuation">.</span><span class="token function">map_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token class-name">Position</span><span class="token punctuation">::</span><span class="token class-name">BeforePath</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">::</span>parse<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>base_url<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">check_link</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Url</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">StatusCode</span><span class="token punctuation">::</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://www.taissan.com/"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 原文提供的Rust官网地址无死链，此处特别修改</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> document <span class="token operator">=</span> <span class="token class-name">Document</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> base_url <span class="token operator">=</span> <span class="token function">get_base_url</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">,</span> <span class="token operator">&amp;</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> base_parser <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">base_url</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> links<span class="token punctuation">:</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token class-name">Url</span><span class="token operator">></span> <span class="token operator">=</span> document        <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>link<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">!</span>link<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token string">"javascript:void(0);"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 特别添加</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>link<span class="token closure-punctuation punctuation">|</span></span> base_parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tasks <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links <span class="token punctuation">&#123;</span>        tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token function">check_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 正常"</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 是死链"</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> task <span class="token keyword">in</span> tasks <span class="token punctuation">&#123;</span>        task<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.taissan.com/tags/minikube/ 正常https://www.taissan.com/music/ 是死链https://www.taissan.com/movies/ 是死链https://www.sino-lang.org/ 正常https://www.taissan.com/tags/python/ 正常<span class="token punctuation">..</span>. <span class="token comment"># 省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-从-WikiPedia-标记页面提取所有唯一性链接">1.3 从 <code>WikiPedia</code> 标记页面提取所有唯一性链接</h3><p>  需要安装<code>regex</code>库和<code>lazy_static</code>库，可通过<code>cargo add regex</code>、<code>cargo add lazy_static</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">lazy_static</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.11.17"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"json"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token key property">select</span> <span class="token punctuation">=</span> <span class="token string">"0.6.0"</span><span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.28.0"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"full"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  使用 <code>reqwest::get</code> 获取 <code>MediaWiki</code> 页面的源代码，然后使用 <code>Regex::captures_iter</code> 查找内部和外部链接的所有条目。使用智能指针 <code>Cow</code> 可以提供对借用数据的不可变引用，避免分配过多的字符串。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>borrow<span class="token punctuation">::</span></span><span class="token class-name">Cow</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">extract_links</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token class-name">Cow</span><span class="token operator">&lt;</span><span class="token keyword">str</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">WIKI_REGEX</span><span class="token punctuation">:</span> <span class="token class-name">Regex</span> <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>            <span class="token string">r"(?x)                \[\[(?P&lt;internal>[^\[\]|]*)[^\[\]]*\]\]    # internal links                |                (url=|URL\||\[)(?P&lt;external>http.*?)[ \|&#125;] # external links            "</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> links<span class="token punctuation">:</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">WIKI_REGEX</span>        <span class="token punctuation">.</span><span class="token function">captures_iter</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>c<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">match</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"internal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"external"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Cow</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Cow</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            _ <span class="token operator">=></span> <span class="token macro property">unreachable!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    links<span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span>        <span class="token string">"https://en.wikipedia.org/w/index.php?title=Rust_(programming_language)&amp;action=raw"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:#?&#125;"</span><span class="token punctuation">,</span> <span class="token function">extract_links</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>    <span class="token string">"firewall (computing)"</span>,    <span class="token string">"conditional (computer programming)"</span>,    <span class="token string">"algebraic data types"</span>,    <span class="token punctuation">..</span>. <span class="token comment"># 此处省略</span>    <span class="token string">"affine type system"</span>,    <span class="token string">"reserved word"</span>,<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-URL">2. <code>URL</code></h2><h3 id="2-1-解析-URL-字符串为-Url-类型">2.1 解析 <code>URL</code> 字符串为 <code>Url</code> 类型</h3><p>  <code>url</code> crate 中的 <code>parse</code> 方法验证并解析 <code>&amp;str</code> 切片为 <code>Url</code> 结构体。如果输入字符串的格式不正确，解析方法 <code>parse</code> 会返回 <code>Result&lt;Url, ParseError&gt;</code>。一旦 <code>URL</code> 被解析，它就可以使用 <code>Url</code> 结构体类型中的所有方法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">ParseError</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"https://github.com/rust-lang/rust/issues?labels=E-easy&amp;state=open"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> parsed <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// Url &#123; scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("github.com")), port: None, path: "/rust-lang/rust/issues", query: Some("labels=E-easy&amp;state=open"), fragment: None &#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"URL 的路径部分是: &#123;&#125;"</span><span class="token punctuation">,</span> parsed<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">URL 的路径部分是: /rust-lang/rust/issues<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-通过移除路径段创建基本-URL">2.2 通过移除路径段创建基本 <code>URL</code></h3><p>  基本 <code>URL</code>（base URL）包括协议和域名。但基本 <code>URL</code>（base URL）不包括目录、文件或查询字符串，这些项都可以从给定的 <code>URL</code> 中剥离出来。创建基本 <code>URL</code>（base URL）时，通过 <code>PathSegmentsMut::clear</code> 方法移除目录和文件路径，通过方法 <code>Url::set_query</code> 移除查询字符串。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">Url</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">UrlParse</span><span class="token punctuation">(</span><span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">ParseError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    errors <span class="token punctuation">&#123;</span>        <span class="token class-name">CannotBeABase</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> full <span class="token operator">=</span> <span class="token string">"https://github.com/rust-lang/cargo?asdf"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token function">base_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"https://github.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"基础URL是: &#123;&#125;"</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">base_url</span><span class="token punctuation">(</span><span class="token keyword">mut</span> url<span class="token punctuation">:</span> <span class="token class-name">Url</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Url</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> url<span class="token punctuation">.</span><span class="token function">path_segments_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">mut</span> path<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">from_kind</span><span class="token punctuation">(</span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">CannotBeABase</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    url<span class="token punctuation">.</span><span class="token function">set_query</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验及输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">基础URL是: https://github.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-从基本-URL-创建新-URLs">2.3 从基本 <code>URL</code> 创建新 <code>URLs</code></h3><p>  <code>join</code> 方法从基路径和相对路径创建新的 <code>URL</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">ParseError</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"/rust-lang/cargo"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gh <span class="token operator">=</span> <span class="token function">build_github_url</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>gh<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"https://github.com/rust-lang/cargo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"加入的网址是: &#123;&#125;"</span><span class="token punctuation">,</span> gh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">build_github_url</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Url</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">GITHUB</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"https://github.com"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">GITHUB</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"已知硬编码 URL 是有效的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> joined <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验及输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">加入的网址是: https://github.com/rust-lang/cargo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-提取-URL-源（scheme-host-port）">2.4 提取 <code>URL</code> 源（<code>scheme/host/port</code>）</h3><ul><li><ol><li><code>Url</code> 结构体定义了多种方法，以便于提取有关它所表示的 <code>URL</code> 的信息。</li></ol></li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Host</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"ftp://rust-lang.org/examples"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ftp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Host</span><span class="token punctuation">::</span><span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"rust-lang.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">port_or_known_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"出处果然不出所料！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出及校验</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">出处果然不出所料！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li><code>origin</code> 方法产生相同的结果。</li></ol></li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Host</span><span class="token punctuation">,</span> <span class="token class-name">Origin</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">UrlParse</span><span class="token punctuation">(</span><span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">ParseError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"ftp://rust-lang.org/examples"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected_scheme <span class="token operator">=</span> <span class="token string">"ftp"</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected_host <span class="token operator">=</span> <span class="token class-name">Host</span><span class="token punctuation">::</span><span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"rust-lang.org"</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected_port <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">::</span><span class="token class-name">Tuple</span><span class="token punctuation">(</span>expected_scheme<span class="token punctuation">,</span> expected_host<span class="token punctuation">,</span> expected_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> origin <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"出处果然不出所料！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出及校验</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">出处果然不出所料！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-从-URL-移除片段标识符和查询对">2.5 从 <code>URL</code> 移除片段标识符和查询对</h3><p>  解析 <code>Url</code> 结构体，并使用 <code>url::Position</code> 枚举对其进行切片，以去除不需要的 <code>URL</code> 片段。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">ParseError</span><span class="token punctuation">,</span> <span class="token class-name">Position</span><span class="token punctuation">,</span> <span class="token class-name">Url</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> parsed <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://github.com/rust-lang/rust/issues?labels=E-easy&amp;state=open"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cleaned<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>parsed<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token class-name">Position</span><span class="token punctuation">::</span><span class="token class-name">AfterPath</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"清理后的网址: &#123;&#125;"</span><span class="token punctuation">,</span> cleaned<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">清理后的网址: https://github.com/rust-lang/rust/issues<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-媒介-MIME-类型">3. 媒介(<code>MIME</code>)类型</h2><p>  需要安装<code>mime</code>库，可通过<code>cargo add mime</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">mime</span> <span class="token punctuation">=</span> <span class="token string">"0.3.17"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-1-从字符串获取-MIME-类型">3.1 从字符串获取 <code>MIME</code> 类型</h3><p>  下面的实例展示如何使用 <code>mime</code> crate 从字符串解析出 <code>MIME</code> 类型。<code>FromStrError</code> 结构体在 <code>unwrap_or</code> 子句中生成默认的 <code>MIME</code> 类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Mime</span><span class="token punctuation">,</span> <span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> invalid_mime_type <span class="token operator">=</span> <span class="token string">"i n v a l i d"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> default_mime <span class="token operator">=</span> invalid_mime_type        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Mime</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"&#123;:?&#125; 的 MIME 使用默认值 &#123;:?&#125;"</span><span class="token punctuation">,</span>        invalid_mime_type<span class="token punctuation">,</span> default_mime    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> valid_mime_type <span class="token operator">=</span> <span class="token string">"TEXT/PLAIN"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> parsed_mime <span class="token operator">=</span> valid_mime_type        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Mime</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"&#123;:?&#125; 的 MIME 被解析为 &#123;:?&#125;"</span><span class="token punctuation">,</span>        valid_mime_type<span class="token punctuation">,</span> parsed_mime    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"i n v a l i d"</span> 的 MIME 使用默认值 <span class="token string">"application/octet-stream"</span><span class="token string">"TEXT/PLAIN"</span> 的 MIME 被解析为 <span class="token string">"text/plain"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-从文件名获取-MIME-类型">3.2 从文件名获取 <code>MIME</code> 类型</h3><p>  实例展示如何使用 <code>mime</code> crate 从给定的文件名返回正确的 <code>MIME</code> 类型。程序将检查文件扩展名并与已知的 <code>MIME</code> 类型列表匹配，返回值为 <code>mime:Mime</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token class-name">Mime</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">find_mimetype</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Mime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> parts<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">match</span> parts<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">match</span> <span class="token operator">*</span>v <span class="token punctuation">&#123;</span>            <span class="token string">"png"</span> <span class="token operator">=></span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">IMAGE_PNG</span><span class="token punctuation">,</span>            <span class="token string">"jpg"</span> <span class="token operator">=></span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">IMAGE_JPEG</span><span class="token punctuation">,</span>            <span class="token string">"json"</span> <span class="token operator">=></span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>_ <span class="token operator">=></span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> filenames <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"foobar.jpg"</span><span class="token punctuation">,</span> <span class="token string">"foo.bar"</span><span class="token punctuation">,</span> <span class="token string">"foobar.png"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> filenames <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> mime <span class="token operator">=</span> <span class="token function">find_mimetype</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 文件的 MIME类型是：&#123;&#125;"</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> mime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">foobar.jpg 文件的 MIME类型是：image/jpegfoo.bar 文件的 MIME类型是：text/plainfoobar.png 文件的 MIME类型是：image/png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-解析-HTTP-响应的-MIME-类型">3.3 解析 <code>HTTP</code> 响应的 <code>MIME</code> 类型</h3><p>  当从 <code>reqwest</code> 接收到 <code>HTTP</code> 响应时，<code>MIME</code> 类型或媒体类型可以在实体头部的 <code>Content-Type</code> 标头中找到。<code>reqwest::header::HeaderMap::get</code> 方法将标头检索为结构体 <code>reqwest::header::HeaderValue</code>，结构体可以转换为字符串。然后 <code>mime</code> crate 可以解析它，生成 <code>mime::Mime</code> 值。<code>mime</code> crate 也定义了一些常用的 <code>MIME</code> 类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token class-name">Mime</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>   foreign_links <span class="token punctuation">&#123;</span>       <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token class-name">ToStrError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Mime</span><span class="token punctuation">(</span><span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token class-name">FromStrError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://www.rust-lang.org/logos/rust-logo-32x32.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> headers <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"响应不包含 Content-Type 标头."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>content_type<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> content_type <span class="token operator">=</span> <span class="token class-name">Mime</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span>content_type<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> media_type <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token punctuation">(</span>content_type<span class="token punctuation">.</span><span class="token function">type_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token punctuation">.</span><span class="token function">subtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"一个 HTML 文件"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">TEXT</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"文本文档"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">IMAGE</span><span class="token punctuation">,</span> <span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">PNG</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"一张PNG图片"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token namespace">mime<span class="token punctuation">::</span></span><span class="token constant">IMAGE</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"一个图像"</span><span class="token punctuation">,</span>                _ <span class="token operator">=></span> <span class="token string">"既不是文字也不是图像"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"响应包含: &#123;&#125;."</span><span class="token punctuation">,</span> media_type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验及输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">响应包含: 一张PNG图片.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-客户端">4. 客户端</h2><p>  需要安装<code>hyper</code>库和重新安装<code>reqwest</code>库，可通过<code>cargo add hyper</code>和<code>cargo add reqwest --features blocking</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">hyper</span> <span class="token punctuation">=</span> <span class="token string">"0.14.26"</span><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.11.17"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"blocking"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-1-请求处理">4.1 请求处理</h3><h4 id="4-1-1-发出-HTTP-GET-请求">4.1.1 发出 <code>HTTP GET</code> 请求</h4><p>  解析提供的 URL，并使用 <code>reqwest::blocking::get</code> 发起同步 <code>HTTP GET</code> 请求。打印获取的响应消息状态和标头 <code>reqwest::blocking::Response</code>。使用 <code>read_to_string</code> 将 <code>HTTP</code> 响应消息主体正文读入到指派的字符串 <code>String</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> res <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> body <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> body<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"状态: &#123;&#125;"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标头:\n&#123;:#?&#125;"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"正文:\n&#123;&#125;"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">状态: <span class="token number">200</span> OK标头:<span class="token punctuation">&#123;</span>    <span class="token string">"date"</span><span class="token builtin class-name">:</span> <span class="token string">"Sun, 30 Apr 2023 07:51:57 GMT"</span>,    <span class="token string">"content-type"</span><span class="token builtin class-name">:</span> <span class="token string">"application/json"</span>,    <span class="token string">"content-length"</span><span class="token builtin class-name">:</span> <span class="token string">"221"</span>,    <span class="token string">"connection"</span><span class="token builtin class-name">:</span> <span class="token string">"keep-alive"</span>,    <span class="token string">"server"</span><span class="token builtin class-name">:</span> <span class="token string">"gunicorn/19.9.0"</span>,    <span class="token string">"access-control-allow-origin"</span><span class="token builtin class-name">:</span> <span class="token string">"*"</span>,    <span class="token string">"access-control-allow-credentials"</span><span class="token builtin class-name">:</span> <span class="token string">"true"</span>,<span class="token punctuation">&#125;</span>正文:<span class="token punctuation">&#123;</span>  <span class="token string">"args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,   <span class="token string">"headers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Accept"</span><span class="token builtin class-name">:</span> <span class="token string">"*/*"</span>,     <span class="token string">"Host"</span><span class="token builtin class-name">:</span> <span class="token string">"httpbin.org"</span>,     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token builtin class-name">:</span> <span class="token string">"Root=1-644e1e1d-0d67becf0590a0c6524831ff"</span>  <span class="token punctuation">&#125;</span>,   <span class="token string">"origin"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.1"</span>,   <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异步</li></ul><p>  常见的方法是通过包含 <code>tokio</code> 在内的类似异步执行器，使主函数执行异步，但检索处理相同的信息。本实例中，<code>tokio::main</code> 处理所有繁重的执行器设置，并允许在 <code>.await</code> 之前不阻塞的按顺序执行代码。也可以使用 <code>reqwest</code> 的异步版本，其请求函数 <code>reqwest::get</code> 和响应结构体 <code>reqwest::Response</code> 都是异步的。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"状态: &#123;&#125;"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标头:\n&#123;:#?&#125;"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> body <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"正文:\n&#123;&#125;"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">状态: <span class="token number">200</span> OK标头:<span class="token punctuation">&#123;</span>    <span class="token string">"date"</span><span class="token builtin class-name">:</span> <span class="token string">"Sun, 30 Apr 2023 07:57:31 GMT"</span>,    <span class="token string">"content-type"</span><span class="token builtin class-name">:</span> <span class="token string">"application/json"</span>,    <span class="token string">"content-length"</span><span class="token builtin class-name">:</span> <span class="token string">"221"</span>,    <span class="token string">"connection"</span><span class="token builtin class-name">:</span> <span class="token string">"keep-alive"</span>,    <span class="token string">"server"</span><span class="token builtin class-name">:</span> <span class="token string">"gunicorn/19.9.0"</span>,    <span class="token string">"access-control-allow-origin"</span><span class="token builtin class-name">:</span> <span class="token string">"*"</span>,    <span class="token string">"access-control-allow-credentials"</span><span class="token builtin class-name">:</span> <span class="token string">"true"</span>,<span class="token punctuation">&#125;</span>正文:<span class="token punctuation">&#123;</span>  <span class="token string">"args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,   <span class="token string">"headers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Accept"</span><span class="token builtin class-name">:</span> <span class="token string">"*/*"</span>,     <span class="token string">"Host"</span><span class="token builtin class-name">:</span> <span class="token string">"httpbin.org"</span>,     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token builtin class-name">:</span> <span class="token string">"Root=1-644e1f6b-088641ec6e919c6542c9c239"</span>  <span class="token punctuation">&#125;</span>,   <span class="token string">"origin"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.1"</span>,   <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-为-REST-请求设置自定义消息标头和-URL-参数">4.1.2 为 <code>REST</code> 请求设置自定义消息标头和 <code>URL</code> 参数</h4><p>  需要安装<code>serde</code>库，可通过<code>cargo add serde --features derive</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">hyper</span> <span class="token punctuation">=</span> <span class="token string">"0.14.26"</span><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.11.17"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"blocking"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token key property">serde</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.0.160"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"derive"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  实例中为 <code>HTTP GET</code> 请求设置标准的和自定义的 <code>HTTP</code> 消息标头以及 <code>URL</code> 参数。使用 <s><code>hyper::header!</code> 宏</s>自定义<code>header</code>创建 <code>XPoweredBy</code> 类型的自定义消息标头。使用 <code>Url::parse_with_params</code> 构建复杂的 URL。使用 <code>RequestBuilder::header</code> 方法设置标准消息标头 <code>header::UserAgent</code>、<code>header::Authorization</code>，以及自定义类型 <code>XPoweredBy</code>，然后使用 <code>RequestBuilder::send</code> 发起请求。请求的服务目标为 <code>http://httpbin.org/headers</code>，其响应结果是包含所有请求的消息标头的 <code>JSON</code> 字典，易于验证。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token constant">AUTHORIZATION</span><span class="token punctuation">,</span> <span class="token constant">USER_AGENT</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">Url</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">HeadersEcho</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> headers<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UrlParse</span><span class="token punctuation">(</span><span class="token namespace">url<span class="token punctuation">::</span></span><span class="token class-name">ParseError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Url</span><span class="token punctuation">::</span><span class="token function">parse_with_params</span><span class="token punctuation">(</span>        <span class="token string">"http://httpbin.org/headers"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"lang"</span><span class="token punctuation">,</span> <span class="token string">"rust"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"browser"</span><span class="token punctuation">,</span> <span class="token string">"servo"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"Rust-test"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>            <span class="token constant">AUTHORIZATION</span><span class="token punctuation">,</span>            <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Bearer &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"DEadBEEfc001cAFeEDEcafBAd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-Powered-By"</span><span class="token punctuation">,</span> <span class="token string">"Guybrush Threepwood"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> out<span class="token punctuation">:</span> <span class="token class-name">HeadersEcho</span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        out<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Authorization"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"Bearer DEadBEEfc001cAFeEDEcafBAd"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Rust-test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Powered-By"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Guybrush Threepwood"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token comment">// response.url().as_str(),</span>        url<span class="token punctuation">,</span> <span class="token comment">// 解决borrow of moved value: `response`</span>        <span class="token string">"http://httpbin.org/headers?lang=rust&amp;browser=servo"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验及输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HeadersEcho <span class="token punctuation">&#123;</span> headers: <span class="token punctuation">&#123;</span><span class="token string">"Host"</span><span class="token builtin class-name">:</span> <span class="token string">"httpbin.org"</span>, <span class="token string">"User-Agent"</span><span class="token builtin class-name">:</span> <span class="token string">"Rust-test"</span>, <span class="token string">"X-Amzn-Trace-Id"</span><span class="token builtin class-name">:</span> <span class="token string">"Root=1-644f6d07-335fc12037d78830043aa2aa"</span>, <span class="token string">"Authorization"</span><span class="token builtin class-name">:</span> <span class="token string">"Bearer DEadBEEfc001cAFeEDEcafBAd"</span>, <span class="token string">"Accept"</span><span class="token builtin class-name">:</span> <span class="token string">"*/*"</span>, <span class="token string">"X-Powered-By"</span><span class="token builtin class-name">:</span> <span class="token string">"Guybrush Threepwood"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-Web-API-调用">4.2 <code>Web API</code> 调用</h3><h4 id="4-2-1-查询-GitHub-API">4.2.1 查询 GitHub <code>API</code></h4><p>  使用 <code>reqwest::get</code> 查询 点赞的用户 <code>API v3</code>，以获取某个 <code>GitHub</code> 项目的所有点赞用户的列表。使用 <code>Response::json</code> 将响应信息 <code>reqwest::Response</code> 反序列化为实现了 <code>serde::Deserialize</code> trait 的 User 对象。<code>tokio::main</code> 用于设置异步执行器，该进程异步等待 <code>reqwest::get</code> 完成，然后将响应信息反序列化到用户实例中。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">&#123;</span>    login<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> request_url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span>        <span class="token string">"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;/stargazers"</span><span class="token punctuation">,</span>        owner <span class="token operator">=</span> <span class="token string">"rust-lang-nursery"</span><span class="token punctuation">,</span>        repo <span class="token operator">=</span> <span class="token string">"rust-cookbook"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> request_url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> client        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request_url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span> <span class="token comment">// GitHub API 要求请求中必须包含一个 User-Agent 头，以便识别您的应用程序。</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> users<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">></span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://api.github.com/repos/rust-lang-nursery/rust-cookbook/stargazers<span class="token punctuation">[</span>User <span class="token punctuation">&#123;</span> login: <span class="token string">"trentspi"</span>, id: <span class="token number">20845184</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"charlesetc"</span>, id: <span class="token number">5167293</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"Ruin0x11"</span>, id: <span class="token number">6700637</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"gmcabrita"</span>, id: <span class="token number">957820</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"cnwalker"</span>, id: <span class="token number">8570077</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"k0pernicus"</span>, id: <span class="token number">3605451</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"jaxx"</span>, id: <span class="token number">723258</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"dhharris"</span>, id: <span class="token number">9009622</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"zhangsoledad"</span>, id: <span class="token number">3198439</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"ssebastianj"</span>, id: <span class="token number">309535</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"oclbdk"</span>, id: <span class="token number">136982</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"Latrasis"</span>, id: <span class="token number">4656227</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"narendasan"</span>, id: <span class="token number">1790613</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"rishabh92"</span>, id: <span class="token number">13951936</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"hueftl"</span>, id: <span class="token number">11706301</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"seeekr"</span>, id: <span class="token number">302886</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"krzyk"</span>, id: <span class="token number">105730</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"rjammala"</span>, id: <span class="token number">4990663</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"DaseinPhaos"</span>, id: <span class="token number">11028753</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"jryans"</span>, id: <span class="token number">279572</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"burdges"</span>, id: <span class="token number">680126</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"zaa"</span>, id: <span class="token number">5245</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"DenisKolodin"</span>, id: <span class="token number">418920</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"messense"</span>, id: <span class="token number">1556054</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"wdv4758h"</span>, id: <span class="token number">2716047</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"iblislin"</span>, id: <span class="token number">761623</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"realityone"</span>, id: <span class="token number">4059040</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"sebasmagri"</span>, id: <span class="token number">11137</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"sourcepirate"</span>, id: <span class="token number">5940286</span> <span class="token punctuation">&#125;</span>, User <span class="token punctuation">&#123;</span> login: <span class="token string">"king6cong"</span>, id: <span class="token number">302560</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-2-2-检查-API-资源是否存在">4.2.2 检查 <code>API</code> 资源是否存在</h4><p>  消息标头 HEAD 请求（(<code>Client::head</code>）查询 GitHub 用户端接口，然后检查响应代码以确定是否成功。这是一种无需接收 HTTP 响应消息主体，即可快速查询 rest 资源的方法。使用 <code>ClientBuilder::timeout</code> 方法配置的 <code>reqwest::Client</code> 结构体将确保请求不会超时。由于 <code>ClientBuilder::build</code> 和 <code>RequestBuilder::send</code> 都返回错误类型 <code>reqwest::Error</code>，所以便捷的 <code>reqwest::Result</code> 类型被用于主函数的返回类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">ClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">"ferris-the-crab"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> request_url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/users/&#123;&#125;"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> request_url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">ClientBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> client        <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request_url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span> <span class="token comment">// GitHub API 要求请求中必须包含一个 User-Agent 头，以便识别您的应用程序。</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 是一个用户!"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 不是一个用户!"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://api.github.com/users/ferris-the-crabferris-the-crab 不是一个用户<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-2-3-使用-GitHub-API-创建和删除-Gist">4.2.3 使用 GitHub <code>API</code> 创建和删除 Gist</h4><p>  需要安装<code>serde_json</code>库，可通过<code>cargo add serde_json</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">serde_json</span> <span class="token punctuation">=</span> <span class="token string">"1.0.96"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>Client::post</code> 创建一个 <code>POST</code> 请求提交到 <code>GitHub gists API v3</code> 接口的 gist，并使用 <code>Client::delete</code> 使用 <code>DELETE</code> 请求删除它。<code>reqwest::Client</code> 负责这两个请求的详细信息，包括：URL、消息体（body）和身份验证。<code>serde_json::json!</code> 宏的 <code>POST</code> 主体可以提供任意形式的 <code>JSON</code> 主体，通过调用 <code>RequestBuilder::json</code> 设置请求主体，<code>RequestBuilder::basic_auth</code> 处理身份验证。本实例中调用 <code>RequestBuilder::send</code> 方法同步执行请求(实例中使用 <code>HTTP</code> 基本认证 为了授权访问 GitHub <code>API</code>)。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span>json<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">EnvVar</span><span class="token punctuation">(</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token class-name">VarError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Deserialize, Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Gist</span> <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    html_url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> gh_user <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">"GH_USER"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gh_pass <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">"GH_PASS"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gist_body <span class="token operator">=</span> <span class="token macro property">json!</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"the description for this gist"</span><span class="token punctuation">,</span>    <span class="token string">"public"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>         <span class="token string">"main.rs"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>         <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">r#"fn main() &#123; println!("hello world!");&#125;"#</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> request_url <span class="token operator">=</span> <span class="token string">"https://api.github.com/gists"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>request_url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">basic_auth</span><span class="token punctuation">(</span>gh_user<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>gh_pass<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gist_body<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span> <span class="token comment">// GitHub API 要求请求中必须包含一个 User-Agent 头，以便识别您的应用程序。</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> gist<span class="token punctuation">:</span> <span class="token class-name">Gist</span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"创建 &#123;:?&#125;"</span><span class="token punctuation">,</span> gist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> request_url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;/&#123;&#125;"</span><span class="token punctuation">,</span> request_url<span class="token punctuation">,</span> gist<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>request_url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">basic_auth</span><span class="token punctuation">(</span>gh_user<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>gh_pass<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span> <span class="token comment">// GitHub API 要求请求中必须包含一个 User-Agent 头，以便识别您的应用程序。</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Gist &#123;&#125; 已删除！ 状态码：&#123;&#125;"</span><span class="token punctuation">,</span> gist<span class="token punctuation">.</span>id<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行前需要设置环境变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GH_USER</span><span class="token operator">=</span>xxxxx <span class="token comment"># 填Github用户名</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GH_PASS</span><span class="token operator">=</span>ghp_******************* <span class="token comment"># 填Github 生成的token（生成时需要勾选Gist复选框）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建 Gist <span class="token punctuation">&#123;</span> id: <span class="token string">"d30b7ea925c570aaa59d22af83bd3f1a"</span>, html_url: <span class="token string">"https://gist.github.com/xxxxx/d30b7ea925c570aaa59d22af83bd3f1a"</span> <span class="token punctuation">&#125;</span>Gist d30b7ea925c570aaa59d22af83bd3f1a 已删除！ 状态码：204 No Content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-2-4-使用-RESTful-API-分页">4.2.4 使用 RESTful <code>API</code> 分页</h4><p>  可以将分页的 web <code>API</code> 方便地包裹在 Rust 迭代器中，当到达每一页的末尾时，迭代器会从远程服务器加载下一页结果。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">ApiResponse</span> <span class="token punctuation">&#123;</span>    dependencies<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Dependency</span><span class="token operator">></span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token class-name">Meta</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Dependency</span> <span class="token punctuation">&#123;</span>    crate_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Meta</span> <span class="token punctuation">&#123;</span>    total<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">ReverseDependencies</span> <span class="token punctuation">&#123;</span>    crate_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    dependencies<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Dependency</span><span class="token operator">></span> <span class="token keyword">as</span> <span class="token class-name">IntoIterator</span><span class="token operator">></span><span class="token punctuation">::</span><span class="token class-name">IntoIter</span><span class="token punctuation">,</span>    client<span class="token punctuation">:</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">,</span>    page<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    per_page<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    total<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">ReverseDependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">of</span><span class="token punctuation">(</span>crate_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">ReverseDependencies</span> <span class="token punctuation">&#123;</span>            crate_id<span class="token punctuation">:</span> crate_id<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            dependencies<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            client<span class="token punctuation">:</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            page<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            per_page<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">try_next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Dependency</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>page <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>page <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>per_page <span class="token operator">>=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>total <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>page <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span>            <span class="token string">"https://crates.io/api/v1/crates/&#123;&#125;/reverse_dependencies?page=&#123;&#125;&amp;per_page=&#123;&#125;"</span><span class="token punctuation">,</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>crate_id<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>page<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>per_page        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// let response = self.client.get(&amp;url).send()?.json::&lt;ApiResponse>()?;</span>        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">self</span>            <span class="token punctuation">.</span>client            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span> <span class="token comment">// Crates.io API 要求请求中必须包含一个 User-Agent 头，以便识别您的应用程序。</span>            <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">ApiResponse</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> response<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>total <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>total<span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">ReverseDependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Dependency</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">try_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Ok</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> dep <span class="token keyword">in</span> <span class="token class-name">ReverseDependencies</span><span class="token punctuation">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"serde"</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"反向依赖: &#123;&#125;"</span><span class="token punctuation">,</span> dep<span class="token operator">?</span><span class="token punctuation">.</span>crate_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://crates.io/api/v1/crates/serde/reverse_dependencies?page<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">per_page</span><span class="token operator">=</span><span class="token number">100</span> <span class="token comment"># 主要页数变化</span><span class="token number">26183</span> 反向依赖: serde反向依赖: serde<span class="token punctuation">..</span>. <span class="token comment"># 省略</span>https://crates.io/api/v1/crates/serde/reverse_dependencies?page<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token assign-left variable">per_page</span><span class="token operator">=</span><span class="token number">100</span> <span class="token comment"># 主要页数变化</span><span class="token number">26183</span>反向依赖: serde反向依赖: serde<span class="token punctuation">..</span>. <span class="token comment"># 省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-处理速率受限-API">4.2.5 处理速率受限 API</h4><p>  实例使用 GitHub API - 速率限制展示如何处理远程服务器错误。本实例 <s>使用 hyper::header! 宏</s> 自定义解析响应头并检查 <code>reqwest::StatusCode::FORBIDDEN</code>。如果响应超过速率限制，则将等待并重试。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">StatusCode</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token constant">UNIX_EPOCH</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>   foreign_links <span class="token punctuation">&#123;</span>       <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">SystemTimeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"https://api.github.com/users/rust-lang-nursery "</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> response <span class="token operator">=</span> client            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token constant">USER_AGENT</span><span class="token punctuation">,</span> <span class="token string">"My Rust App"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> rate_limit <span class="token operator">=</span> response            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-RateLimit-Limit"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"响应不包含预期的 X-RateLimit-Limit 标头"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Limit 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Limit 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> rate_remaining <span class="token operator">=</span> response            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-RateLimit-Remaining"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"响应不包含预期的 X-RateLimit-Remaining 标头"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Remaining 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Remaining 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> rate_reset_at <span class="token operator">=</span> response            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-RateLimit-Reset"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"响应不包含预期的 X-RateLimit-Reset 标头"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Reset 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法解析 X-RateLimit-Reset 标头值"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> rate_reset_within <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span>rate_reset_at<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">UNIX_EPOCH</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatusCode</span><span class="token punctuation">::</span><span class="token constant">FORBIDDEN</span> <span class="token operator">&amp;&amp;</span> rate_remaining <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"休眠 &#123;&#125; 秒。"</span><span class="token punctuation">,</span> rate_reset_within<span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span>rate_reset_within<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"速率限制当前为 &#123;&#125;/&#123;&#125;，此限制的重置将在 &#123;&#125; 秒内完成。"</span><span class="token punctuation">,</span>                rate_remaining<span class="token punctuation">,</span>                rate_limit<span class="token punctuation">,</span>                rate_reset_within<span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">速率限制当前为 <span class="token number">56</span>/60，此限制的重置将在 <span class="token number">1069</span> 秒内完成。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-下载">4.3 下载</h3><h4 id="4-3-1-下载文件到临时目录">4.3.1 下载文件到临时目录</h4><p>  需要安装<code>tempfile</code>库，可通过<code>cargo add tempfile</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">tempfile</span> <span class="token punctuation">=</span> <span class="token string">"3.5.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>tempfile::Builder</code> 创建一个临时目录，并使用 <code>reqwest::get</code> 通过 HTTP 协议异步下载文件。使用 <code>Response::url</code> 方法内部的 <code>tempdir()</code> 方法获取文件名字，使用 <code>File</code> 结构体创建目标文件，并使用 <code>io::copy</code> 将下载的数据复制到文件中。程序退出时，会自动删除临时目录。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span>copy<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tempfile<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>     foreign_links <span class="token punctuation">&#123;</span>         <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tmp_dir <span class="token operator">=</span> <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tempdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token string">"https://www.rust-lang.org/logos/rust-logo-512x512.png"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> dest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fname <span class="token operator">=</span> response            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">path_segments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>segments<span class="token closure-punctuation punctuation">|</span></span> segments<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>name<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">if</span> name<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">None</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">"tmp.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"要下载的文件：“&#123;&#125;”"</span><span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fname <span class="token operator">=</span> tmp_dir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"将位于：'&#123;:?&#125;'"</span><span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> content<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> dest<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">要下载的文件：“rust-logo-512x512.png”将位于：<span class="token string">'"/tmp/examplelAjEDw/rust-logo-512x512.png"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-3-2-使用-HTTP-range-请求头进行部分下载">4.3.2 使用 HTTP <code>range</code> 请求头进行部分下载</h4><p>  使用 <code>reqwest::blocking::Client::head</code> 获取响应的消息主体的大小（即消息主体内容长度）。然后，使用 <code>reqwest::blocking::Client::get</code> 下载（总计102400字节内容，单次下载 10240 字节的内容），同时打印进度消息。本实例使用同步的 <code>reqwest</code> 模块，消息范围标头指定响应的消息块大小和位置。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">HeaderValue</span><span class="token punctuation">,</span> <span class="token constant">CONTENT_LENGTH</span><span class="token punctuation">,</span> <span class="token constant">RANGE</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">StatusCode</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Header</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span>header<span class="token punctuation">::</span></span><span class="token class-name">ToStrError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">PartialRangeIter</span> <span class="token punctuation">&#123;</span>    start<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    end<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    buffer_size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">PartialRangeIter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> buffer_size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> buffer_size <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"无效的 buffer_size，给出一个大于零的值。"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">PartialRangeIter</span> <span class="token punctuation">&#123;</span>            start<span class="token punctuation">,</span>            end<span class="token punctuation">,</span>            buffer_size<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">PartialRangeIter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">HeaderValue</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">></span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token punctuation">&#123;</span>            <span class="token class-name">None</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> prev_start <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>buffer_size <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span>                <span class="token class-name">HeaderValue</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"bytes=&#123;&#125;-&#123;&#125;"</span><span class="token punctuation">,</span> prev_start<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"提供格式化的字符串！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"https://httpbin.org/range/102400?duration=2"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">CHUNK_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">10240</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> response        <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CONTENT_LENGTH</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"响应不包括内容长度"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token keyword">u64</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span>length<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无效的 Content-Length 标头"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> output_file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"download.bin"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"开始下载..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> range <span class="token keyword">in</span> <span class="token class-name">PartialRangeIter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">CHUNK_SIZE</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"范围 &#123;:?&#125;"</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token constant">RANGE</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">StatusCode</span><span class="token punctuation">::</span><span class="token constant">OK</span> <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token class-name">StatusCode</span><span class="token punctuation">::</span><span class="token constant">PARTIAL_CONTENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"意外的服务器响应: &#123;&#125;"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> response<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> output_file<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> content<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> output_file<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"成功完成下载！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">开始下载<span class="token punctuation">..</span>.范围 <span class="token string">"bytes=0-10239"</span>范围 <span class="token string">"bytes=10240-20479"</span>范围 <span class="token string">"bytes=20480-30719"</span>范围 <span class="token string">"bytes=30720-40959"</span>范围 <span class="token string">"bytes=40960-51199"</span>范围 <span class="token string">"bytes=51200-61439"</span>范围 <span class="token string">"bytes=61440-71679"</span>范围 <span class="token string">"bytes=71680-81919"</span>范围 <span class="token string">"bytes=81920-92159"</span>范围 <span class="token string">"bytes=92160-102399"</span>成功完成下载！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-POST-文件到-paste-rs">4.3.3 POST 文件到 <code>paste-rs</code></h4><p>  使用 <code>reqwest::Client</code> 建立与 <code>https://paste.rs</code> 的连接，遵循 <code>reqwest::RequestBuilder</code> 结构体模式。调用 <code>Client::post</code> 方法，以 <code>URL</code> 为参数连接目标，<code>RequestBuilder::body</code> 通过读取文件设置要发送的内容，<code>RequestBuilder::send</code> 方法在文件上传过程中将一直阻塞，直到返回响应消息。最后，<code>read_to_string</code> 返回响应消息并显示在控制台中。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IoError</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[tokio::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> paste_api <span class="token operator">=</span> <span class="token string">"https://paste.rs"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">//download.bin重命名为message</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> contents <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> contents<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>paste_api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response_text <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"您的粘贴位于: &#123;&#125;"</span><span class="token punctuation">,</span> response_text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">您的粘贴位于: https://paste.rs/NZN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十八 文本处理</title>
      <link href="/news/1682928266057.html"/>
      <url>/news/1682928266057.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-正则表达式">1. 正则表达式</h2><p>  需要安装<code>regex</code>库和<code>lazy_static</code>库，可通过<code>cargo add regex</code>和<code>cargo add lazy_static</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">lazy_static</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-1-验证并提取电子邮件登录信息">1.1 验证并提取电子邮件登录信息</h3><p>  验证电子邮件地址的格式是否正确，并提取 <code>@</code> 符号之前的所有内容。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">extract_login</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">RE</span><span class="token punctuation">:</span> <span class="token class-name">Regex</span> <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>            <span class="token string">r"(?x)            ^(?P&lt;login>[^@\s]+)@            ([[:word:]]+\.)*            [[:word:]]+$            "</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">captures</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>cap<span class="token closure-punctuation punctuation">|</span></span> cap<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>login<span class="token closure-punctuation punctuation">|</span></span> login<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extract_login</span><span class="token punctuation">(</span><span class="token string">r"I❤email@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">r"I❤email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token function">extract_login</span><span class="token punctuation">(</span><span class="token string">r"sdf+sdsfsd.as.sdsd@jhkk.d.rl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">r"sdf+sdsfsd.as.sdsd"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extract_login</span><span class="token punctuation">(</span><span class="token string">r"唐三藏@tang.da"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">r"唐三藏"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extract_login</span><span class="token punctuation">(</span><span class="token string">r"More@Than@One@at.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">extract_login</span><span class="token punctuation">(</span><span class="token string">r"Not an email@email"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-2-从文本提取标签元素唯一的列表">1.2 从文本提取标签元素唯一的列表</h3><p>  展示从文本中提取、排序和去除标签列表的重复元素。这里给出的标签正则表达式只捕获以字母开头的拉丁语标签，完整的 twitter 标签正则表达式要复杂得多。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">extract_hashtags</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">HASHTAG_REGEX</span><span class="token punctuation">:</span> <span class="token class-name">Regex</span> <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">r"\#[a-zA-Z][0-9a-zA-Z_]*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token constant">HASHTAG_REGEX</span>        <span class="token punctuation">.</span><span class="token function">find_iter</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>mat<span class="token closure-punctuation punctuation">|</span></span> mat<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token string">"Hey #world, I just got my new #dog, say hello to Till. #dog #forever #2 #_ "</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tags <span class="token operator">=</span> <span class="token function">extract_hashtags</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>tags<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"#dog"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tags<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"#forever"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tags<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"#world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>tags<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-3-从文本提取电话号码">1.3 从文本提取电话号码</h3><p>  需要安装<code>error-chain</code>库，可通过<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  使用 <code>Regex::captures_iter</code> 处理一个文本字符串，以捕获多个电话号码。这里的例子中是美国电话号码格式。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Regex</span><span class="token punctuation">(</span><span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">PhoneNumber</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    area<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>    exchange<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>    subscriber<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">PhoneNumber</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"1 (&#123;&#125;) &#123;&#125;-&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>area<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>exchange<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>subscriber<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> phone_text <span class="token operator">=</span> <span class="token string">"    +1 505 881 9292 (v) +1 505 778 2212 (c) +1 505 881 9297 (f)    (202) 991 9534    Alex 5553920011    1 (800) 233-2010    1.299.339.1020"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        <span class="token string">r#"(?x)          (?:\+?1)?                       # 国家代码，可选项          [\s\.]?          (([2-9]\d&#123;2&#125;)|\(([2-9]\d&#123;2&#125;)\)) # 地区代码          [\s\.\-]?          ([2-9]\d&#123;2&#125;)                    # 交换代码          [\s\.\-]?          (\d&#123;4&#125;)                         # 用户号码"#</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> phone_numbers <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">captures_iter</span><span class="token punctuation">(</span>phone_text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>cap<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> groups <span class="token operator">=</span> <span class="token punctuation">(</span>cap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">match</span> groups <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span> <span class="token punctuation">&#123;</span>                area<span class="token punctuation">:</span> area<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                exchange<span class="token punctuation">:</span> ext<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                subscriber<span class="token punctuation">:</span> sub<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        phone_numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>m<span class="token closure-punctuation punctuation">|</span></span> m<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token string">"1 (505) 881-9292"</span><span class="token punctuation">,</span>            <span class="token string">"1 (505) 778-2212"</span><span class="token punctuation">,</span>            <span class="token string">"1 (505) 881-9297"</span><span class="token punctuation">,</span>            <span class="token string">"1 (202) 991-9534"</span><span class="token punctuation">,</span>            <span class="token string">"1 (555) 392-0011"</span><span class="token punctuation">,</span>            <span class="token string">"1 (800) 233-2010"</span><span class="token punctuation">,</span>            <span class="token string">"1 (299) 339-1020"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-4-通过匹配多个正则表达式来筛选日志文件">1.4 通过匹配多个正则表达式来筛选日志文件</h3><p>  读取名为 <code>application.log</code>(可以根据以下输出的内容自建) 的文件，并且只输出包含下列内容的行：“<code>version X.X.X</code>”、端口为 <code>443</code> 的 IP 地址（如 “<code>192.168.0.1:443</code>”）、特定警告。正则表达集构造器 <code>regex::RegexSetBuilder</code> 构建了正则表达式集 <code>regex::RegexSet</code>。由于反斜杠在正则表达式中非常常见，因此使用原始字符串字面量可以使它们更具可读性。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">BufRead</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">RegexSetBuilder</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Regex</span><span class="token punctuation">(</span><span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> log_path <span class="token operator">=</span> <span class="token string">"application.log"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> buffered <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>log_path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token class-name">RegexSetBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>        <span class="token string">r#"version "\d\.\d\.\d""#</span><span class="token punctuation">,</span>        <span class="token string">r#"\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;:443"#</span><span class="token punctuation">,</span>        <span class="token string">r#"warning.*timeout expired"#</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">case_insensitive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    buffered        <span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> line<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> set<span class="token punctuation">.</span><span class="token function">is_match</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出：</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">fasfsafad version 1.2.1 afsadfwew 163.211.115.56:443 asfasdfsfsdfas warningfasfsafad version 1.2.2 afsadfwew 63.211.115.56:443 asfasdfsfsdfasfasfsafad version 1.2.3 afsadfwew 13.211.115.56:443 asfasdfsfsdfas timeout expired<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-文本模式替换">1.5 文本模式替换</h3><p>  将所有出现的国际标准 <code>ISO 8601</code> 日期模式 <code>YYYY-MM-DD</code> 替换为美式英语及中式日期模式。例如： <code>2013-01-15</code> 替换为 <code>01/15/2013</code>。<code>Regex::replace_all</code> 方法将替换整个正则表示匹配的所有内容。<code>&amp;str</code> 实现了 <code>Replacer</code> trait，它允许类似 <code>$abcde</code> 的变量引用相应的搜索匹配模式（search regex）中的命名捕获组 (<code>?P&lt;abcde&gt;REGEX</code>)。有关示例和转义的详细信息，请参阅替换字符串语法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>borrow<span class="token punctuation">::</span></span><span class="token class-name">Cow</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">reformat_dates_us</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Cow</span><span class="token operator">&lt;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">ISO8601_DATE_REGEX</span><span class="token punctuation">:</span> <span class="token class-name">Regex</span> <span class="token operator">=</span>            <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">r"(?P&lt;y>\d&#123;4&#125;)-(?P&lt;m>\d&#123;2&#125;)-(?P&lt;d>\d&#123;2&#125;)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token constant">ISO8601_DATE_REGEX</span><span class="token punctuation">.</span><span class="token function">replace_all</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> <span class="token string">"$m/$d/$y"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">reformat_dates_cn</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Cow</span><span class="token operator">&lt;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">ISO8601_DATE_REGEX</span><span class="token punctuation">:</span> <span class="token class-name">Regex</span> <span class="token operator">=</span>            <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">r"(?P&lt;y>\d&#123;4&#125;)-(?P&lt;m>\d&#123;2&#125;)-(?P&lt;d>\d&#123;2&#125;)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token constant">ISO8601_DATE_REGEX</span><span class="token punctuation">.</span><span class="token function">replace_all</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> <span class="token string">"$y年$m月$d日"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">"2012-03-14, 2013-01-15 and 2014-07-05"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> after_us <span class="token operator">=</span> <span class="token function">reformat_dates_us</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>after_us<span class="token punctuation">,</span> <span class="token string">"03/14/2012, 01/15/2013 and 07/05/2014"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> after_cn <span class="token operator">=</span> <span class="token function">reformat_dates_cn</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        after_cn<span class="token punctuation">,</span>        <span class="token string">"2012年03月14日, 2013年01月15日 and 2014年07月05日"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h2 id="2-字符串解析">2. 字符串解析</h2><h3 id="2-1-收集-Unicode-字符">2.1 收集 <code>Unicode</code> 字符</h3><p>  需要安装<code>unicode-segmentation</code>库，可通过<code>cargo add unicode-segmentation</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">unicode-segmentation</span> <span class="token punctuation">=</span> <span class="token string">"1.10.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>unicode-segmentation</code> crate 中的 <code>UnicodeSegmentation::graphemes</code> 函数，从 <code>UTF-8</code> 字符串中收集个别的 <code>Unicode</code> 字符。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">unicode_segmentation<span class="token punctuation">::</span></span><span class="token class-name">UnicodeSegmentation</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"José Guimarães 大胃王\r\n"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> graphemes <span class="token operator">=</span> <span class="token class-name">UnicodeSegmentation</span><span class="token punctuation">::</span><span class="token function">graphemes</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> graphemes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>graphemes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"é"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-2-自定义结构体并实现-FromStr-trait">2.2 自定义结构体并实现 <code>FromStr</code> trait</h3><p>  实例中，创建一个自定义结构体 <code>RGB</code> 并实现 <code>FromStr</code> trait，以将提供的颜色十六进制代码转换为其 <code>RGB</code> 颜色代码。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">RGB</span> <span class="token punctuation">&#123;</span>    r<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    g<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">FromStr</span> <span class="token keyword">for</span> <span class="token constant">RGB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Err</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">;</span>    <span class="token comment">// 解析格式为 '#rRgGbB..' 的颜色十六进制代码</span>    <span class="token comment">// 将其转换为 'RGB' 实例</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from_str</span><span class="token punctuation">(</span>hex_code<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Err</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// u8::from_str_radix(src: &amp;str, radix: u32)</span>        <span class="token comment">// 将给定的字符串切片转换为 u8</span>        <span class="token keyword">let</span> r<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hex_code<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> g<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hex_code<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hex_code<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">..</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token constant">RGB</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> code<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token string">r"#fa7268"</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> <span class="token constant">RGB</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>rgb<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">r"RGB颜色代码是: R: &#123;&#125; G: &#123;&#125; B: &#123;&#125;"</span><span class="token punctuation">,</span> rgb<span class="token punctuation">.</span>r<span class="token punctuation">,</span> rgb<span class="token punctuation">.</span>g<span class="token punctuation">,</span> rgb<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 不是有效的颜色十六进制代码！"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 测试 from_str 函数执行是否符合预期</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token constant">RGB</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">r"#fa7268"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token constant">RGB</span> <span class="token punctuation">&#123;</span>            r<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span>            g<span class="token punctuation">:</span> <span class="token number">114</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token number">104</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出及校验</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RGB颜色代码是: R: <span class="token number">250</span> G: <span class="token number">114</span> B: <span class="token number">104</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十七 科学计算</title>
      <link href="/news/1682928144687.html"/>
      <url>/news/1682928144687.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数学">1. 数学</h2><h3 id="1-1-线性代数">1.1 线性代数</h3><p>  需要安装<code>ndarray</code>库，可通过<code>cargo add ndarray</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">ndarray</span> <span class="token punctuation">=</span> <span class="token string">"0.15.6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-1-1-矩阵相加">1.1.1 矩阵相加</h4><p>  使用 <code>ndarray::arr2</code> 创建两个二维（2-D）矩阵，并按元素方式求和。注意：<code>sum</code> 的计算方式为 <code>let sum = &amp;a + &amp;b</code>，借用 <code>&amp;</code> 运算符获得 <code>a</code> 和 <code>b</code> 的引用，可避免销毁他们，使它们可以稍后显示。这样，就创建了一个包含其和的新数组。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ndarray<span class="token punctuation">::</span></span>arr2<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">arr2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">arr2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>+<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span>, <span class="token number">5</span>, <span class="token number">4</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span>, <span class="token number">7</span>, <span class="token number">7</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">7</span>, <span class="token number">7</span>, <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-矩阵相乘">1.1.2 矩阵相乘</h4><p>  使用 <code>ndarray::arr2</code> 创建两个矩阵，并使用 <code>ndarray::ArrayBase::dot</code> 对它们执行矩阵乘法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ndarray<span class="token punctuation">::</span></span>arr2<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">arr2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">arr2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span>, <span class="token number">10</span><span class="token punctuation">]</span>, <span class="token comment"># 28 = a[1][1] * b[1][1] + a[1][2] * b[2][1] + a[1][3] * b[3][1]</span> <span class="token punctuation">[</span><span class="token number">73</span>, <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-1-3-标量、向量Vector、矩阵相乘">1.1.3 标量、向量<code>Vector</code>、矩阵相乘</h4><p>  使用 <code>ndarray::arr1</code> 创建一维（1-D）数组或向量（<code>vector</code>），使用 <code>ndarray::arr2</code> 创建二维（2-D）数组（矩阵）。首先，一个标量乘以一个 <code>vector</code> 得到另一个 <code>vector</code>。然后，使用 <code>ndarray::Array2::dot</code> 将矩阵乘以新的 <code>vector</code>（矩阵相乘使用 <code>dot</code> 函数，而 <code>*</code> 运算符执行元素方式的乘法）。在 <code>ndarray</code> crate 中，根据上下文，一维数组可以解释为行 <code>vector</code> 或列 <code>vector</code>。如果 <code>vector</code> 表示的方向很重要，则必须使用只有一行或一列的二维（2-D）数组。在本实例中，<code>vector</code> 是右侧的一维（1-D）数组，因此 <code>dot</code> 函数将其处理为列 <code>vector</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ndarray<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token class-name">Array1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> scalar <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vector <span class="token operator">=</span> <span class="token function">arr1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> matrix <span class="token operator">=</span> <span class="token function">arr2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> new_vector<span class="token punctuation">:</span> <span class="token class-name">Array1</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> scalar <span class="token operator">*</span> vector<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> new_vector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> new_matrix <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_vector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> new_matrix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">8</span>, <span class="token number">12</span><span class="token punctuation">]</span> <span class="token comment"># new_vector 列</span><span class="token punctuation">[</span><span class="token number">128</span>, <span class="token number">200</span><span class="token punctuation">]</span> <span class="token comment"># new_matrix 列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-1-4-向量Vector比较">1.1.4 向量<code>Vector</code>比较</h4><p>  需要调整<code>ndarray</code>库和approx库，可通过<code>cargo add ndarray --features approx</code> 命令重新安装及安装<code>cargo add approx</code></p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token key property">approx</span> <span class="token punctuation">=</span> <span class="token string">"0.4"</span> <span class="token comment"># 代码目前在0.4版本测试通过，最新0.5.1上测试未通过</span><span class="token key property">ndarray</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.15.6"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"approx"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>ndarray</code> crate 支持多种创建数组的方法——此实例使用 <code>from</code> 从 <code>std::Vec</code> 创建数组 <code>ndarray::Array</code>。然后，对数组以元素方式求和。下面的实例按元素方式比较两个浮点型 <code>vector</code>。浮点数的存储通常不精确，因此很难进行精确的比较。但是，<code>approx</code> crate 中的 <code>assert_abs_diff_eq!</code> 宏允许方便地比较浮点型元素。要将 <code>approx</code> 和 <code>ndarray</code> 两个 crate一起使用，必须在 <code>Cargo.toml</code> 文件中的 <code>ndarray</code> 依赖项添加 <code>approx</code> 特性。例如：<code>ndarray = &#123; version = &quot;0.13&quot;, features = [&quot;approx&quot;] &#125;</code>。此实例还包含其他所有权示例。在这里，<code>let z = a + b</code> 执行后，会销毁<code>a and b</code>，然后所有权会转移到 <code>z</code>。或者，<code>let w = &amp;c + &amp;d</code> 创建一个新的 <code>vector</code>，而不销毁 <code>c</code> 或者 <code>d</code>，允许以后对它们进行修改。有关其他详细信息，请参见带有两个数组的二进制运算符。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ndarray<span class="token punctuation">::</span></span><span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">approx<span class="token punctuation">::</span></span>assert_abs_diff_eq<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> c <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> d <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> z <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token operator">&amp;</span>c <span class="token operator">+</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>    <span class="token macro property">assert_abs_diff_eq!</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"c = &#123;&#125;"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token macro property">assert_abs_diff_eq!</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">8</span>, <span class="token number">12</span><span class="token punctuation">]</span> <span class="token comment"># new_vector 列</span><span class="token punctuation">[</span><span class="token number">128</span>, <span class="token number">200</span><span class="token punctuation">]</span> <span class="token comment"># new_matrix 列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-1-5-向量Vector范数">1.1.5 向量<code>Vector</code>范数</h4><p>  范数，是具有“长度”概念的函数。在线性代数、泛函分析及相关的数学领域，范数是一个函数，是矢量空间内的所有矢量赋予非零的正长度或大小。半范数可以为非零的矢量赋予零长度。<br>  示例展示了 <code>Array1</code> 类型、<code>ArrayView1</code> 类型、<code>fold</code> 方法，以及 <code>dot</code> 方法在计算给定 <code>vector</code> 的 <code>l1</code> 和 <code>l2</code> 范数时的用法。 <code>l2_norm</code> 函数是两者中较简单的，它计算一个 <code>vector</code> 与自身的点积（<code>dot</code> product，数量积）的平方根。 <code>l1_norm</code> 函数通过 <code>fold</code> 运算来计算元素的绝对值（也可以通过 <code>x.mapv(f64::abs).scalar_sum()</code> 执行，但是会为 <code>mapv</code> 的结果分配一个新的数组）。请注意：<code>l1_norm</code> 和 <code>l2_norm</code> 都采用 <code>ArrayView1</code> 类型。这个实例考虑了 <code>vector</code> 范数，所以范数函数只需要接受一维视图（<code>ArrayView1</code>）。虽然函数可以使用类型为 <code>&amp;Array1&lt;f64&gt;</code> 的参数，但这将要求调用方引用拥有所有权的数组，这比访问视图更为严格（因为视图可以从任意数组或视图创建，而不仅仅是从拥有所有权的数组创建）。<code>Array</code> 和 <code>ArrayView</code> 都是 <code>ArrayBase</code> 的类型别名。于是，大多数的调用方参数类型可以是 <code>&amp;ArrayBase&lt;S, Ix1&gt; where S: Data</code>，这样调用方就可以使用 <code>&amp;array</code> 或者 <code>&amp;view</code> 而不是 <code>x.view()</code>。如果该函数是公共 API 的一部分，那么对于用户来说，这可能是一个更好的选择。对于内部函数，更简明的 <code>ArrayView1&lt;f64&gt;</code> 或许更合适。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ndarray<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>array<span class="token punctuation">,</span> <span class="token class-name">Array1</span><span class="token punctuation">,</span> <span class="token class-name">ArrayView1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">l1_norm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">ArrayView1</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> elem<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">+</span> elem<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">l2_norm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">ArrayView1</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">normalize</span><span class="token punctuation">(</span><span class="token keyword">mut</span> x<span class="token punctuation">:</span> <span class="token class-name">Array1</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Array1</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> norm <span class="token operator">=</span> <span class="token function">l2_norm</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">mapv_inplace</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e <span class="token operator">/</span> norm<span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token macro property">array!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"||x||_2 = &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">l2_norm</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"||x||_1 = &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">l1_norm</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标准化 x 收益率 &#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">||</span>x<span class="token operator">||</span>_2 <span class="token operator">=</span> <span class="token number">7.416198487095663</span><span class="token operator">||</span>x<span class="token operator">||</span>_1 <span class="token operator">=</span> <span class="token number">15</span>标准化 x 收益率 <span class="token punctuation">[</span><span class="token number">0.13483997249264842</span>, <span class="token number">0.26967994498529685</span>, <span class="token number">0.40451991747794525</span>, <span class="token number">0.5393598899705937</span>, <span class="token number">0.674199862463242</span><span class="token punctuation">]</span>, <span class="token assign-left variable">shape</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>, <span class="token assign-left variable">strides</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, <span class="token assign-left variable">layout</span><span class="token operator">=</span>CFcf <span class="token punctuation">(</span>0xf<span class="token punctuation">)</span>, const <span class="token assign-left variable">ndim</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-1-6-矩阵求逆">1.1.6 矩阵求逆</h4><p>  需要安装<code>nalgebra</code>库，可通过<code>cargo add nalgebra</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token key property">nalgebra</span> <span class="token punctuation">=</span> <span class="token string">"0.32.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  用 <code>nalgebra::Matrix3</code> 创建一个 3x3 的矩阵，如果可能的话，将其求逆。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">nalgebra<span class="token punctuation">::</span></span><span class="token class-name">Matrix3</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m1 <span class="token operator">=</span> <span class="token class-name">Matrix3</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"矩阵m1 = &#123;&#125;"</span><span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> m1<span class="token punctuation">.</span><span class="token function">try_inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>inv<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"m1 的逆矩阵是: &#123;&#125;"</span><span class="token punctuation">,</span> inv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"m1不可逆！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">矩阵m1 <span class="token operator">=</span>   ┌       ┐  │ <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> │  │ <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> │  │ <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> │  └       ┘m1 的逆矩阵是:   ┌          ┐  │  <span class="token number">3</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-1</span> │  │ <span class="token parameter variable">-4</span>  <span class="token number">2</span>  <span class="token number">1</span> │  │ <span class="token parameter variable">-1</span>  <span class="token number">0</span>  <span class="token number">1</span> │  └          ┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-7-（反）序列化矩阵">1.1.7 （反）序列化矩阵</h4><p>  实例实现将矩阵序列化为 <code>JSON</code>，以及从 <code>JSON</code> 反序列化出矩阵。序列化由 <code>serde_json::to_string</code> 处理，<code>serde_json::from_str</code> 则执行反序列化。请注意：序列化后再反序列化将返回原始矩阵。</p><p>  需要调整<code>nalgebra</code>和安装<code>serde_json</code>库，可通过<code>cargo add nalgebra --features serde-serialize</code>添加序列化特征,<code>cargo add serde_json</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token key property">nalgebra</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.32.2"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"serde-serialize"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token key property">serde_json</span> <span class="token punctuation">=</span> <span class="token string">"1.0.96"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">nalgebra</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">serde_json</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">nalgebra<span class="token punctuation">::</span></span><span class="token class-name">DMatrix</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> row_slice<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5001</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> matrix <span class="token operator">=</span> <span class="token class-name">DMatrix</span><span class="token punctuation">::</span><span class="token function">from_row_slice</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>row_slice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 序列化矩阵</span>    <span class="token keyword">let</span> serialized_matrix <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>matrix<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 反序列化出矩阵</span>    <span class="token keyword">let</span> deserialized_matrix<span class="token punctuation">:</span> <span class="token class-name">DMatrix</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serialized_matrix<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 验证反序列化出的矩阵 `deserialized_matrix` 等同于原始矩阵 `matrix`</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>deserialized_matrix <span class="token operator">==</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-2-三角学">1.2 三角学</h3><h4 id="1-2-1-计算三角形的边长">1.2.1 计算三角形的边长</h4><p>  计算直角三角形斜边的长度，其中斜边的角度为 <code>2</code> 弧度，对边长度为 <code>80</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> angle<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> side_length <span class="token operator">=</span> <span class="token number">80.0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> hypotenuse <span class="token operator">=</span> side_length <span class="token operator">/</span> angle<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"斜边: &#123;&#125;"</span><span class="token punctuation">,</span> hypotenuse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">斜边: <span class="token number">87.98001362356932</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-2-验证正切（tan）等于正弦（sin）除以余弦（cos）">1.2.2 验证正切（<code>tan</code>）等于正弦（<code>sin</code>）除以余弦（<code>cos</code>）</h4><p>  验证 <code>tan(x)</code> 是否等于 <code>sin(x)/cos(x)</code>，其中 <code>x=6</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">6.0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> x<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h4 id="1-2-3-地球上两点之间的距离">1.2.3 地球上两点之间的距离</h4><p>  实例使用<strong>半正矢公式</strong>计算地球上两点之间的距离（以公里为单位）。两个点用一对经纬度表示，然后，<code>to_radians</code> 将它们转换为弧度。<code>sin</code>、<code>cos</code>、<code>powi</code> 以及 <code>sqrt</code> 计算中心角。最终，可以计算出距离。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> earth_radius_kilometer <span class="token operator">=</span> <span class="token number">6371.0_f64</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>paris_latitude_degrees<span class="token punctuation">,</span> paris_longitude_degrees<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">48.85341_f64</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.34880_f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>london_latitude_degrees<span class="token punctuation">,</span> london_longitude_degrees<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">51.50853_f64</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.12574_f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> paris_latitude <span class="token operator">=</span> paris_latitude_degrees<span class="token punctuation">.</span><span class="token function">to_radians</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> london_latitude <span class="token operator">=</span> london_latitude_degrees<span class="token punctuation">.</span><span class="token function">to_radians</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> delta_latitude <span class="token operator">=</span> <span class="token punctuation">(</span>paris_latitude_degrees <span class="token operator">-</span> london_latitude_degrees<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_radians</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> delta_longitude <span class="token operator">=</span> <span class="token punctuation">(</span>paris_longitude_degrees <span class="token operator">-</span> london_longitude_degrees<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_radians</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> central_angle_inner <span class="token operator">=</span> <span class="token punctuation">(</span>delta_latitude <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">+</span> paris_latitude<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> london_latitude<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>delta_longitude <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> central_angle <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> central_angle_inner<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> distance <span class="token operator">=</span> earth_radius_kilometer <span class="token operator">*</span> central_angle<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"地球表面巴黎和伦敦之间的距离是 &#123;:.1&#125; 公里"</span><span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">地球表面巴黎和伦敦之间的距离是 <span class="token number">335.0</span> 公里<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-复数">1.3 复数</h3><p>  需要安装<code>num</code>库，可通过<code>cargo add num</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">num</span> <span class="token punctuation">=</span> <span class="token string">"0.4.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-1-创建复数">1.3.1 创建复数</h4><p>  创建类型<code>num::complex::Complex</code> 的复数，复数的实部和虚部必须是同一类型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> complex_integer <span class="token operator">=</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> complex_float <span class="token operator">=</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10.1</span><span class="token punctuation">,</span> <span class="token number">20.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"复整数: &#123;&#125;"</span><span class="token punctuation">,</span> complex_integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"复浮点数: &#123;&#125;"</span><span class="token punctuation">,</span> complex_float<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">复整数: <span class="token number">10</span>+20i复浮点数: <span class="token number">10.1</span>+20.1i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-2-复数相加">1.3.2 复数相加</h4><p>  对复数执行数学运算与对内置类型执行数学运算是一样的：计算的数字必须是相同的类型（如浮点数或整数）</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> complex_num1 <span class="token operator">=</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须为浮点数</span>    <span class="token keyword">let</span> complex_num2 <span class="token operator">=</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> complex_num1 <span class="token operator">+</span> complex_num2<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"和: &#123;&#125;"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">和: <span class="token number">13.1</span>+15.8i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-3-复数的数学函数">1.3.3 复数的数学函数</h4><p>  对复数执行数学运算与对内置类型执行数学运算是一样的：计算的数字必须是相同的类型（如浮点数或整数）</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"e^(2i * pi) = &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = -1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e^<span class="token punctuation">(</span>2i * pi<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>-0.00000000000000024492935982947064i <span class="token comment"># 输出不是精确的 1 而是带有一个小的虚部，这是由于浮点数的有限精度造成的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-统计学">1.4 统计学</h3><h4 id="1-4-1-集中趋势度量">1.4.1 集中趋势度量</h4><p>  本节实例计算 Rust 数组中包含的数据集的集中趋势度量。对于一个空的数据集，可能没有平均数、中位数或众数去计算，因此每个函数都返回 <code>[Option]</code> ，由调用者处理。</p><ul><li>实例1: 是通过对数据引用生成一个迭代器，然后计算平均数（所有测量值的总和除以测量值的计数），并使用 <code>[sum]</code> 和 <code>[len]</code> 函数分别确定值的总和及值的计数。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mean <span class="token operator">=</span> <span class="token keyword">match</span> count <span class="token punctuation">&#123;</span>        positive <span class="token keyword">if</span> positive <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> count <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"数据的平均值是 &#123;:?&#125;"</span><span class="token punctuation">,</span> mean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">数据的平均值是 Some<span class="token punctuation">(</span><span class="token number">5.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>实例2: 使用快速选择算法（Quick Select Algorithm）计算中位数，该算法只对已知可能包含中位数的数据集的分区进行排序，从而避免了完整[排序]<code>[sort]</code>。该算法使用 <code>[cmp]</code> 和 <code>[Ordering]</code> 简便地地决定要检查的下一个分区，并使用 <code>[split_at]</code> 为每个步骤的下一个分区选择一个任意的枢轴量。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token number">0</span> <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token punctuation">(</span>pivot_slice<span class="token punctuation">,</span> tail<span class="token punctuation">)</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split_at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pivot <span class="token operator">=</span> pivot_slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> <span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=</span> tail<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> splits<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">mut</span> left<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> right<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> splits<span class="token punctuation">;</span>                    <span class="token keyword">if</span> next <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>pivot <span class="token punctuation">&#123;</span>                        left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                splits            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">select</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> part <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> part <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pivot_idx <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">match</span> pivot_idx<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>pivot<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token operator">=></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span> <span class="token operator">=></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>pivot_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">median</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> size <span class="token punctuation">&#123;</span>        even <span class="token keyword">if</span> even <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> fst_med <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>even <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> snd_med <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> even <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">match</span> <span class="token punctuation">(</span>fst_med<span class="token punctuation">,</span> snd_med<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>fst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>snd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fst <span class="token operator">+</span> snd<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        odd <span class="token operator">=></span> <span class="token function">select</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> odd <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> part <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"分区是 &#123;:?&#125;"</span><span class="token punctuation">,</span> part<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sel <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"有序索引 &#123;&#125; 处的选择是 &#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> med <span class="token operator">=</span> <span class="token function">median</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"中位数是 &#123;:?&#125;"</span><span class="token punctuation">,</span> med<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">分区是 Some<span class="token variable"><span class="token punctuation">((</span>[<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>]<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> [<span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span>]<span class="token punctuation">))</span></span>有序索引 <span class="token number">5</span> 处的选择是 Some<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>中位数是 Some<span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>实例3: 使用可变的 <code>[HashMap]</code> 来计算众数，<code>[fold]</code> 和 <code>[entry]</code> API 用来从集合中收集每个不同整数的计数。<code>[HashMap]</code> 中最常见的值可以用 <code>[max_by_key]</code> 取得。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> frequencies <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> freqs<span class="token punctuation">,</span> value<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>freqs<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        freqs    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mode <span class="token operator">=</span> frequencies        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">max_by_key</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> count<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"众数是 &#123;:?&#125;"</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">众数是 Some<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-2-计算标准偏差">1.4.2 计算标准偏差</h4><p>  计算一组测量值的标准偏差和 <code>z</code> 分数（z-score）。标准偏差定义为方差的平方根（用 <code>f32</code> 浮点型的 <code>[sqrt]</code> 计算），其中方差是每个测量值与平均数之间的平方差的和除以测量次数。<code>z</code>分数（z-score）是指单个测量值偏离数据集平均数的标准差数，<code>z = (x - μ) / σ</code>，其中 <code>x</code> 是数据点的值，<code>μ</code> 是数据集的平均值，<code>σ</code> 是数据集的标准差。。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">mean</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> count <span class="token punctuation">&#123;</span>        positive <span class="token keyword">if</span> positive <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> count <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">std_deviation</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token function">mean</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>data_mean<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> variance <span class="token operator">=</span> data                <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>value<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> diff <span class="token operator">=</span> data_mean <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>value <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    diff <span class="token operator">*</span> diff                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">/</span> count <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span>variance<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data_mean <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"平均数是 &#123;:?&#125;"</span><span class="token punctuation">,</span> data_mean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data_std_deviation <span class="token operator">=</span> <span class="token function">std_deviation</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标准差是 &#123;:?&#125;"</span><span class="token punctuation">,</span> data_std_deviation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> zscore <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token punctuation">(</span>data_mean<span class="token punctuation">,</span> data_std_deviation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>mean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>std_deviation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> diff <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">-</span> mean<span class="token punctuation">;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> std_deviation<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        _ <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"索引 4 处数据的 Z 分数（值为 &#123;&#125;）为 &#123;:?&#125;"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> zscore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">平均数是 Some<span class="token punctuation">(</span><span class="token number">5.4</span><span class="token punctuation">)</span>标准差是 Some<span class="token punctuation">(</span><span class="token number">3.6110942</span><span class="token punctuation">)</span>索引 <span class="token number">4</span> 处数据的 Z 分数（值为 <span class="token number">5</span>）为 Some<span class="token punctuation">(</span>-0.11076978<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-其它数学计算">1.5 其它数学计算</h3><h4 id="1-5-1-大数">1.5.1 大数</h4><p>  <code>BigInt</code> 使得超过 128 位的大整数计算成为可能。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">num<span class="token punctuation">::</span>bigint<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BigInt</span><span class="token punctuation">,</span> <span class="token class-name">ToBigInt</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">factorial</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">BigInt</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> factorial<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">to_bigint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            factorial <span class="token operator">=</span> factorial <span class="token operator">*</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        factorial    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"计算阶乘失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;! 等于 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 约为 9.332622e+157</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">100</span><span class="token operator">!</span> 等于 <span class="token number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十六 操作系统</title>
      <link href="/news/1682928047228.html"/>
      <url>/news/1682928047228.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-外部命令">1. 外部命令</h2><p>  需要安装<code>regex</code>库和<code>error-chain</code>库，可通过<code>cargo add regex</code>和<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-1-运行外部命令并处理-stdout">1.1 运行外部命令并处理 <code>stdout</code></h3><p>  将 <code>git log --oneline</code> 作为外部命令 <code>Command</code> 运行，并使用 <code>Regex</code> 检查其 <code>Output</code>，以获取最后 5 次提交的哈希值和消息。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token class-name">Command</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Regex</span><span class="token punctuation">(</span><span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">FromUtf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(PartialEq, Default, Clone, Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Commit</span> <span class="token punctuation">&#123;</span>    hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"git"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"--oneline"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>output<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"Command executed with failing error code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        <span class="token string">r"(?x)                               ([0-9a-fA-F]+) # 提交的哈希值                               (.*)           # 提交信息"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> pattern<span class="token punctuation">.</span><span class="token function">captures</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>cap<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Commit</span> <span class="token punctuation">&#123;</span>            hash<span class="token punctuation">:</span> cap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span> cap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Commit <span class="token punctuation">&#123;</span> hash: <span class="token string">"f307002"</span>, message: <span class="token string">"test11"</span> <span class="token punctuation">&#125;</span>Commit <span class="token punctuation">&#123;</span> hash: <span class="token string">"60d4e16"</span>, message: <span class="token string">"test12"</span> <span class="token punctuation">&#125;</span>Commit <span class="token punctuation">&#123;</span> hash: <span class="token string">"7335ab9"</span>, message: <span class="token string">"test13"</span> <span class="token punctuation">&#125;</span>Commit <span class="token punctuation">&#123;</span> hash: <span class="token string">"e545eef"</span>, message: <span class="token string">"test14"</span> <span class="token punctuation">&#125;</span>Commit <span class="token punctuation">&#123;</span> hash: <span class="token string">"9ed33ac"</span>, message: <span class="token string">"test15"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-运行传递-stdin-的外部命令，并检查错误代码">1.2 运行传递 <code>stdin</code> 的外部命令，并检查错误代码</h3><p>  使用外部命令 <code>Command</code> 打开 <code>python</code>(注：Linux下可能是<code>python3</code>) 解释器，并传递一条 <code>python</code> 语句供其执行，然后解析语句的输出结构体 <code>Output</code></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Command</span><span class="token punctuation">,</span> <span class="token class-name">Stdio</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    errors <span class="token punctuation">&#123;</span> <span class="token class-name">CmdError</span> <span class="token punctuation">&#125;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">FromUtf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"python3"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stderr</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    child        <span class="token punctuation">.</span>stdin        <span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"Child process stdin has not been captured!"</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token string">b"import this; copyright(); credits(); exit()"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">wait_with_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> output<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> raw_output <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> words <span class="token operator">=</span> raw_output            <span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> s<span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">HashSet</span><span class="token operator">&lt;</span>_<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"找到 &#123;&#125; 个独特的词:"</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:#?&#125;"</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> err <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"外部命令失败:\n &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">找到 <span class="token number">127</span> 个独特的词:<span class="token punctuation">&#123;</span>    <span class="token string">"now."</span>,    <span class="token string">"1995-2001"</span>,    <span class="token string">"purity."</span>,    <span class="token punctuation">..</span>. <span class="token comment"># 此处省略</span>    <span class="token string">"complex."</span>,    <span class="token string">"may"</span>,<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-运行管道传输的外部命令">1.3 运行管道传输的外部命令</h3><p>  显示当前工作目录中前 10 大的文件和子目录，它等同于运行： <code>du -ah . | sort -hr | head -n 10</code>。每个命令 <code>Command</code> 代表一个进程，子进程的输出是通过父进程和子进程之间的管道 <code>Stdio::piped</code> 捕获的。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Command</span><span class="token punctuation">,</span> <span class="token class-name">Stdio</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">FromUtf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> directory <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">current_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> du_output_child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"du"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"-ah"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>directory<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>du_output<span class="token punctuation">)</span> <span class="token operator">=</span> du_output_child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> sort_output_child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"-hr"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stdin</span><span class="token punctuation">(</span>du_output<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        du_output_child<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>sort_output<span class="token punctuation">)</span> <span class="token operator">=</span> sort_output_child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> head_output_child <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">"-n"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stdin</span><span class="token punctuation">(</span>sort_output<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> head_stdout <span class="token operator">=</span> head_output_child<span class="token punctuation">.</span><span class="token function">wait_with_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            sort_output_child<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"“&#123;&#125;”中的前 10 个最大文件和目录:\n&#123;&#125;"</span><span class="token punctuation">,</span>                directory<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>head_stdout<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">“/root/rustcookbook/ostest”中的前 <span class="token number">10</span> 个最大文件和目录:160M    /root/rustcookbook/ostest/target/debug160M    /root/rustcookbook/ostest/target160M    /root/rustcookbook/ostest124M    /root/rustcookbook/ostest/target/debug/deps18M     /root/rustcookbook/ostest/target/debug/build17M     /root/rustcookbook/ostest/target/debug/deps/libregex_syntax-6ee924d67e38f866.rlib13M     /root/rustcookbook/ostest/target/debug/ostest11M     /root/rustcookbook/ostest/target/debug/deps/libregex-62f85974b4cf0dcb.rlib11M     /root/rustcookbook/ostest/target/debug/deps/libaho_corasick-6fc38c3e1c0e1b2d.rlib<span class="token number">9</span>.7M    /root/rustcookbook/ostest/target/debug/deps/libbacktrace-75169ab568ebd602.rlib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-将子进程的-stdout-和-stderr-重定向到同一个文件">1.4 将子进程的 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个文件</h3><p>  生成子进程并将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个文件。它遵循与运行管道传输的外部命令相同的思想，但是 <code>process::Stdio</code> 会将输出写入指定的文件。对 <code>stdout</code> 和 <code>stderr</code> 而言，<code>File::try_clone</code> 引用相同的文件句柄。它将确保两个句柄使用相同的光标位置进行写入。下面的实例等同于运行 Unix shell 命令 <code>ls . oops &gt;out.txt 2&gt;&amp;1</code>（命令用于将标准输出和标准错误都重定向到名为 <code>out.txt</code> 的文件中）。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Command</span><span class="token punctuation">,</span> <span class="token class-name">Stdio</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> outputs <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> errors <span class="token operator">=</span> outputs<span class="token punctuation">.</span><span class="token function">try_clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"oops"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stderr</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">wait_with_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>将创建<code>out.txt</code>,文件内容如下：</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ls: cannot access 'oops': No such file or directory.:Cargo.lockCargo.tomllearn.mdout.txtsrctarget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-持续处理子进程的输出">1.5 持续处理子进程的输出</h3><p>  在运行外部命令并处理 <code>stdout</code> 实例中，直到外部命令 <code>Command</code> 完成，<code>stdout</code> 的处理才开始。下面的实例调用 <code>Stdio::piped</code> 创建管道，并在 <code>BufReader</code> 被更新后立即读取 <code>stdout</code>，持续不断地处理。下面的实例等同于 Unix shell 命令 <code>journalctl | grep usb</code>.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufRead</span><span class="token punctuation">,</span> <span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Command</span><span class="token punctuation">,</span> <span class="token class-name">Stdio</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> stdout <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"journalctl"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token class-name">Stdio</span><span class="token punctuation">::</span><span class="token function">piped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span>stdout        <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Other</span><span class="token punctuation">,</span> <span class="token string">"无法捕获标准输出。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>    reader        <span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> line<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"usb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>将输出：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Feb <span class="token number">25</span> <span class="token number">10</span>:51:07 dynasty sshd<span class="token punctuation">[</span><span class="token number">917191</span><span class="token punctuation">]</span>: Invalid user <span class="token punctuation">..</span>.Feb <span class="token number">25</span> <span class="token number">10</span>:51:09 dynasty sshd<span class="token punctuation">[</span><span class="token number">917191</span><span class="token punctuation">]</span>: Failed password <span class="token punctuation">..</span>.Feb <span class="token number">25</span> <span class="token number">10</span>:51:11 dynasty sshd<span class="token punctuation">[</span><span class="token number">917191</span><span class="token punctuation">]</span>: Disconnected <span class="token punctuation">..</span>.Feb <span class="token number">25</span> <span class="token number">10</span>:55:44 dynasty sshd<span class="token punctuation">[</span><span class="token number">917239</span><span class="token punctuation">]</span>: Invalid user <span class="token punctuation">..</span>.Feb <span class="token number">25</span> <span class="token number">10</span>:55:45 dynasty sshd<span class="token punctuation">[</span><span class="token number">917239</span><span class="token punctuation">]</span>: Failed password <span class="token punctuation">..</span>.<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-读取环境变量">1.6 读取环境变量</h3><p>  通过 <code>std::env::var</code> 读取环境变量。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从环境变量 `CONFIG` 读取配置路径 `config_path`。</span>    <span class="token comment">// 如果 `CONFIG` 未设置，采用默认配置路径。</span>    <span class="token keyword">let</span> config_path <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">"CONFIG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">"/etc/myapp/config"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> config<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span>config_path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Config: &#123;&#125;"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>首先设置一个环境变量：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CONFIG</span><span class="token operator">=</span>out.txt <span class="token comment"># 将要读取的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>运行<code>cargo run</code>将输出：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Config: ls: cannot access <span class="token string">'oops'</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory.:Cargo.lockCargo.tomllearn.mdout.txtsrctarget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十五 网络</title>
      <link href="/news/1682605314170.html"/>
      <url>/news/1682605314170.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务器">1. 服务器</h2><h3 id="1-1-监听未使用的-TCP-IP-端口">1.1 监听未使用的 <code>TCP/IP</code> 端口</h3><p>  实例中，程序将监听显示在控制台上的端口，直到一个请求被发出。当将端口设置为 0 时，<code>SocketAddrV4</code> 会分配一个随机端口。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Ipv4Addr</span><span class="token punctuation">,</span> <span class="token class-name">SocketAddrV4</span><span class="token punctuation">,</span> <span class="token class-name">TcpListener</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> loopback <span class="token operator">=</span> <span class="token class-name">Ipv4Addr</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token class-name">SocketAddrV4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>loopback<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> port <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">local_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"在&#123;&#125;上监听，访问这个端口结束程序"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> tcp_stream<span class="token punctuation">,</span> addr<span class="token punctuation">)</span> <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞，直到被请求</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"收到连接！ &#123;:?&#125; 正在发送数据。"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _ <span class="token operator">=</span> tcp_stream<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; 说 &#123;&#125;"</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  交互步骤如下：</p><ul><li><ol><li>运行<code>cargo run</code>输出（设命令终端为A）</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在127.0.0.1:35963上监听，访问这个端口结束程序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>新启命令终端，运行<code>telnet 127.0.0.1 35963</code>（设命令终端为B）,输出</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Trying <span class="token number">127.0</span>.0.1<span class="token punctuation">..</span>.Connected to <span class="token number">127.0</span>.0.1.Escape character is <span class="token string">'^]'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><ol start="3"><li>此时服务端收到请求，终端A输出如下：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在127.0.0.1:35963上监听，访问这个端口结束程序收到连接！ <span class="token number">127.0</span>.0.1:56962 正在发送数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><ol start="4"><li>在客户端（即终端B）上输入信息“你好”后，按<code>Ctrl+]</code>键进入 <code>telnet</code> 的命令模式，然后输入 <code>quit</code> 关闭连接。这样，<code>telnet</code> 客户端会发送一个正常的关闭连接请求，服务器就能收到数据并打印出来了：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Trying <span class="token number">127.0</span>.0.1<span class="token punctuation">..</span>.Connected to <span class="token number">127.0</span>.0.1.Escape character is <span class="token string">'^]'</span><span class="token builtin class-name">.</span>你好^<span class="token punctuation">]</span>telnet<span class="token operator">></span> quitConnection closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="5"><li>此时服务端的输入如下：</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在127.0.0.1:35963上监听，访问这个端口结束程序收到连接！ <span class="token number">127.0</span>.0.1:56962 正在发送数据。<span class="token number">127.0</span>.0.1:56962 说 你好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十四 内存管理</title>
      <link href="/news/1682605267219.html"/>
      <url>/news/1682605267219.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-常量">1. 常量</h2><p>  需要安装<code>lazy_static</code>库，可通过<code>cargo add lazy_static</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">lazy_static</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-声明延迟计算常量">1.1 声明延迟计算常量</h3><p>  声明延迟计算的常量 <code>HashMap</code>。<code>HashMap</code> 将被计算一次，随后存储在全局静态（全局堆栈）引用。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">PRIVILEGES</span><span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">show_access</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> access <span class="token operator">=</span> <span class="token constant">PRIVILEGES</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;: &#123;:?&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> access<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> access <span class="token operator">=</span> <span class="token constant">PRIVILEGES</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"James: &#123;:?&#125;"</span><span class="token punctuation">,</span> access<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_access</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">James: Some<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"user"</span>, <span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Jim: Some<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十三 硬件支持</title>
      <link href="/news/1682605206734.html"/>
      <url>/news/1682605206734.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-处理器">1. 处理器</h2><p>  需要安装<code>num_cpus</code>库，可通过<code>cargo add num_cpus</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">num_cpus</span> <span class="token punctuation">=</span> <span class="token string">"1.15.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-检查逻辑-cpu-内核的数量">1.1 检查逻辑 cpu 内核的数量</h3><p>  使用 <code>[num_cpus::get]</code> 显示当前机器中的逻辑 <code>CPU</code> 内核的数量。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"逻辑核心数为 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token namespace">num_cpus<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">逻辑核心数为 <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十二 文件系统</title>
      <link href="/news/1682515447413.html"/>
      <url>/news/1682515447413.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-文件读写">1. 文件读写</h2><h3 id="1-1-读取文件的字符串行">1.1 读取文件的字符串行</h3><p>  向文件写入三行信息，然后使用 <code>BufRead::lines</code> 创建的迭代器 <code>Lines</code> 读取文件，一次读回一行。<code>File</code> 模块实现了提供 <code>BufReader</code> 结构体的 <code>Read</code> trait。<code>File::create</code> 打开文件 File 进行写入，<code>File::open</code> 则进行读取。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufRead</span><span class="token punctuation">,</span> <span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"lines.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> output <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">write!</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"Rust\n💖\n呵呵"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> buffered <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> buffered<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> line<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rust💖呵呵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-避免读取写入同一文件">1.2 避免读取写入同一文件</h3><p>  需要安装<code>same-file</code>库，可通过<code>cargo add same-file</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">same-file</span> <span class="token punctuation">=</span> <span class="token string">"1.0.6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  对文件使用 <code>same_file::Handle</code> 结构体，可以测试文件句柄是否等同。在本实例中，将对要读取和写入的文件句柄进行相等性测试。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">same_file<span class="token punctuation">::</span></span><span class="token class-name">Handle</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufRead</span><span class="token punctuation">,</span> <span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path_to_read <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"new.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stdout_handle <span class="token operator">=</span> <span class="token class-name">Handle</span><span class="token punctuation">::</span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token class-name">Handle</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>path_to_read<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> stdout_handle <span class="token operator">==</span> handle <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Other</span><span class="token punctuation">,</span> <span class="token string">"您正在读取和写入同一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path_to_read<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token keyword">in</span> file<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; : &#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> line<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">to_uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行<code>cargo run</code>输出显示文件 <code>new.txt</code> 的内容。</p></li><li><p>运行<code>cargo run &gt;&gt; ./new.txt</code>报错，因为是同一文件。输出</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Custom <span class="token punctuation">&#123;</span> kind: Other, error: <span class="token string">"您正在读取和写入同一个文件"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-使用内存映射随机访问文件">1.3 使用内存映射随机访问文件</h3><p>  需要安装<code>memmap</code>库，可通过<code>cargo add memmap</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">memmap</span> <span class="token punctuation">=</span> <span class="token string">"0.7.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>memmap</code> 创建文件的内存映射，并模拟文件的一些非序列读取。使用内存映射意味着您仅需索引一个切片，而不是使用 <code>seek</code> 方法来导航整个文件。<code>Mmap::map</code> 函数假定内存映射后的文件没有被另一个进程同时更改，否则会出现竞态条件。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">memmap<span class="token punctuation">::</span></span><span class="token class-name">Mmap</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Write</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">write!</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"content.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token string">"My hovercraft is full of eels!"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"content.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Mmap</span><span class="token punctuation">::</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> random_indexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">..</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">b"hovercraft"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> random_bytes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span> <span class="token operator">=</span> random_indexes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>idx<span class="token closure-punctuation punctuation">|</span></span> map<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random_bytes<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">b"My loaf!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h2 id="2-目录遍历">2 目录遍历</h2><h3 id="2-1-过去-24-小时内修改过的文件名">2.1 过去 24 小时内修改过的文件名</h3><p>  需要安装<code>error_chain</code>库，可通过<code>cargo add error_chain</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  通过调用 <code>env::current_dir</code> 获取当前工作目录，然后通过 <code>fs::read_dir</code> 读取目录中的每个条目，通过 <code>DirEntry::path</code> 提取条目路径，以及通过通过 <code>fs::Metadata</code> 获取条目元数据。<code>Metadata::modified</code> 返回条目自上次更改以来的运行时间 <code>SystemTime::elapsed。Duration::as_secs</code> 将时间转换为秒，并与 24 小时（24 <em>60</em> 60 秒）进行比较。<code>Metadata::is_file</code> 用于筛选出目录。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>env<span class="token punctuation">,</span> fs<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SystemTimeError</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">SystemTimeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current_dir <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">current_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"在过去 24 小时内修改的条目&#123;:?&#125;:"</span><span class="token punctuation">,</span> current_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_dir</span><span class="token punctuation">(</span>current_dir<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> entry <span class="token operator">=</span> entry<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> metadata <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> last_modified <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">modified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> last_modified <span class="token operator">&lt;</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"最后修改：&#123;:?&#125; 秒，只读：&#123;:?&#125;，大小：&#123;:?&#125; 字节，文件名：&#123;:?&#125;"</span><span class="token punctuation">,</span>                last_modified<span class="token punctuation">,</span>                metadata<span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readonly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                metadata<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                path<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"没有文件名"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在过去 <span class="token number">24</span> 小时内修改的条目<span class="token string">"/root/rustcookbook/filetest"</span><span class="token builtin class-name">:</span>最后修改：118 秒，只读：false，大小：237 字节，文件名：<span class="token string">"Cargo.toml"</span>最后修改：107 秒，只读：false，大小：4336 字节，文件名：<span class="token string">"Cargo.lock"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-查找给定路径的循环">2.2 查找给定路径的循环</h3><p>  使用 <code>same_file::is_same_file</code> 检测给定路径的循环。例如，可以通过软连接（符号链接）在 <code>Unix</code> 系统上创建循环：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /tmp/foo/bar/baz<span class="token function">ln</span> <span class="token parameter variable">-s</span> /tmp/foo/  /tmp/foo/bar/baz/qux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>下面的实例将断言存在一个循环。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">same_file<span class="token punctuation">::</span></span>is_same_file<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Path</span><span class="token punctuation">,</span> <span class="token class-name">PathBuf</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">contains_loop</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">>></span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">PathBuf</span><span class="token punctuation">,</span> <span class="token class-name">PathBuf</span><span class="token punctuation">)</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> path_buf <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">to_path_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> path_buf<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token function">is_same_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path_buf<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path_buf<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">to_path_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>looped_paths<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">contains_loop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path_buf<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>looped_paths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token function">contains_loop</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo/bar/baz/qux/bar/baz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>            <span class="token class-name">PathBuf</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">PathBuf</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo/bar/baz/qux"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-3-递归查找重名文件">2.3 递归查找重名文件</h3><p>  需要安装<code>walkdir</code>库，可通过<code>cargo add walkdir</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">walkdir</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  在当前目录中递归查找重复的文件名，只打印一次。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">WalkDir</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> filenames <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token punctuation">::</span>ok<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">file_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> f_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string_lossy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> counter <span class="token operator">=</span> filenames<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>f_name<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token operator">*</span>counter <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> f_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出(基本上是<code>target</code>目录下的文件)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">invoked.timestamproot-outputoutputstderr<span class="token punctuation">..</span>.dep-lib-adler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-使用给定断言递归查找所有文件">2.4 使用给定断言递归查找所有文件</h3><p>  在当前目录中查找最近一天内修改的 <code>JSON</code> 文件。使用 <code>follow_links</code> 确保软链接（符号链接）像普通目录和文件一样被按照当前查找规则执行。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">WalkDir</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">WalkDir</span><span class="token punctuation">(</span><span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SystemTime</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">SystemTimeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">follow_links</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> f_name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string_lossy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> sec <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">modified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> f_name<span class="token punctuation">.</span><span class="token function">ends_with</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sec<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">86400</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> f_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出(基本上是<code>target</code>目录下的文件)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.rustc_info.jsonlib-gimli.json<span class="token punctuation">..</span>.lib-adler.jsonbin-filetest.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-跳过隐藏文件遍历目录">2.5 跳过隐藏文件遍历目录</h3><p>  递归下行到子目录的过程中，使用 <code>filter_entry</code> 对目录中的条目传递 <code>is_not_hidden</code> 断言，从而跳过隐藏的文件和目录。<code>Iterator::filter</code> 可应用到要检索的任何目录 <code>WalkDir::DirEntry</code>，即使父目录是隐藏目录。根目录 “.” 的检索结果，通过在断言 <code>is_not_hidden</code> 中使用 <code>WalkDir::depth</code> 参数生成。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">DirEntry</span><span class="token punctuation">,</span> <span class="token class-name">WalkDir</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">is_not_hidden</span><span class="token punctuation">(</span>entry<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">DirEntry</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    entry        <span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> entry<span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_entry</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">is_not_hidden</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token closure-punctuation punctuation">|</span></span> v<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出(基本上是<code>target</code>目录下的文件)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./Cargo.toml./src./src/main.rs./target./target/debug./target/debug/build<span class="token punctuation">..</span>../Cargo.lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-在给定深度的目录，递归计算文件大小">2.6 在给定深度的目录，递归计算文件大小</h3><p>  通过<code>WalkDir::min_depth</code> 和 <code>WalkDir::max_depth</code> 方法，可以灵活设置目录的递归深度。下面的实例计算了 3 层子文件夹深度的所有文件的大小总和，计算中忽略根文件夹中的文件。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">WalkDir</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> total_size <span class="token operator">=</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">min_depth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">max_depth</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>entry<span class="token closure-punctuation punctuation">|</span></span> entry<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>entry<span class="token closure-punctuation punctuation">|</span></span> entry<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>metadata<span class="token closure-punctuation punctuation">|</span></span> metadata<span class="token punctuation">.</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> m<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"总大小: &#123;&#125; bytes."</span><span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">总大小: <span class="token number">5247240</span> bytes.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-递归查找所有-png-文件">2.7 递归查找所有 <code>png</code> 文件</h3><p>  需要安装<code>glob&quot;</code>库，可通过<code>cargo add glob</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">glob</span> <span class="token punctuation">=</span> <span class="token string">"0.3.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  递归地查找当前目录中的所有 <code>PNG</code> 文件。在本实例中，<code>**</code> 模式用于匹配当前目录及其所有子目录。在路径任意部分使用 <code>**</code> 模式，例如，<code>/media/**/*.png</code> 匹配 <code>media</code> 及其子目录中的所有 <code>PNG</code> 文件。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">glob<span class="token punctuation">::</span></span>glob<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Glob</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">GlobError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">PatternError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"**/*.png"</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> entry<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">src/test.pngtest.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-8-忽略文件名大小写，使用给定模式查找所有文件">2.8 忽略文件名大小写，使用给定模式查找所有文件</h3><p>  在当前目录中查找与正则表达模式 <code>img_[0-9]*.png</code> 匹配的所有图像文件。一个自定义 <code>MatchOptions</code> 结构体被传递给 <code>glob_with</code> 函数，使全局命令模式下不区分大小写，同时保持其他选项的默认值 <code>Default</code>，注：原教程查看<code>/media/</code>目录下的图片。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>glob_with<span class="token punctuation">,</span> <span class="token class-name">MatchOptions</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Glob</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">GlobError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">PatternError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token class-name">MatchOptions</span> <span class="token punctuation">&#123;</span>        case_sensitive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token function">glob_with</span><span class="token punctuation">(</span><span class="token string">"./**/img_[0-9]*.png"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> entry<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">img_0.pngsrc/img_9.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十一 错误处理</title>
      <link href="/news/1682254869915.html"/>
      <url>/news/1682254869915.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-处理错误变量">1. 处理错误变量</h2><p>  需要安装<code>error-chain</code>库，可通过<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-在-main-方法中对错误适当处理">1.1 在 <code>main</code> 方法中对错误适当处理</h3><p>  处理尝试打开不存在的文件时发生的错误，是通过使用 <code>error-chain</code> crate 来实现的。<code>error-chain</code> crate 包含大量的模板代码，用于 Rust 中的错误处理。<code>foreign_links</code> 代码块内的 <code>Io(std::io::Error)</code> 函数允许由 <code>std::io::Error</code> 所报错误信息到 <code>error_chain!</code> 所定义错误类型的自动转换，<code>error_chain!</code> 所定义错误类型将实现 <code>Error</code> trait。下文的实例将通过打开 Unix 文件 <code>/proc/uptime</code> 并解析内容以获得其中第一个数字，从而告诉系统运行了多长时间。除非出现错误，否则返回正常运行时间。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ParseInt</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">read_uptime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> uptime <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/uptime"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> uptime<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>uptime        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"无法解析正常运行时间数据"</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> <span class="token function">read_uptime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>uptime<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"正常运行时间: &#123;&#125; 秒"</span><span class="token punctuation">,</span> uptime<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"错误: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">正常运行时间: <span class="token number">3204645</span> 秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-避免在错误转变过程中遗漏错误">1.2 避免在错误转变过程中遗漏错误</h3><p>  需要安装<code>reqwest</code>库，可通过<code>cargo add reqwest --features blocking</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.11.16"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"blocking"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <code>error-chain</code> crate 使得匹配函数返回的不同错误类型成为可能，并且相对简洁。<code>ErrorKind</code> 是枚举类型，可以确定错误类型。下文实例使用 <code>reqwest::blocking</code> 来查询一个随机整数生成器的 web 服务，并将服务器响应的字符串转换为整数。Rust 标准库 <code>reqwest</code> 和 web 服务都可能会产生错误，所以使用 <code>foreign_links</code> 定义易于辨认理解的 Rust 错误。另外，用于 web 服务错误信息的 <code>ErrorKind</code> 变量，使用 <code>error_chain!</code> 宏的 <code>errors</code> 代码块定义。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ParseIntError</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    errors <span class="token punctuation">&#123;</span> <span class="token class-name">RandomResponseError</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">parse_response</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token class-name">Response</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    body<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    body<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">chain_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">RandomResponseError</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"https://www.random.org/integers/?num=1&amp;min=0&amp;max=10&amp;col=1&amp;base=10&amp;format=plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> random_value<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token function">parse_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0 到 10 之间的随机数: &#123;&#125;"</span><span class="token punctuation">,</span> random_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">match</span> <span class="token operator">*</span>error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标准 IO 错误: &#123;:?&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">Reqwest</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"reqwest 请求错误: &#123;:?&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">ParseIntError</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"标准解析 int 错误: &#123;:?&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">RandomResponseError</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"用户定义错误: &#123;:?&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>            _ <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"其他错误: &#123;:?&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> 到 <span class="token number">10</span> 之间的随机数: <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-获取复杂错误场景的回溯">1.3 获取复杂错误场景的回溯</h3><p>  需要安装<code>csv</code>和<code>serde</code>库，可通过<code>cargo add csv</code>和<code>cargo add serde --features derive</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">csv</span> <span class="token punctuation">=</span> <span class="token string">"1.2.1"</span><span class="token key property">serde</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.0.160"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"derive"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  本实例展示了如何处理一个复杂的错误场景，并且打印出错误回溯。依赖于 <code>chain_err</code>，通过附加新的错误来扩展错误信息。从而可以展开错误堆栈，这样提供了更好的上下文来理解错误的产生原因。下述代码尝试将值 <code>256</code> 反序列化为 <code>u8</code>。首先 <code>Serde</code> 产生错误，然后是 <code>csv</code>，最后是用户代码。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Reader</span><span class="token punctuation">(</span><span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Debug, Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Rgb</span> <span class="token punctuation">&#123;</span>    red<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    blue<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    green<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Rgb</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from_reader</span><span class="token punctuation">(</span>csv_data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Rgb</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token class-name">Rgb</span> <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>csv_data<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"无法反序列化第一个 CSV 记录"</span><span class="token punctuation">)</span><span class="token operator">?</span>            <span class="token punctuation">.</span><span class="token function">chain_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法反序列化 RGB 颜色"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">UpperHex</span> <span class="token keyword">for</span> <span class="token class-name">Rgb</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> hexa <span class="token operator">=</span> <span class="token keyword">u32</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> <span class="token keyword">u32</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token keyword">u32</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"&#123;:X&#125;"</span><span class="token punctuation">,</span> hexa<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> csv <span class="token operator">=</span> <span class="token string">"red,blue,green102,256,204"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rgb <span class="token operator">=</span> <span class="token class-name">Rgb</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>csv<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"无法读取 CSV 数据"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; 十六进制 #&#123;:X&#125;"</span><span class="token punctuation">,</span> rgb<span class="token punctuation">,</span> rgb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token keyword">ref</span> errors<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"错误级别 - 描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errors            <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"└> &#123;&#125; - &#123;&#125;"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>backtrace<span class="token punctuation">)</span> <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> backtrace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//在实际用例中，应该处理错误。 例如：</span>        <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">错误级别 - 描述└<span class="token operator">></span> <span class="token number">0</span> - 无法读取 CSV 数据└<span class="token operator">></span> <span class="token number">1</span> - 无法反序列化 RGB 颜色└<span class="token operator">></span> <span class="token number">2</span> - CSV deserialize error: record <span class="token number">1</span> <span class="token punctuation">(</span>line: <span class="token number">2</span>, byte: <span class="token number">15</span><span class="token punctuation">)</span>: field <span class="token number">1</span>: number too large to fit <span class="token keyword">in</span> target <span class="token builtin class-name">type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】十 编码</title>
      <link href="/news/1682091000481.html"/>
      <url>/news/1682091000481.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符集">1. 字符集</h2><h3 id="1-1-百分比编码（URL-编码）字符串">1.1 百分比编码（<code>URL</code> 编码）字符串</h3><p>  需要安装<code>percent-encoding</code>库，可通过<code>cargo add percent-encoding</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">percent-encoding</span> <span class="token punctuation">=</span> <span class="token string">"2.2.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>percent-encoding</code> crate 中的 <code>utf8_percent_encode</code> 函数对输入字符串进行百分比编码（<code>URL</code> 编码）。解码使用 <code>percent_decode</code> 函数。编码集定义哪些字节（除了非 <code>ASCII</code> 字节和控制键之外）需要进行百分比编码（<code>URL</code> 编码），这个集合的选择取决于上下文。例如，<code>url</code>对 <code>URL</code> 路径中的 <code>?</code> 编码，而不对查询字符串中的 <code>?</code> 编码。编码的返回值是 <code>&amp;str</code> 切片的迭代器，然后聚集为一个字符串 <code>String</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">percent_encoding<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>percent_decode<span class="token punctuation">,</span> utf8_percent_encode<span class="token punctuation">,</span> <span class="token class-name">AsciiSet</span><span class="token punctuation">,</span> <span class="token constant">CONTROLS</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">Utf8Error</span><span class="token punctuation">;</span><span class="token comment">/// https://url.spec.whatwg.org/#fragment-percent-encode-set</span><span class="token keyword">const</span> <span class="token constant">FRAGMENT</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AsciiSet</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token constant">CONTROLS</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b' '</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b'"'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b'&lt;'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b'>'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b'`'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">b','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Utf8Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string">"confident, productive systems programming"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> iter <span class="token operator">=</span> <span class="token function">utf8_percent_encode</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token constant">FRAGMENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> encoded<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token string">"confident%2C%20productive%20systems%20programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> iter <span class="token operator">=</span> <span class="token function">percent_decode</span><span class="token punctuation">(</span>encoded<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> decoded <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">decode_utf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>decoded<span class="token punctuation">,</span> <span class="token string">"confident, productive systems programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-2-将字符串编码为-application-x-www-form-urlencoded">1.2 将字符串编码为 <code>application/x-www-form-urlencoded</code></h3><p>  需要安装<code>url</code>库，可通过<code>cargo add url</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">"2.3.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  如下实例使用 <code>form_urlencoded::byte_serialize</code> 将字符串编码为 <code>application/x-www-form-urlencoded</code> 表单语法，随后使用 <code>form_urlencoded::parse</code> 对其进行解码。这两个函数都返回迭代器，然后这些迭代器聚集为 <code>String</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">url<span class="token punctuation">::</span>form_urlencoded<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>byte_serialize<span class="token punctuation">,</span> parse<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> urlencoded<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token function">byte_serialize</span><span class="token punctuation">(</span><span class="token string">"What is ❤?"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>urlencoded<span class="token punctuation">,</span> <span class="token string">"What+is+%E2%9D%A4%3F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"urlencoded:'&#123;&#125;'"</span><span class="token punctuation">,</span> urlencoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> decoded<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>urlencoded<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>decoded<span class="token punctuation">,</span> <span class="token string">"What is ❤?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"decoded:'&#123;&#125;'"</span><span class="token punctuation">,</span> decoded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">urlencoded:<span class="token string">'What+is+%E2%9D%A4%3F'</span>decoded:<span class="token string">'What is ❤?'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-编码和解码十六进制">1.3 编码和解码十六进制</h3><p>  需要安装<code>data_encoding</code>库，可通过<code>cargo add data_encoding</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">data-encoding</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>data_encoding</code> crate 提供了 <code>HEXUPPER::encode</code> 方法，该方法接受 <code>&amp;[u8]</code> 参数并返回十六进制数据的字符串 <code>String</code>。类似地，<code>data_encoding</code>crate 提供了 <code>HEXUPPER::decode</code> 方法，该方法接受 <code>&amp;[u8]</code> 参数。如果输入数据被成功解码，则返回 <code>Vec&lt;u8&gt;</code>。下面的实例将 <code>&amp;[u8]</code> 数据转换为等效的十六进制数据，然后将此值与预期值进行比较。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token constant">HEXUPPER</span><span class="token punctuation">,</span> <span class="token class-name">DecodeError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DecodeError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> original <span class="token operator">=</span> <span class="token string">b"The quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token string">"54686520717569636B2062726F776E20666F78206A756D7073206F76\        657220746865206C617A7920646F672E"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>encoded<span class="token punctuation">.</span><span class="token function">into_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>decoded<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>original<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-4-编码和解码-base64">1.4 编码和解码 <code>base64</code></h3><p>  需要安装<code>base64</code>、<code>error-chain</code>库，可通过<code>cargo add base64</code>、<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">base64</span> <span class="token punctuation">=</span> <span class="token string">"0.21.0"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  使用 <code>encode</code> 将字节切片编码为 <code>base64</code> 字符串，对 <code>base64</code> 字符串解码使用 <code>decode</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">base64<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">engine<span class="token punctuation">::</span></span>general_purpose<span class="token punctuation">,</span> <span class="token class-name">Engine</span> <span class="token keyword">as</span> _<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Base64</span><span class="token punctuation">(</span><span class="token namespace">base64<span class="token punctuation">::</span></span><span class="token class-name">DecodeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Utf8Error</span><span class="token punctuation">(</span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">Utf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token string">b"hello rustaceans"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token namespace">general_purpose<span class="token punctuation">::</span></span><span class="token constant">STANDARD_NO_PAD</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token namespace">general_purpose<span class="token punctuation">::</span></span><span class="token constant">STANDARD_NO_PAD</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>encoded<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"原始: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"base64 编码后: &#123;&#125;"</span><span class="token punctuation">,</span> encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"解码到原始: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>decoded<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">原始: hello rustaceansbase64 编码后: aGVsbG8gcnVzdGFjZWFucw解码到原始: hello rustaceans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-CSV-处理">2. <code>CSV</code> 处理</h2><p>  需要安装<code>csv</code>、<code>serde</code>库，可通过<code>cargo add csv</code>、<code>cargo add serde --features derive</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">csv</span> <span class="token punctuation">=</span> <span class="token string">"1.2.1"</span><span class="token key property">serde</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.0.160"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"derive"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-读取-CSV-记录">2.1 读取 <code>CSV</code> 记录</h3><p>  将标准的 <code>CSV</code> 记录读入 <code>csv::StringRecord</code>——一种弱类型的数据表示方式，它需要 <code>CSV</code> 中的行数据是有效的 <code>UTF-8</code> 字符编码。另外，<code>csv::ByteRecord</code> 对 UTF-8 不做任何预设。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> csv <span class="token operator">=</span> <span class="token string">"year,make,model,description1948,Porsche,356,Luxury sports car1967,Ford,Mustang fastback 1967,American car"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>csv<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> record <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record <span class="token operator">=</span> record<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span>            <span class="token string">"在 &#123;&#125;, &#123;&#125; 建立了&#123;&#125;模型, 是 &#123;&#125;."</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>record<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在 <span class="token number">1948</span>, Porsche 建立了356模型, 是 Luxury sports car.在 <span class="token number">1967</span>, Ford 建立了Mustang fastback <span class="token number">1967</span>模型, 是 American car.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>Serde</code> 将数据反序列化为强类型结构体。具体查阅 <code>csv::Reader::deserialize</code> 方法</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Record</span> <span class="token punctuation">&#123;</span>    year<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>    make<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    model<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> csv <span class="token operator">=</span> <span class="token string">"year,make,model,description1948,Porsche,356,Luxury sports car1967,Ford,Mustang fastback 1967,American car"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>csv<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> record <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Record</span> <span class="token operator">=</span> record<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span>            <span class="token string">"在 &#123;&#125;, &#123;&#125; 建立了&#123;&#125;模型, 是 &#123;&#125;."</span><span class="token punctuation">,</span>            record<span class="token punctuation">.</span>year<span class="token punctuation">,</span> record<span class="token punctuation">.</span>make<span class="token punctuation">,</span> record<span class="token punctuation">.</span>model<span class="token punctuation">,</span> record<span class="token punctuation">.</span>description        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在 <span class="token number">1948</span>, Porsche 建立了356模型, 是 Luxury sports car.在 <span class="token number">1967</span>, Ford 建立了Mustang fastback <span class="token number">1967</span>模型, 是 American car.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-读取有不同分隔符的-CSV-记录">2.2 读取有不同分隔符的 <code>CSV</code> 记录</h3><p>  使用制表（tab）分隔符 <code>delimiter</code> 读取 <code>CSV</code> 记录。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug, Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Record</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[serde(deserialize_with = <span class="token string">"csv::invalid_option"</span>)]</span>    id<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">ReaderBuilder</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"name\tplace\tidMark\tMelbourne\t46Ashley\tZurich\t92"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">ReaderBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">delimiter</span><span class="token punctuation">(</span><span class="token char">b'\t'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">from_reader</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Record</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> result<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Record <span class="token punctuation">&#123;</span> name: <span class="token string">"Mark"</span>, place: <span class="token string">"Melbourne"</span>, id: Some<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>Record <span class="token punctuation">&#123;</span> name: <span class="token string">"Ashley"</span>, place: <span class="token string">"Zurich"</span>, id: Some<span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-筛选匹配断言的-CSV-记录">2.3 筛选匹配断言的 CSV 记录</h3><p>  仅仅 返回 <code>data</code> 中字段（<code>field</code>）与 <code>query</code> 匹配的的行。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CsvError</span><span class="token punctuation">(</span><span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token string">"CA"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"\City,State,Population,Latitude,LongitudeKenai,AK,7610,60.5544444,-151.2583333Oakman,AL,,33.7133333,-87.3886111Sandfort,AL,,32.3380556,-85.2233333West Hollywood,CA,37031,34.0900000,-118.3608333"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rdr <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">ReaderBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from_reader</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> wtr <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Writer</span><span class="token punctuation">::</span><span class="token function">from_writer</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">write_record</span><span class="token punctuation">(</span>rdr<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> rdr<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> record<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>field<span class="token closure-punctuation punctuation">|</span></span> field <span class="token operator">==</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wtr<span class="token punctuation">.</span><span class="token function">write_record</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>record<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    wtr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">City,State,Population,Latitude,LongitudeWest Hollywood,CA,37031,34.0900000,-118.3608333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-用-Serde-处理无效的-CSV-数据">2.4 用 <code>Serde</code> 处理无效的 <code>CSV</code> 数据</h3><p>  <code>CSV</code> 文件通常包含无效数据。对于这些情形，<code>csv</code> crate 提供了一个自定义的反序列化程序 <code>csv::invalid_option</code>，它自动将无效数据转换为 <code>None</code> 值。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug, Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Record</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[serde(deserialize_with = <span class="token string">"csv::invalid_option"</span>)]</span>    id<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"name,place,idmark,sydney,46.5 ashley,zurich,92akshat,delhi,37alisha,colombo,xyz"</span><span class="token punctuation">;</span> <span class="token comment">//46.5,xyz->None</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rdr <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> rdr<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record<span class="token punctuation">:</span> <span class="token class-name">Record</span> <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Record <span class="token punctuation">&#123;</span> name: <span class="token string">"mark"</span>, place: <span class="token string">"sydney"</span>, id: None <span class="token punctuation">&#125;</span>Record <span class="token punctuation">&#123;</span> name: <span class="token string">"ashley"</span>, place: <span class="token string">"zurich"</span>, id: Some<span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>Record <span class="token punctuation">&#123;</span> name: <span class="token string">"akshat"</span>, place: <span class="token string">"delhi"</span>, id: Some<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>Record <span class="token punctuation">&#123;</span> name: <span class="token string">"alisha"</span>, place: <span class="token string">"colombo"</span>, id: None <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-将记录序列化为-CSV">2.5 将记录序列化为 <code>CSV</code></h3><p>  本实例展示了如何序列化 Rust 元组。<code>csv::writer</code> 支持从 Rust 类型到 <code>CSV</code> 记录的自动序列化。<code>write_record</code> 只写入包含字符串数据的简单记录。具有更复杂值（如数字、浮点和选项）的数据使用 <code>serialize</code> 进行序列化。因为 <code>csv::writer</code> 使用内部缓冲区，所以在完成时总是显式刷新 <code>flush</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">CSVError</span><span class="token punctuation">(</span><span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IOError</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> wtr <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Writer</span><span class="token punctuation">::</span><span class="token function">from_writer</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">write_record</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Place"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Sydney"</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Ashley"</span><span class="token punctuation">,</span> <span class="token string">"Dublin"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token string">"Delhi"</span><span class="token punctuation">,</span> <span class="token string">"A11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    wtr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Name,Place,IDMark,Sydney,87Ashley,Dublin,32<span class="token number">456</span>,Delhi,A11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-转换-CSV-文件的列">2.6 转换 <code>CSV</code> 文件的列</h3><p>  将包含颜色名称和十六进制颜色值的 <code>CSV</code> 文件转换为具有颜色名称和 <code>rgb</code> 颜色值的 <code>CSV</code> 文件。使用 <code>csv</code> crate 读写 <code>csv</code> 文件，使用 <code>serde</code> crate 对行输入字节进行反序列化，对行输出字节进行序列化。详细请参阅 <code>csv::Reader::deserialize</code>、<code>serde::Deserialize</code>，以及 <code>std::str::FromStr</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Reader</span><span class="token punctuation">,</span> <span class="token class-name">Writer</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>de<span class="token punctuation">,</span> <span class="token class-name">Deserialize</span><span class="token punctuation">,</span> <span class="token class-name">Deserializer</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>   foreign_links <span class="token punctuation">&#123;</span>       <span class="token class-name">CsvError</span><span class="token punctuation">(</span><span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ParseInt</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">ParseIntError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">CsvInnerError</span><span class="token punctuation">(</span><span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">IntoInnerError</span><span class="token operator">&lt;</span><span class="token class-name">Writer</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token constant">IO</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token constant">UTF8</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">FromUtf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">HexColor</span> <span class="token punctuation">&#123;</span>    red<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    green<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    blue<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Debug, Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Row</span> <span class="token punctuation">&#123;</span>    color_name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token class-name">HexColor</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">FromStr</span> <span class="token keyword">for</span> <span class="token class-name">HexColor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Err</span> <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from_str</span><span class="token punctuation">(</span>hex_color<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>result<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Err</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> trimmed <span class="token operator">=</span> hex_color<span class="token punctuation">.</span><span class="token function">trim_matches</span><span class="token punctuation">(</span><span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> trimmed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"Invalid length of hex string"</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">HexColor</span> <span class="token punctuation">&#123;</span>                red<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trimmed<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>                green<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trimmed<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>                blue<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">::</span><span class="token function">from_str_radix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trimmed<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">..</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'de</span><span class="token operator">></span> <span class="token class-name">Deserialize</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'de</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">HexColor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">deserialize</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token operator">></span><span class="token punctuation">(</span>deserializer<span class="token punctuation">:</span> <span class="token class-name">D</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>result<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">></span>    <span class="token keyword">where</span>        <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">Deserializer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'de</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">deserialize</span><span class="token punctuation">(</span>deserializer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token class-name">FromStr</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token namespace">de<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span>custom<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"color_name,color红色,#ff0000绿色,#00ff00蓝色,#0000FF长春花色,#ccccff品红色,#ff00ff"</span>        <span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> out <span class="token operator">=</span> <span class="token class-name">Writer</span><span class="token punctuation">::</span><span class="token function">from_writer</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_reader</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Row</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>            res<span class="token punctuation">.</span>color_name<span class="token punctuation">,</span>            res<span class="token punctuation">.</span>color<span class="token punctuation">.</span>red<span class="token punctuation">,</span>            res<span class="token punctuation">.</span>color<span class="token punctuation">.</span>green<span class="token punctuation">,</span>            res<span class="token punctuation">.</span>color<span class="token punctuation">.</span>blue<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> written <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"品红色,255,0,255"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> written<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> written<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">红色,255,0,0绿色,0,255,0蓝色,0,0,255长春花色,204,204,255品红色,255,0,255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-结构化数据">3. 结构化数据</h2><h3 id="3-1-对非结构化-JSON-序列化和反序列化">3.1 对非结构化 <code>JSON</code> 序列化和反序列化</h3><p>  需要安装<code>serde_json</code>库，可通过<code>cargo add serde_json</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">serde_json</span> <span class="token punctuation">=</span> <span class="token string">"1.0.96"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>serde_json</code> crate 提供了 <code>from_str</code> 函数来解析 <code>JSON</code> 切片 <code>&amp;str</code>。非结构化 <code>JSON</code> 可以被解析为一个通用的 <code>serde_json::Value</code> 类型，该类型能够表示任何有效的 <code>JSON</code> 数据。下面的实例展示如何解析 <code>JSON</code> 切片 <code>&amp;str</code>，期望值被 <code>json!</code> 宏声明。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span>json<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token string">r#"&#123;                 "userid": 103609,                 "verified": true,                 "access_privileges": [                   "用户",                   "管理员"                 ]               &#125;"#</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> parsed<span class="token punctuation">:</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> expected <span class="token operator">=</span> <span class="token macro property">json!</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"userid"</span><span class="token punctuation">:</span> <span class="token number">103609</span><span class="token punctuation">,</span>        <span class="token string">"verified"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"access_privileges"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"用户"</span><span class="token punctuation">,</span>            <span class="token string">"管理员"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>parsed<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="3-2-反序列化-TOML-配置文件">3.2 反序列化 <code>TOML</code> 配置文件</h3><p>  需要安装<code>toml</code>库，可通过<code>cargo add toml</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">toml</span> <span class="token punctuation">=</span> <span class="token string">"0.7.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  将一些 <code>TOML</code> 配置项解析为一个通用的值 <code>toml::Value</code>，该值能够表示任何有效的 <code>TOML</code> 数据。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">toml<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token namespace">de<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toml_content <span class="token operator">=</span> <span class="token string">r#"          [package]          name = "your_package"          version = "0.1.0"          authors = ["You! &lt;you@example.org>"]          [dependencies]          serde = "1.0"          "#</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> package_info<span class="token punctuation">:</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token namespace">toml<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span>toml_content<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">[</span><span class="token string">"dependencies"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"serde"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">[</span><span class="token string">"package"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"your_package"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><p>  使用 <code>Serde</code> crate 将 <code>TOML</code> 解析为自定义的结构体。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">toml<span class="token punctuation">::</span>de<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Config</span> <span class="token punctuation">&#123;</span>    package<span class="token punctuation">:</span> <span class="token class-name">Package</span><span class="token punctuation">,</span>    dependencies<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Package</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    version<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    authors<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toml_content <span class="token operator">=</span> <span class="token string">r#"          [package]          name = "your_package"          version = "0.1.0"          authors = ["You! &lt;you@example.org>"]          [dependencies]          serde = "1.0"          "#</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> package_info<span class="token punctuation">:</span> <span class="token class-name">Config</span> <span class="token operator">=</span> <span class="token namespace">toml<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span>toml_content<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">.</span>package<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"your_package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">.</span>package<span class="token punctuation">.</span>version<span class="token punctuation">,</span> <span class="token string">"0.1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">.</span>package<span class="token punctuation">.</span>authors<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"You! &lt;you@example.org>"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>package_info<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span><span class="token string">"serde"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="3-3-以小端模式（低位模式）字节顺序读写整数">3.3 以小端模式（低位模式）字节顺序读写整数</h3><p>  需要安装<code>byteorder</code>库，可通过<code>cargo add byteorder</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">byteorder</span> <span class="token punctuation">=</span> <span class="token string">"1.4.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  字节序 <code>byteorder</code> 可以反转结构化数据的有效字节。当通过网络接收信息时，这可能是必要的，例如接收到的字节来自另一个系统。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">byteorder<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">LittleEndian</span><span class="token punctuation">,</span> <span class="token class-name">ReadBytesExt</span><span class="token punctuation">,</span> <span class="token class-name">WriteBytesExt</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Default, PartialEq, Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Payload</span> <span class="token punctuation">&#123;</span>    kind<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> original_payload <span class="token operator">=</span> <span class="token class-name">Payload</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> encoded_bytes <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>original_payload<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> decoded_payload <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>encoded_bytes<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>original_payload<span class="token punctuation">,</span> decoded_payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span>payload<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Payload</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> bytes <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bytes<span class="token punctuation">.</span><span class="token function">write_u8</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    bytes<span class="token punctuation">.</span><span class="token function">write_u16</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">LittleEndian</span><span class="token operator">></span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">decode</span><span class="token punctuation">(</span><span class="token keyword">mut</span> bytes<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token class-name">Payload</span> <span class="token punctuation">&#123;</span>        kind<span class="token punctuation">:</span> bytes<span class="token punctuation">.</span><span class="token function">read_u8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> bytes<span class="token punctuation">.</span><span class="token function">read_u16</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">LittleEndian</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】九 开发工具</title>
      <link href="/news/1681997809879.html"/>
      <url>/news/1681997809879.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-调试工具">1. 调试工具</h2><h3 id="1-1-日志信息">1.1 日志信息</h3><p>  需要安装<code>log</code>、<code>env_logger</code>2个库，可通过<code>cargo add chrono</code>、<code>cargo add env_logger</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">env_logger</span> <span class="token punctuation">=</span> <span class="token string">"0.10.0"</span> <span class="token comment"># 半年未更新</span><span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">"0.4.17"</span> <span class="token comment"># 一年未更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-1-1-记录调试信息到控制台">1.1.1 记录调试信息到控制台</h4><p>  <code>log</code> crate 提供了日志工具，<code>env_logger</code> crate 通过环境变量配置日志记录。<code>log::debug!</code> 宏的工作方式类似于其它 <code>std::fmt</code> 格式化的字符串。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">execute_query</span><span class="token punctuation">(</span>query<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"执行操作: &#123;&#125;"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute_query</span><span class="token punctuation">(</span><span class="token string">"删除学生表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>RUST_LOG=debug cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2023</span>-04-17T13:03:21Z DEBUG development<span class="token punctuation">]</span> 执行操作: 删除学生表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-2-记录错误信息到控制台">1.1.2 记录错误信息到控制台</h4><p>  正确的错误处理会将异常视为错误。下述实例中，通过 <code>log</code> 便捷宏 <code>log::error!</code>，将错误记录到 <code>stderr</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">execute_query</span><span class="token punctuation">(</span>_query<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"恐怕做不到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token function">execute_query</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE students"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> response <span class="token punctuation">&#123;</span>        <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">error!</span><span class="token punctuation">(</span><span class="token string">"执行操作失败: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2023</span>-04-17T13:07:33Z ERROR development<span class="token punctuation">]</span> 执行操作失败: 恐怕做不到<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-3-记录信息时，用标准输出-stdout-替换标准错误-stderr">1.1.3 记录信息时，用标准输出 <code>stdout</code> 替换标准错误 <code>stderr</code></h4><p>  使用 <code>Builder::target</code> 创建自定义的日志记录器配置，将日志输出的目标设置为 <code>Target::Stdout</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Builder</span><span class="token punctuation">,</span> <span class="token class-name">Target</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token class-name">Stdout</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">error!</span><span class="token punctuation">(</span><span class="token string">"此错误已打印到标准输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2023</span>-04-17T13:10:37Z ERROR development<span class="token punctuation">]</span> 此错误已打印到标准输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-4-记录信息时，用标准输出-stdout-替换标准错误-stderr">1.1.4 记录信息时，用标准输出 <code>stdout</code> 替换标准错误 <code>stderr</code></h4><p>  实现一个打印到 <code>stdout</code> 的自定义记录器 <code>ConsoleLogger</code>。为了使用日志宏，<code>ConsoleLogger</code>实现了 <code>log::Log trait</code>，通过 <code>log::set_logger</code> 安置。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Level</span><span class="token punctuation">,</span> <span class="token class-name">LevelFilter</span><span class="token punctuation">,</span> <span class="token class-name">Metadata</span><span class="token punctuation">,</span> <span class="token class-name">Record</span><span class="token punctuation">,</span> <span class="token class-name">SetLoggerError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token constant">CONSOLE_LOGGER</span><span class="token punctuation">:</span> <span class="token class-name">ConsoleLogger</span> <span class="token operator">=</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">ConsoleLogger</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">Log</span> <span class="token keyword">for</span> <span class="token class-name">ConsoleLogger</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">enabled</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> metadata<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Metadata</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        metadata<span class="token punctuation">.</span><span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">Level</span><span class="token punctuation">::</span><span class="token class-name">Info</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> record<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Record</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Rust says: &#123;&#125; - &#123;&#125;"</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SetLoggerError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token function">set_logger</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">CONSOLE_LOGGER</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token function">set_max_level</span><span class="token punctuation">(</span><span class="token class-name">LevelFilter</span><span class="token punctuation">::</span><span class="token class-name">Info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"信息日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"警告日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">error!</span><span class="token punctuation">(</span><span class="token string">"错误日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rust says: INFO - 信息日志Rust says: WARN - 警告日志Rust says: ERROR - 错误日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-1-5-记录到-Unix-系统日志">1.1.5 记录到 Unix 系统日志</h4><p>  需要额外安装<code>syslog</code>库，可通过<code>cargo add syslog</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">env_logger</span> <span class="token punctuation">=</span> <span class="token string">"0.10.0"</span> <span class="token comment"># 半年未更新</span><span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">"0.4.17"</span> <span class="token comment"># 一年未更新</span><span class="token key property">syslog</span> <span class="token punctuation">=</span> <span class="token string">"6.0.1"</span> <span class="token comment"># 一年未更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  实现将信息记录到 <code>UNIX</code> <code>syslog</code>。使用 <code>syslog::init</code> 初始化记录器后端。<code>syslog::Facility</code> 记录提交日志项分类的程序，<code>log::LevelFilter</code> 表示欲记录日志的等级，<code>Option&lt;&amp;str&gt;</code> 定义应用程序名称（可选）。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(target_os = <span class="token string">"linux"</span>)]</span><span class="token attribute attr-name">#[cfg(target_os = <span class="token string">"linux"</span>)]</span><span class="token keyword">use</span> <span class="token namespace">syslog<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Facility</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[cfg(target_os = <span class="token string">"linux"</span>)]</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token namespace">syslog<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span>        <span class="token class-name">Facility</span><span class="token punctuation">::</span><span class="token constant">LOG_USER</span><span class="token punctuation">,</span>        <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">LevelFilter</span><span class="token punctuation">::</span><span class="token class-name">Debug</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"测试系统日志"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"这是debug信息 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">error!</span><span class="token punctuation">(</span><span class="token string">"这是一个Error信息!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[cfg(not(target_os = <span class="token string">"linux"</span>))]</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"So far, only Linux systems are supported."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出到系统日志，可通过<code>tail -f /var/log/syslog</code>系统命令查看输出的日志内容，如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Apr <span class="token number">17</span> <span class="token number">14</span>:50:34 dynasty dynasty 测试系统日志<span class="token punctuation">[</span><span class="token number">838264</span><span class="token punctuation">]</span>: 这是debug信息 messageApr <span class="token number">17</span> <span class="token number">14</span>:50:34 dynasty dynasty 测试系统日志<span class="token punctuation">[</span><span class="token number">838264</span><span class="token punctuation">]</span>: 这是一个Error信息<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-日志配置">1.2 日志配置</h3><h4 id="1-2-1-启用每个模块的日志级别">1.2.1 启用每个模块的日志级别</h4><p>  创建两个模块：<code>foo</code> 和其嵌套的 <code>foo::bar</code>，日志记录指令分别由 <code>RUST_LOG</code> 环境变量控制。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">foo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mod</span> <span class="token module-declaration namespace">bar</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"[bar] warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"[bar] info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"[bar] debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"[foo] warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"[foo] info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"[foo] debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">bar<span class="token punctuation">::</span></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"[root] warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"[root] info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"[root] debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">foo<span class="token punctuation">::</span></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>RUST_LOG=&quot;warn,development::foo=info,development::foo::bar=debug&quot; cargo run</code>(注意这块的<code>development</code>为项目名称)命令，输出如下:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z WARN  development<span class="token punctuation">]</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span> warn<span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z WARN  development::foo<span class="token punctuation">]</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> warn<span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z INFO  development::foo<span class="token punctuation">]</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> info<span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z WARN  development::foo::bar<span class="token punctuation">]</span> <span class="token punctuation">[</span>bar<span class="token punctuation">]</span> warn<span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z INFO  development::foo::bar<span class="token punctuation">]</span> <span class="token punctuation">[</span>bar<span class="token punctuation">]</span> info<span class="token punctuation">[</span><span class="token number">2023</span>-04-17T15:00:37Z DEBUG development::foo::bar<span class="token punctuation">]</span> <span class="token punctuation">[</span>bar<span class="token punctuation">]</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-用自定义环境变量设置日志记录">1.2.2 用自定义环境变量设置日志记录</h4><p>  <code>Builder</code> 配置日志记录。<code>Builder::parse</code> 以 <code>RUST_LOG</code> 语法的形式解析 <code>MY_APP_LOG</code> 环境变量的内容。然后，<code>Builder::init</code> 初始化记录器。所有这些步骤通常由 <code>env_logger::init</code> 在内部完成。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parse_filters</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">"MY_APP_LOG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//parse_filters代替parse方法</span>        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"信息消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"警告消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">error!</span><span class="token punctuation">(</span><span class="token string">"这是个错误 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>MY_APP_LOG=info cargo run</code>命令，输出如下:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2023</span>-04-18T13:41:21Z INFO  development<span class="token punctuation">]</span> 信息消息<span class="token punctuation">[</span><span class="token number">2023</span>-04-18T13:41:21Z WARN  development<span class="token punctuation">]</span> 警告消息<span class="token punctuation">[</span><span class="token number">2023</span>-04-18T13:41:21Z ERROR development<span class="token punctuation">]</span> 这是个错误 message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-在日志信息中包含时间戳">1.2.3 在日志信息中包含时间戳</h4><p>  需要额外安装<code>chrono</code>库，可通过<code>cargo add chrono</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">env_logger</span> <span class="token punctuation">=</span> <span class="token string">"0.10.0"</span> <span class="token comment"># 半年未更新</span><span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">"0.4.17"</span> <span class="token comment"># 一年未更新</span><span class="token key property">chrono</span> <span class="token punctuation">=</span> <span class="token string">"0.4.24"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  使用 <code>Builder</code> 创建自定义记录器配置。每个日志项调用 <code>Local::now</code> 以获取本地时区中的当前 <code>DateTime</code>，并使用 <code>DateTime::format</code> 和 <code>strftime::specifiers</code> 来格式化最终日志中使用的时间戳。如下实例调用 <code>Builder::format</code> 设置一个闭包，该闭包用时间戳、<code>Record::level</code> 和正文（<code>Record::args</code>）对每个信息文本进行格式化。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token class-name">Local</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">LevelFilter</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>buf<span class="token punctuation">,</span> record<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">writeln!</span><span class="token punctuation">(</span>                buf<span class="token punctuation">,</span>                <span class="token string">"&#123;&#125; [&#123;&#125;] - &#123;&#125;"</span><span class="token punctuation">,</span>                <span class="token class-name">Local</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                record<span class="token punctuation">.</span><span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                record<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token class-name">LevelFilter</span><span class="token punctuation">::</span><span class="token class-name">Info</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">warn!</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>命令，输出如下:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2023</span>-04-18 <span class="token number">13</span>:47:50 <span class="token punctuation">[</span>WARN<span class="token punctuation">]</span> - warn<span class="token number">2023</span>-04-18 <span class="token number">13</span>:47:50 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> - info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-2-4-将信息记录到自定义位置">1.2.4 将信息记录到自定义位置</h4><p>  需要额外安装<code>log4rs</code>和<code>error_chain</code>库，可通过<code>cargo add log4rs</code>、<code>cargo add error_chain</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">"0.4.17"</span> <span class="token comment"># 一年未更新</span><span class="token key property">log4rs</span> <span class="token punctuation">=</span> <span class="token string">"1.2.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  使用 <code>Builder</code> 创建自定义记录器配置。每个日志项调用 <code>Local::now</code> 以获取本地时区中的当前 <code>DateTime</code>，并使用 <code>DateTime::format</code> 和 <code>strftime::specifiers</code> 来格式化最终日志中使用的时间戳。如下实例调用 <code>Builder::format</code> 设置一个闭包，该闭包用时间戳、<code>Record::level</code> 和正文（<code>Record::args</code>）对每个信息文本进行格式化。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">LevelFilter</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">log4rs<span class="token punctuation">::</span>append<span class="token punctuation">::</span>file<span class="token punctuation">::</span></span><span class="token class-name">FileAppender</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">log4rs<span class="token punctuation">::</span>config<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Appender</span><span class="token punctuation">,</span> <span class="token class-name">Config</span><span class="token punctuation">,</span> <span class="token class-name">Root</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">log4rs<span class="token punctuation">::</span>encode<span class="token punctuation">::</span>pattern<span class="token punctuation">::</span></span><span class="token class-name">PatternEncoder</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogConfig</span><span class="token punctuation">(</span><span class="token namespace">log4rs<span class="token punctuation">::</span>config<span class="token punctuation">::</span></span><span class="token class-name">FormatError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SetLogger</span><span class="token punctuation">(</span><span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">SetLoggerError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> logfile <span class="token operator">=</span> <span class="token class-name">FileAppender</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">encoder</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">PatternEncoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"&#123;d&#125; -[&#123;l&#125;]: &#123;m&#125;&#123;n&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"log/output.log"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">Config</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">appender</span><span class="token punctuation">(</span><span class="token class-name">Appender</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"logfile"</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>logfile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appender</span><span class="token punctuation">(</span><span class="token string">"logfile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">LevelFilter</span><span class="token punctuation">::</span><span class="token class-name">Info</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">log4rs<span class="token punctuation">::</span></span><span class="token function">init_config</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token namespace">log<span class="token punctuation">::</span></span><span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">"输出日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>命令生成<code>log</code>日志，可通过<code>cat log/output.log</code>命令查看输出的日志:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2023</span>-04-18T14:03:39.703966199+00:00 -<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>: 输出日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-版本控制">2. 版本控制</h2><p>  需要安装<code>semver</code>库，可通过<code>cargo add semver</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">semver</span> <span class="token punctuation">=</span> <span class="token string">"1.0.17"</span> <span class="token comment"># api 变化大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-1-解析并递增版本字符串">2.1 解析并递增版本字符串</h3><p>  使用 <code>Version::parse</code> 从字符串字面量构造语义化版本 <code>semver::Version</code>，然后逐个递增补丁（修订）版本号、副（次要）版本号和主版本号。**注意：**根据语义化版本控制规范，增加副（次要）版本号时会将补丁（修订）版本号重置为 <code>0</code>，增加主版本号时会将副（次要）版本号和补丁（修订）版本号都重置为 <code>0</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BuildMetadata</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Prerelease</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> parsed_version <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"0.2.6"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        parsed_version<span class="token punctuation">,</span>        <span class="token class-name">Version</span> <span class="token punctuation">&#123;</span>            major<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            minor<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            patch<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            pre<span class="token punctuation">:</span> <span class="token class-name">Prerelease</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span>            build<span class="token punctuation">:</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// parsed_version.increment_patch(); // 开发者删除该实现，需要用户自己实现</span>    <span class="token function">increment_patch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>parsed_version<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0.2.7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"新的补丁发布: v&#123;&#125;"</span><span class="token punctuation">,</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// parsed_version.increment_minor(); // 开发者删除该实现，需要用户自己实现</span>    <span class="token function">increment_minor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>parsed_version<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0.3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"新的次要版本: v&#123;&#125;"</span><span class="token punctuation">,</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// parsed_version.increment_major(); // 开发者删除该实现，需要用户自己实现</span>    <span class="token function">increment_major</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>parsed_version<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"新的主要版本: v&#123;&#125;"</span><span class="token punctuation">,</span> parsed_version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">increment_patch</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Version</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span>patch <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token class-name">Prerelease</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">increment_minor</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Version</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span>minor <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>patch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token class-name">Prerelease</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">increment_major</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Version</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span>major <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>minor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>patch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token class-name">Prerelease</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>build <span class="token operator">=</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">新的补丁发布: v0.2.7新的次要版本: v0.3.0新的主要版本: v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-解析复杂的版本字符串">2.2 解析复杂的版本字符串</h3><p>  使用 <code>Version::parse</code> 从复杂的版本字符串构造语义化版本 <code>semver::Version</code>。该字符串包含语义化版本控制规范中定义的预发布和构建元数据。需要注意的是：根据语义化版本控制规范，构建元数据是虽然被解析，但在比较版本时不考虑。换句话说，即使两个版本的构建字符串不同，但它们的版本可能是相等的。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BuildMetadata</span><span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Prerelease</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> version_str <span class="token operator">=</span> <span class="token string">"1.0.49-125+g72ee7853"</span><span class="token punctuation">;</span>    <span class="token comment">// 不考虑build版本的比较</span>    <span class="token keyword">let</span> comparator_version <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>version_str<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Comparator</span><span class="token punctuation">::</span><span class="token function">matches</span><span class="token punctuation">(</span>        <span class="token operator">&amp;</span>comparator_version<span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token class-name">Version</span> <span class="token punctuation">&#123;</span>            major<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            minor<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            patch<span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span>            pre<span class="token punctuation">:</span> <span class="token class-name">Prerelease</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"125"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>            build<span class="token punctuation">:</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span> <span class="token comment">// 不考虑build版本的比较</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// // 将版本号字符串解析为完整的版本号对象，考虑build版本的比较</span>    <span class="token keyword">let</span> parsed_version <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>version_str<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>parsed_version<span class="token punctuation">.</span>build<span class="token punctuation">,</span> <span class="token class-name">BuildMetadata</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"g72ee7853"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> serialized_version <span class="token operator">=</span> parsed_version<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serialized_version<span class="token punctuation">,</span> version_str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-3-检查给定版本是否为预发布版本">2.3 检查给定版本是否为预发布版本</h3><p>  给定两个版本，使用 <code>is_prerelease</code> 断言一个是预发布，另一个不是。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> version_1 <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.0.0-alpha"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> version_2 <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 原函数is_prerelease已删除通过version_1.pre判断</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>version_1<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言version1为预发布版本</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>version_2<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言version2不是预发布版本</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-4-查询适配给定范围的最新版本">2.4 查询适配给定范围的最新版本</h3><p>  给定两个版本，使用 <code>is_prerelease</code> 断言一个是预发布，另一个不是。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> version_1 <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.0.0-alpha"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> version_2 <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 原函数is_prerelease已删除通过version_1.pre判断</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>version_1<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言version1为预发布版本</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>version_2<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言version2不是预发布版本</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-5-查询适配给定范围的最新版本">2.5 查询适配给定范围的最新版本</h3><p>  给定一个版本字符串 <code>&amp;str</code> 的列表，查找最新的语义化版本 <code>semver::Version</code>。<code>semver::VersionReq</code> 用 <code>VersionReq::matches</code> 过滤列表，也可以展示语义化版本 <code>semver</code> 的预发布参数设置。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Version</span><span class="token punctuation">,</span> <span class="token class-name">VersionReq</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">SemVer</span><span class="token punctuation">(</span><span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// SemVerReq(semver::Error);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">find_max_matching_version</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token punctuation">,</span> <span class="token class-name">I</span><span class="token operator">></span><span class="token punctuation">(</span>version_req_str<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> iterable<span class="token punctuation">:</span> <span class="token class-name">I</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Version</span><span class="token operator">>></span><span class="token keyword">where</span>    <span class="token class-name">I</span><span class="token punctuation">:</span> <span class="token class-name">IntoIterator</span><span class="token operator">&lt;</span><span class="token class-name">Item</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> vreq <span class="token operator">=</span> <span class="token class-name">VersionReq</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>version_req_str<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>iterable        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> vreq<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token function">find_max_matching_version</span><span class="token punctuation">(</span><span class="token string">"&lt;= 1.0.0"</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"0.9.0"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"1.0.1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token function">find_max_matching_version</span><span class="token punctuation">(</span>            <span class="token string">">1.2.3-alpha.3"</span><span class="token punctuation">,</span>            <span class="token macro property">vec!</span><span class="token punctuation">[</span>                <span class="token string">"1.2.3-alpha.3"</span><span class="token punctuation">,</span>                <span class="token string">"1.2.3-alpha.4"</span><span class="token punctuation">,</span>                <span class="token string">"1.2.3-alpha.10"</span><span class="token punctuation">,</span>                <span class="token string">"1.2.3-beta.4"</span><span class="token punctuation">,</span>                <span class="token string">"3.4.5-alpha.9"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1.2.3-beta.4"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="2-6-检查外部命令的版本兼容性">2.6 检查外部命令的版本兼容性</h3><p>  实例使用 <code>Command</code> 模块运行命令 <code>git --version</code>，然后使用 <code>Version::parse</code> 将版本号解析为语义化版本 <code>semver::Version</code>。<code>VersionReq::matches</code> 将 <code>semver::VersionReq</code> 与解析的语义化版本进行比较。最终，命令输出类似于“<code>git version x.y.z</code>”</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Version</span><span class="token punctuation">,</span> <span class="token class-name">VersionReq</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token class-name">Command</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Utf8</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">FromUtf8Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SemVer</span><span class="token punctuation">(</span><span class="token namespace">semver<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> version_constraint <span class="token operator">=</span> <span class="token string">"> 1.12.0"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> version_test <span class="token operator">=</span> <span class="token class-name">VersionReq</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>version_constraint<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"git"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"--version"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>output<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"执行命令失败错误代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> stdout <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> version <span class="token operator">=</span> stdout        <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//处理多余的回车符号</span>        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"命令输出无效"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> parsed_version <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>version_test<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parsed_version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span>            <span class="token string">"命令版本低于最低支持版本 (找到 &#123;&#125;, 需要 &#123;&#125;)"</span><span class="token punctuation">,</span>            parsed_version<span class="token punctuation">,</span>            version_constraint        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2.34</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-构建工具">3. 构建工具</h2><p>  本节介绍在编译 <code>crate</code> 源代码之前运行的“构建时”工具或代码。按照惯例，构建时代码存放在 <strong><a href="http://build.rs">build.rs</a></strong> 文件，通常称为“构建脚本”。常见的用例包括：Rust 代码生成、绑定的 <strong>C/C++/asm</strong>代码的编译。要获取更多信息，请阅读（Cargo 手册 中文版） 的构建脚本文档。</p><h3 id="3-1-编译并静态链接到绑定的-C-语言库">3.1 编译并静态链接到绑定的 <strong>C</strong> 语言库</h3><p>  为了适应项目中需要混合 <strong>C、C++，或 asm</strong>等语言的场景，<strong>cc crate</strong> 提供了一个简单的 API，用于将绑定的 <strong>C/C++/asm</strong> 代码编译成静态库（<strong>.a</strong>），静态库可以通过 <strong>rustc</strong> 静态链接。下面的实例有一些绑定的 <strong>C</strong> 语言代码（<strong>src/hello.c</strong>），将从 rust 中调用它们。在编译 rust 源代码之前，<strong>Cargo.toml</strong>中指定的“构建”文件（<strong><a href="http://build.rs">build.rs</a></strong>）预先运行。使用 <strong>cc</strong> crate，将生成一个静态库文件（本实例中为 <strong>libhello.a</strong>，请参阅 compile 文档），通过在 <code>extern</code> 代码块中声明外部函数签名，然后就可以从 <strong>rust</strong> 中调用该静态库。<br>  本实例中绑定的 <strong>C</strong> 语言文件非常简单，只需要将一个源文件传递给 <code>cc::Build</code>。对于更复杂的构建需求，<code>cc::Build</code> 提供了一整套构建器方法，用于指定（包含）<strong>include</strong>路径和扩展编译器标志（flag）。</p><ul><li>需要安装<code>cc</code>库,<code>Cargo.toml</code>文件内容配置如下：</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token key property">build</span> <span class="token punctuation">=</span> <span class="token string">"build.rs"</span><span class="token punctuation">[</span><span class="token table class-name">build-dependencies</span><span class="token punctuation">]</span><span class="token key property">cc</span> <span class="token punctuation">=</span> <span class="token string">"1"</span><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>build.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">cc<span class="token punctuation">::</span></span><span class="token class-name">Build</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"src/hello.c"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出 `libhello.a`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/hello.c</code>文件内容如下：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello from C!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好, %s!\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/main.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_char<span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">NulError</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">NulError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">prompt</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">;</span>    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> c_char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"你娃叫啥? "</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c_name <span class="token operator">=</span> <span class="token class-name">CString</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span> <span class="token function">greet</span><span class="token punctuation">(</span>c_name<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>,输入<strong>Rust</strong>。输出如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello from C<span class="token operator">!</span>你娃叫啥? Rust你好, Rust<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>注：这里修改<code>src/hello.c</code>文件内容后,需要同时修改<code>build.rs</code>中的内容（可随意修改后撤回并<strong>Ctrl+S</strong>保存），否则运行时无法获取最新修改后的信息。</li></ul><h3 id="3-2-编译并静态链接到绑定的-C-语言库">3.2 编译并静态链接到绑定的 <strong>C++</strong> 语言库</h3><p>  链接绑定的 <strong>C++</strong> 语言库非常类似于链接绑定的 <strong>C</strong> 语言库。编译并静态链接绑定的 <strong>C++</strong> 库时，与链接绑定的 <strong>C</strong> 语言库相比有两个核心区别：一是通过构造器方法 <strong>cpp(true)</strong> 指定 <strong>C++</strong> 编译器；二是通过在 <strong>C++</strong> 源文件顶部添加 <code>extern &quot;C&quot;</code> 代码段，以防止 <strong>C++</strong> 编译器的名称篡改。</p><ul><li><code>Cargo.toml</code>文件内容配置如下：</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token key property">build</span> <span class="token punctuation">=</span> <span class="token string">"build.rs"</span><span class="token punctuation">[</span><span class="token table class-name">build-dependencies</span><span class="token punctuation">]</span><span class="token key property">cc</span> <span class="token punctuation">=</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>build.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">cc<span class="token punctuation">::</span></span><span class="token class-name">Build</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cpp</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"src/foo.cpp"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/foo.cpp</code>文件内容如下：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/main.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"乘积为：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">乘积为：35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-编译-C-语言库时自定义设置">3.3 编译 <strong>C</strong> 语言库时自定义设置</h3><p>  使用 <code>cc::Build::define</code>自定义构建绑定的 <strong>C</strong> 语言代码非常简单。该方法接受 <code>Option</code> 值，因此可以创建这样的定义：<code>#define APP_NAME &quot;foo&quot;</code>、<code>#define WELCOME</code>（将 <code>None</code> 作为不确定值传递）。如下实例构建了一个绑定的 <strong>C</strong> 语言文件，其在 <strong><a href="http://build.rs">build.rs</a></strong> 中设置了动态定义，并在运行时打印 “Welcome to foo - version 1.0.2”。<strong>Cargo</strong> 设定了一些环境变量，这些变量可能对某些自定义设置有用。</p><ul><li><code>Cargo.toml</code>文件内容配置如下：</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span><span class="token key property">build</span> <span class="token punctuation">=</span> <span class="token string">"build.rs"</span><span class="token punctuation">[</span><span class="token table class-name">build-dependencies</span><span class="token punctuation">]</span><span class="token key property">cc</span> <span class="token punctuation">=</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>build.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">cc<span class="token punctuation">::</span></span><span class="token class-name">Build</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"APP_NAME"</span><span class="token punctuation">,</span> <span class="token string">"\"无名\""</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>            <span class="token string">"VERSION"</span><span class="token punctuation">,</span>            <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"\"&#123;&#125;\""</span><span class="token punctuation">,</span> <span class="token macro property">env!</span><span class="token punctuation">(</span><span class="token string">"CARGO_PKG_VERSION"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"WELCOME"</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"src/foo.c"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/foo.c</code>文件内容如下：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">print_app_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WELCOME</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"欢迎："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s - 版本 %s\n"</span><span class="token punctuation">,</span> APP_NAME<span class="token punctuation">,</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>src/main.rs</code>文件内容如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">print_app_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">print_app_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">欢迎：无名 - 版本 <span class="token number">0.1</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】八 日期与时间</title>
      <link href="/news/1681654162938.html"/>
      <url>/news/1681654162938.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-期间和计算">1. 期间和计算</h2><h3 id="1-1-测量运行时间">1.1 测量运行时间</h3><p>  测量从 <code>time::Instant::now</code> 开始运行的时间 <code>time::Instant::elapsed</code>。调用 <code>time::Instant::elapsed</code> 将返回 <code>time::Duration</code>，在实例末尾打印该时间。此方法不会更改或者重置 <code>time::Instant</code> 对象。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">expensive_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expensive_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> duration <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"expensive_function() 函数运行的时间是: &#123;:?&#125;"</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">expensive_function<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数运行的时间是: <span class="token number">2</span>.000175481s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-执行日期检查和时间计算">1.2 执行日期检查和时间计算</h3><p>  需要安装<code>chrono</code>库，可通过<code>cargo add chrono</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">chrono</span> <span class="token punctuation">=</span> <span class="token string">"0.4.24"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>DateTime::checked_add_signed</code> 计算并显示两周之后的日期和时间，使用 <code>DateTime::checked_sub_signed</code> 计算并显示前一天的日期。如果无法计算出日期和时间，这些方法将返回 <code>None</code>。可以在 <code>chrono::format::strftime</code> 中找到适用于 <code>DateTime::format</code> 的转义序列。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">DateTime</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Utc</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">day_earlier</span><span class="token punctuation">(</span>date_time<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">DateTime</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    date_time<span class="token punctuation">.</span><span class="token function">checked_sub_signed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">days</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Utc</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> almost_three_weeks_from_now <span class="token operator">=</span> now        <span class="token punctuation">.</span><span class="token function">checked_add_signed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">weeks</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>in_2weeks<span class="token closure-punctuation punctuation">|</span></span> in_2weeks<span class="token punctuation">.</span><span class="token function">checked_add_signed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">weeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span>day_earlier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> almost_three_weeks_from_now <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"将近三周后!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">match</span> now<span class="token punctuation">.</span><span class="token function">checked_add_signed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"我们不能用 chrono 来判断太阳系绕银河中心完成超过一圈完整轨道的时间."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2023</span>-04-16 <span class="token number">13</span>:23:26.368785736 UTC<span class="token number">2023</span>-05-07 <span class="token number">13</span>:23:26.368785736 UTC我们不能用 chrono 来判断太阳系绕银河中心完成超过一圈完整轨道的时间.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-时间的时区转换">1.3 时间的时区转换</h3><p>  使用 <code>offset::Local::now</code> 获取本地时间并显示，然后使用 <code>DateTime::from_utc</code> 结构体方法将其转换为 <code>UTC</code> 标准格式。最后，使用 <code>offset::FixedOffset</code> 结构体，可以将 <code>UTC</code> 时间转换为 <code>UTC+8</code> 和 <code>UTC-2</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">DateTime</span><span class="token punctuation">,</span> <span class="token class-name">FixedOffset</span><span class="token punctuation">,</span> <span class="token class-name">Local</span><span class="token punctuation">,</span> <span class="token class-name">Utc</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> local_time <span class="token operator">=</span> <span class="token class-name">Local</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> utc_time <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">></span><span class="token punctuation">::</span><span class="token function">from_utc</span><span class="token punctuation">(</span>local_time<span class="token punctuation">.</span><span class="token function">naive_utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Utc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> china_timezone <span class="token operator">=</span> <span class="token class-name">FixedOffset</span><span class="token punctuation">::</span><span class="token function">east_opt</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rio_timezone <span class="token operator">=</span> <span class="token class-name">FixedOffset</span><span class="token punctuation">::</span><span class="token function">west_opt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"现在当地时间是 &#123;&#125;"</span><span class="token punctuation">,</span> local_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"UTC 时间现在是&#123;&#125;"</span><span class="token punctuation">,</span> utc_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"现在香港时间是 &#123;&#125;"</span><span class="token punctuation">,</span> utc_time<span class="token punctuation">.</span><span class="token function">with_timezone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>china_timezone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"现在里约热内卢时间是 &#123;&#125;"</span><span class="token punctuation">,</span>        utc_time<span class="token punctuation">.</span><span class="token function">with_timezone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio_timezone<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">现在当地时间是 <span class="token number">2023</span>-04-16 <span class="token number">13</span>:31:33.619954917 +00:00UTC 时间现在是2023-04-16 <span class="token number">13</span>:31:33.619954917 UTC现在香港时间是 <span class="token number">2023</span>-04-16 <span class="token number">21</span>:31:33.619954917 +08:00现在里约热内卢时间是 <span class="token number">2023</span>-04-16 <span class="token number">11</span>:31:33.619954917 <span class="token parameter variable">-02:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-解析与显示">2. 解析与显示</h2><h3 id="2-1-检查日期和时间">2.1 检查日期和时间</h3><p>  通过 <code>Timelike</code> 获取当前 <code>UTC DateTime</code> 及其时/分/秒，通过 <code>Datelike</code> 获取其年/月/日/工作日。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Datelike</span><span class="token punctuation">,</span> <span class="token class-name">Timelike</span><span class="token punctuation">,</span> <span class="token class-name">Utc</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Utc</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>is_pm<span class="token punctuation">,</span> hour<span class="token punctuation">)</span> <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">hour12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"当前的 UTC 时间是 &#123;:02&#125;:&#123;:02&#125;:&#123;:02&#125; &#123;&#125;"</span><span class="token punctuation">,</span>        hour<span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">if</span> is_pm <span class="token punctuation">&#123;</span> <span class="token string">"下午"</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token string">"上午"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"自午夜以来已有 &#123;&#125; 秒"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">num_seconds_from_midnight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>is_common_era<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">year_ce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"当前的 UTC 时间是 &#123;&#125;-&#123;:02&#125;-&#123;:02&#125; &#123;:?&#125; (&#123;&#125;)"</span><span class="token punctuation">,</span>        year<span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">if</span> is_common_era <span class="token punctuation">&#123;</span> <span class="token string">"AD"</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token string">"BC"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"公元于 &#123;&#125; 天前开始"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">num_days_from_ce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">当前的 UTC 时间是 01:39:35 下午自午夜以来已有 <span class="token number">49175</span> 秒当前的 UTC 时间是 <span class="token number">2023</span>-04-16 Sun <span class="token punctuation">(</span>AD<span class="token punctuation">)</span>公元于 <span class="token number">738626</span> 天前开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-日期和-UNIX-时间戳的互相转换">2.2 日期和 <code>UNIX</code> 时间戳的互相转换</h3><p>  使用 <code>NaiveDateTime::timestamp</code> 将由<code>NaiveDate::from_ymd</code> 生成的日期和由 <code>NaiveTime::from_hms</code> 生成的时间转换为 <code>UNIX</code> 时间戳。然后，它使用 <code>NaiveDateTime::from_timestamp</code> 计算自 <code>UTC</code> 时间 <strong>1970 年 01 月 01 日 00:00:00</strong> 开始的 <strong>20</strong> 亿秒后的日期。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">NaiveDate</span><span class="token punctuation">,</span> <span class="token class-name">NaiveDateTime</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> date_time<span class="token punctuation">:</span> <span class="token class-name">NaiveDateTime</span> <span class="token operator">=</span> <span class="token class-name">NaiveDate</span><span class="token punctuation">::</span><span class="token function">from_ymd_opt</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and_hms_opt</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"1970-01-01 00:00:00 和 &#123;&#125; 之间的秒数是 &#123;&#125;."</span><span class="token punctuation">,</span>        date_time<span class="token punctuation">,</span>        date_time<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> date_time_after_a_billion_seconds <span class="token operator">=</span>        <span class="token class-name">NaiveDateTime</span><span class="token punctuation">::</span><span class="token function">from_timestamp_opt</span><span class="token punctuation">(</span><span class="token number">20_0000_0000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"二十亿秒后的日期从 1970-01-01 00:00:00 是 &#123;&#125;."</span><span class="token punctuation">,</span>        date_time_after_a_billion_seconds    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1970</span>-01-01 00:00:00 和 <span class="token number">2023</span>-04-16 <span class="token number">17</span>:33:44 之间的秒数是 <span class="token number">1681666424</span>.十亿秒后的日期从 <span class="token number">1970</span>-01-01 00:00:00 是 <span class="token number">2033</span>-05-18 03:33:20.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-日期和时间的格式化显示">2.3 日期和时间的格式化显示</h3><p>  使用 <code>Utc::now</code> 获取并显示当前 <code>UTC</code> 时间。使用 <code>DateTime::to_rfc2822</code> 将当前时间格式化为熟悉的 <code>RFC 2822</code> 格式，使用 <code>DateTime::to_rfc3339</code> 将当前时间格式化为熟悉的 <code>RFC 3339</code> 格式，也可以使用 <code>DateTime::format</code>自定义时间格式。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">DateTime</span><span class="token punctuation">,</span> <span class="token class-name">Utc</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now<span class="token punctuation">:</span> <span class="token class-name">DateTime</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Utc</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"UTC 现在是: &#123;&#125;"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"现在在 RFC 2822 中的 UTC 是: &#123;&#125;"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">to_rfc2822</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"现在在 RFC 3339 中的 UTC 是: &#123;&#125;"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">to_rfc3339</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"现在采用自定义格式的 UTC 是: &#123;&#125;"</span><span class="token punctuation">,</span>        now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%Y:%m:%d %H:%M:%S"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UTC 现在是: <span class="token number">2023</span>-04-16 <span class="token number">13</span>:52:53.430260493 UTC现在在 RFC <span class="token number">2822</span> 中的 UTC 是: Sun, <span class="token number">16</span> Apr <span class="token number">2023</span> <span class="token number">13</span>:52:53 +0000现在在 RFC <span class="token number">3339</span> 中的 UTC 是: <span class="token number">2023</span>-04-16T13:52:53.430260493+00:00现在采用自定义格式的 UTC 是: <span class="token number">2023</span>:04:16 <span class="token number">13</span>:52:53<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-将字符串解析为-DateTime-结构体">2.4 将字符串解析为 DateTime 结构体</h3><p>  时间格式 <code>RFC 2822</code>、<code>RFC 3339</code>，以及自定义时间格式，通常用字符串表达。要将这些字符串解析为 <code>DateTime</code> 结构体，可以分别用 <code>DateTime::parse_from_rfc2822</code>、<code>DateTime::parse_from_rfc3339</code>，以及 <code>DateTime::parse_from_str</code>。可以在 <code>chrono::format::strftime</code> 中找到适用于 <code>DateTime::parse_from_str</code> 的转义序列。注意：<code>DateTime::parse_from_str</code> 要求这些 <code>DateTime</code> 结构体必须是可创建的，以便它唯一地标识日期和时间。要解析不带时区的日期和时间，请使用 <code>NaiveDate</code>、<code>NaiveTime</code>，以及 <code>NaiveDateTime</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span>format<span class="token punctuation">::</span></span><span class="token class-name">ParseError</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">chrono<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">DateTime</span><span class="token punctuation">,</span> <span class="token class-name">NaiveDate</span><span class="token punctuation">,</span> <span class="token class-name">NaiveDateTime</span><span class="token punctuation">,</span> <span class="token class-name">NaiveTime</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rfc2822 <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">::</span><span class="token function">parse_from_rfc2822</span><span class="token punctuation">(</span><span class="token string">"Wed, 18 Feb 2015 23:16:09 GMT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//部分无法解析</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> rfc2822<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rfc3339 <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">::</span><span class="token function">parse_from_rfc3339</span><span class="token punctuation">(</span><span class="token string">"1896-12-19T16:39:57-08:00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> rfc3339<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> custom <span class="token operator">=</span>        <span class="token class-name">DateTime</span><span class="token punctuation">::</span><span class="token function">parse_from_str</span><span class="token punctuation">(</span><span class="token string">"5.8.2022 8:00 am +0000"</span><span class="token punctuation">,</span> <span class="token string">"%d.%m.%Y %H:%M %P %z"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> custom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> time_only <span class="token operator">=</span> <span class="token class-name">NaiveTime</span><span class="token punctuation">::</span><span class="token function">parse_from_str</span><span class="token punctuation">(</span><span class="token string">"23:56:04"</span><span class="token punctuation">,</span> <span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> time_only<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> date_only <span class="token operator">=</span> <span class="token class-name">NaiveDate</span><span class="token punctuation">::</span><span class="token function">parse_from_str</span><span class="token punctuation">(</span><span class="token string">"2023-09-05"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> date_only<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> no_timezone <span class="token operator">=</span>        <span class="token class-name">NaiveDateTime</span><span class="token punctuation">::</span><span class="token function">parse_from_str</span><span class="token punctuation">(</span><span class="token string">"2022-12-05 23:56:04"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> no_timezone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2015</span>-02-18 <span class="token number">23</span>:16:09 +00:00<span class="token number">1896</span>-12-19 <span class="token number">16</span>:39:57 <span class="token parameter variable">-08:00</span><span class="token number">2022</span>-08-05 08:00:00 +00:00<span class="token number">23</span>:56:04<span class="token number">2023</span>-09-05<span class="token number">2022</span>-12-05 <span class="token number">23</span>:56:04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】七 数据库</title>
      <link href="/news/1681570373600.html"/>
      <url>/news/1681570373600.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SQLite">1. SQLite</h2><p>  需要安装<code>rusqlite</code>库，可通过<code>cargo add rusqlite --features bundled</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rusqlite</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.29.0"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"bundled"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-创建-SQLite-数据库">1.1 创建 SQLite 数据库</h3><p>  使用<code>rusqlite</code> <code>crate</code> 打开 <code>SQLite</code> 数据库连接。如果数据库不存在，<code>Connection::open</code>方法将创建它。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// use rusqlite::NO_PARAMS; 已弃用：改用空数组;stmt.execute（NO_PARAMS） => stmt.execute（[]）</span><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token string">"create table if not exists cat_colors (             id integer primary key,             name text not null unique         )"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token string">"create table if not exists cats (             id integer primary key,             name text not null,             color_id integer not null references cat_colors(id)         )"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>生成cats.db文件</li></ul><h3 id="1-2-数据插入和查询">1.2 数据插入和查询</h3><p>  <code>Connection::open</code> 将打开在前一章节实例中创建的数据库 <code>cats</code> 的连接。下面的实例使用 <code>Connection</code> 的 <code>execute</code> 方法将数据插入 <code>cat_colors</code> 和 <code>cats</code> 两张表中。首先，将数据插入到 <code>cat_colors</code> 表中。随后，使用 <code>Connection</code> 的 <code>last_insert_rowid</code> 方法来获取 <code>cat_colors</code> 表最后插入记录的 <code>id</code>。当向 <code>cats</code> 表中插入数据时，使用此 <code>id</code>。然后，使用 <code>prepare</code> 方法准备执行 <code>select</code> 查询操作，该方法提供 <code>statement</code> 结构体。最后，使用 <code>statement</code> 的 <code>query_map</code> 方法执行查询。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Cat</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> cat_colors <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cat_colors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Tigger"</span><span class="token punctuation">,</span> <span class="token string">"Sammy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cat_colors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Black"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Oreo"</span><span class="token punctuation">,</span> <span class="token string">"Biscuit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>color<span class="token punctuation">,</span> catnames<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>cat_colors <span class="token punctuation">&#123;</span>        conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            <span class="token string">"INSERT INTO cat_colors (name) values (?1)"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>color<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> last_id<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">last_insert_rowid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> cat <span class="token keyword">in</span> catnames <span class="token punctuation">&#123;</span>            conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                <span class="token string">"INSERT INTO cats (name, color_id) values (?1, ?2)"</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>cat<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>last_id<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>        <span class="token string">"SELECT c.name, cc.name from cats c         INNER JOIN cat_colors cc         ON cc.id = c.color_id;"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cats <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">query_map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>row<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>            name<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> cat <span class="token keyword">in</span> cats <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"找到猫 &#123;:?&#125;"</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Oreo"</span>, color: <span class="token string">"Black"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Biscuit"</span>, color: <span class="token string">"Black"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Tigger"</span>, color: <span class="token string">"Blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Sammy"</span>, color: <span class="token string">"Blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-事务处理">1.3 事务处理</h3><p>  <code>Connection::open</code> 将打开来自前述实例的数据库 <code>cats.db</code>。使用 <code>Connection::transaction</code> 开始事务，除非使用 <code>Transaction::commit</code> 显式提交，否则事务将回滚。在下面的实例中，颜色表对颜色名称具有唯一性约束。当尝试插入重复的颜色时，事务会回滚。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">successful_tx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> conn<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">rolled_back_tx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">successful_tx</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tx <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"delete from cat_colors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">rolled_back_tx</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tx <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"delete from cat_colors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: SqliteFailure<span class="token punctuation">(</span>Error <span class="token punctuation">&#123;</span> code: ConstraintViolation, extended_code: <span class="token number">787</span> <span class="token punctuation">&#125;</span>, Some<span class="token punctuation">(</span><span class="token string">"FOREIGN KEY constraint failed"</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Postgres-暂未测试">2. Postgres (暂未测试)</h2><p>  需要安装<code>postgres</code>库，可通过<code>cargo add postgres</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">postgres</span> <span class="token punctuation">=</span> <span class="token string">"0.19.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-1-Postgres-数据库中创建表">2.1 Postgres 数据库中创建表</h3><p>  <code>Postgres</code> 数据库中，使用 <code>postgres</code> <code>crate</code> 创建表。<br><code>Client::connect</code>用于连接到现有数据库。本实例中使用 <code>Client::connect</code> 格式化连接数据库的 URL 字符串。假设存在一个数据库：名为 <code>library</code>，用户名为 <code>postgres</code>，密码为 <code>postgres</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"postgresql://postgres:postgres@localhost/library"</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// let mut client = Client::connect("host=localhost user=postgres", NoTls)?; //待测，官方连接数据库示例</span>        client<span class="token punctuation">.</span><span class="token function">batch_execute</span><span class="token punctuation">(</span><span class="token string">"        CREATE TABLE IF NOT EXISTS author (            id              SERIAL PRIMARY KEY,            name            VARCHAR NOT NULL,            country         VARCHAR NOT NULL            )    "</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">batch_execute</span><span class="token punctuation">(</span><span class="token string">"        CREATE TABLE IF NOT EXISTS book  (            id              SERIAL PRIMARY KEY,            title           VARCHAR NOT NULL,            author_id       INTEGER NOT NULL REFERENCES author            )    "</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-数据插入和查询">2.2 数据插入和查询</h3><p>  下述实例中使用 <code>Client</code> 的 <code>execute</code> 方法将数据插入到 <code>author</code> 表中。然后，使用 <code>Client</code> 的 <code>query</code> 方法查询 <code>author</code> 表中的数据。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Author</span> <span class="token punctuation">&#123;</span>    _id<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    country<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"postgresql://postgres:postgres@localhost/library"</span><span class="token punctuation">,</span>                                     <span class="token class-name">NoTls</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> authors <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Chinua Achebe"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Nigeria"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Rabindranath Tagore"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Anita Nair"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>authors <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>            _id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> key<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            country<span class="token punctuation">:</span> value<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                <span class="token string">"INSERT INTO author (name, country) VALUES ($1, $2)"</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>author<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>author<span class="token punctuation">.</span>country<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT id, name, country FROM author"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>            _id<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            country<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Author &#123;&#125; is from &#123;&#125;"</span><span class="token punctuation">,</span> author<span class="token punctuation">.</span>name<span class="token punctuation">,</span> author<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-数据聚合">2.3 数据聚合</h3><p>  下述实例按照降序列出了<a href="https://github.com/MuseumofModernArt/collection/blob/master/Artists.csv">美国纽约州现代艺术博物馆</a>数据库中首批 7999 位艺术家的国籍。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Nation</span> <span class="token punctuation">&#123;</span>    nationality<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    count<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>        <span class="token string">"postgresql://postgres:postgres@127.0.0.1/moma"</span><span class="token punctuation">,</span>        <span class="token class-name">NoTls</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> client<span class="token punctuation">.</span><span class="token function">query</span>     <span class="token punctuation">(</span><span class="token string">"SELECT nationality, COUNT(nationality) AS count     FROM artists GROUP BY nationality ORDER BY count DESC"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> <span class="token punctuation">(</span>nationality<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">></span><span class="token punctuation">)</span>         <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> row<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> nationality<span class="token punctuation">.</span><span class="token function">is_some</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">.</span><span class="token function">is_some</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> nation <span class="token operator">=</span> <span class="token class-name">Nation</span><span class="token punctuation">&#123;</span>                nationality<span class="token punctuation">:</span> nationality<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                count<span class="token punctuation">:</span> count<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; &#123;&#125;"</span><span class="token punctuation">,</span> nation<span class="token punctuation">.</span>nationality<span class="token punctuation">,</span> nation<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】六 数据结构</title>
      <link href="/news/1681480076711.html"/>
      <url>/news/1681480076711.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-位域">1. 位域</h2><h3 id="1-1-定义并操作位域风格的类型">1.1 定义并操作位域风格的类型</h3><p>  需要安装<code>bitflags</code>库，可通过<code>cargo add bitflags</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">bitflags</span> <span class="token punctuation">=</span> <span class="token string">"2.1.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  如下实例在 <code>bitflags!</code> 宏的帮助下创建类型安全的位域类型 <code>MyFlags</code>，并为其实现基本的清理操作（<code>clear</code> 方法）以及 <code>Display trait</code>。随后，展示了基本的按位操作和格式化。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bitflags<span class="token punctuation">::</span></span>bitflags<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token comment">// 定义 MyFlags 枚举类型，表示一个 32 位二进制标志位</span><span class="token macro property">bitflags!</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[derive(Clone, Copy, PartialEq, Eq, Debug )]</span>    <span class="token keyword">struct</span> <span class="token type-definition class-name">MyFlags</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_A</span>       <span class="token operator">=</span> <span class="token number">0b00000001</span><span class="token punctuation">;</span> <span class="token comment">// 第一位标志位表示 FLAG_A</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_B</span>       <span class="token operator">=</span> <span class="token number">0b00000010</span><span class="token punctuation">;</span> <span class="token comment">// 第二位标志位表示 FLAG_B</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_C</span>       <span class="token operator">=</span> <span class="token number">0b00000100</span><span class="token punctuation">;</span> <span class="token comment">// 第三位标志位表示 FLAG_C</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_ABC</span>     <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// FLAG_ABC 表示 FLAG_A、FLAG_B 和 FLAG_C 的集合</span>                           <span class="token operator">|</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token operator">|</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实现 clear 方法，清空标志位</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">bits_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 将 MyFlags 对应的 u32 类型全部置为 0</span>        <span class="token keyword">self</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实现 fmt::Display trait，使得 MyFlags 类型可以被格式化输出</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"&#123;:032b&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将 MyFlags 转换为 32 位二进制数输出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 枚举类型可以像整数一样进行按位运算</span>    <span class="token keyword">let</span> e1 <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">;</span> <span class="token comment">// e1 包含 FLAG_A 和 FLAG_C</span>    <span class="token keyword">let</span> e2 <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">;</span> <span class="token comment">// e2 包含 FLAG_B 和 FLAG_C</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">|</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_ABC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 和 e2 的并集包含 FLAG_ABC</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">&amp;</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 和 e2 的交集包含 FLAG_C</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">-</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 减去 e2 的差集包含 FLAG_A</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">!</span>e2<span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e2 的补集不包含 FLAG_A</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> flags <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_ABC</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"00000000000000000000000000000111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 MyFlags 为 32 位二进制数</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> flags<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"00000000000000000000000000000000"</span> <span class="token comment">// 清空 MyFlags，输出 0</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MyFlags(FLAG_B)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 MyFlags 枚举类型</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"MyFlags(FLAG_A | FLAG_B)"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验成功</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Ubuntu离线安装MiniKube</title>
      <link href="/news/1681466985497.html"/>
      <url>/news/1681466985497.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-工具包准备">1. 工具包准备</h2><p>  安装机器架构 Ubuntu16.04 AMD64<br>  docker的安装过程详见文章：<a href="https://www.taissan.com/news/1678175207403.html">【如何百科】Ubuntu 安装最新 docker</a></p><h3 id="1-1-Minekube-下载">1.1 Minekube 下载</h3><ul><li>官方二进制下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64/">下载链接</a></li><li>官方 Deb 包下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb/">下载链接</a></li><li>官方 RPM 包下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm/">下载链接</a></li></ul><h3 id="1-2-helm-下载">1.2 helm 下载</h3><ul><li>官方二进制包下载地址<a href="https://get.helm.sh/helm-v3.11.3-linux-amd64.tar.gz">下载链接</a></li><li>官方 Deb 包下载地址<a href="https://helm.baltorepo.com/stable/debian/packages/helm/releases/3.11.2-1/files/helm_3.11.2-1_amd64.deb/">下载链接</a></li></ul><h3 id="1-3-kubernetes-相关命令工具下载-至少需要下载以下三个工具">1.3 kubernetes 相关命令工具下载,至少需要下载以下三个工具</h3><p>  本文以 v1.26.3 版本为主。<a href="https://www.downloadkubernetes.com/">下载地址</a></p><ul><li>kubectl</li><li>kubelet</li><li>kubeadm</li></ul><h2 id="2-minikube-镜像准备">2. minikube 镜像准备</h2><h3 id="2-1-下载-minikube-必需的-9-个镜像">2.1 下载 minikube 必需的 9 个镜像</h3><ul><li><code>gcr.io/k8s-minikube/kicbase:v0.0.39</code></li><li><code>gcr.io/k8s-minikube/storage-provisioner:v5</code></li><li><code>registry.k8s.io/kube-apiserver:v1.26.3</code></li><li><code>registry.k8s.io/kube-controller-manager:v1.26.3</code></li><li><code>registry.k8s.io/kube-scheduler:v1.26.3</code></li><li><code>registry.k8s.io/kube-proxy:v1.26.3</code></li><li><code>registry.k8s.io/etcd:3.5.6-0</code></li><li><code>registry.k8s.io/pause:3.9</code></li><li><code>registry.k8s.io/coredns/coredns:v1.9.3</code></li></ul><h3 id="2-2-部署-minikube-dashboard-的-2-个镜像-可选">2.2 部署 minikube dashboard 的 2 个镜像(可选)</h3><ul><li><code>kubernetesui/dashboard:v2.7.0</code></li><li><code>kubernetesui/metrics-scraper:v1.0.8</code></li></ul><h3 id="2-3-镜像下载方法">2.3 镜像下载方法</h3><ul><li>(1). 通过 WSL 的 <code>docker pull</code> 命令下载并导出为 tar 包</li><li>(2). 通过 python 脚本下载 tar 包(仅支持 docker v2 清单的镜像)，脚本参考：<a href="https://github.com/NotGlop/docker-drag">https://github.com/NotGlop/docker-drag</a></li></ul><h2 id="3-minikube-部署">3. minikube 部署</h2><ul><li>将之前下载的所有镜像 tar 包及工具包上传到主机上</li></ul><h3 id="3-1-安装所有镜像">3.1 安装所有镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> *.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-安装所需工具-root-权限">3.2 安装所需工具(root 权限)</h3><ul><li>安装 minikube(deb 包)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> minikube_latest_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 helm(deb 包)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> helm_3.11.2-1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 kubectl(二进制)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-o</span> root <span class="token parameter variable">-g</span> root <span class="token parameter variable">-m</span> 0755 kubectl /usr/local/bin/kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-为-minikube-新建用户">3.3 为 minikube 新建用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建一个minikube用户</span>adduser minikube<span class="token comment"># 新建一个docker用户组</span><span class="token function">groupadd</span> <span class="token function">docker</span><span class="token comment"># 将minikube添加到docker组</span><span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> minikube<span class="token comment"># 将当前用户添加到该docker组(root)</span><span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span><span class="token comment"># 重启docker</span><span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-使用-minikube-用户启动-minikube。需要重启-2-次">3.4 使用 minikube 用户启动 minikube。需要重启 2 次</h3><ul><li>第一次启动时，会在用户目录下创建一个<code>.minikube/cache/linux/amd64/v1.26.3</code>的目录,但由于检测不到<code>kubectl</code>等工具，故会以失败告终。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将之前下载的 3 个命令工具(<code>kubectl,kubelet,kubeadm</code>) 拷贝到用户目录的 <code>.minikube/cache/linux/amd64/v1.26.3</code> 目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> tools/* .minikube/cache/linux/amd64/v1.26.3/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行第二次启动</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>待系统输出以下内容则说明 minikube 安装完成</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Done<span class="token operator">!</span> kubectl is now configured to use <span class="token string">"minikube"</span> cluster and <span class="token string">"default"</span> namespace by default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】五 密码学</title>
      <link href="/news/1681401209555.html"/>
      <url>/news/1681401209555.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-散列（哈希）">1. 散列（哈希）</h2><h3 id="1-1-计算文件的-SHA-256-摘要">1.1 计算文件的 SHA-256 摘要</h3><p>  需要安装<code>ring</code>,<code>data-encoding</code>,<code>error-chain</code> 库，可通过<code>cargo add ring</code>,<code>cargo add data-encoding</code> ,<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">data-encoding</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">ring</span> <span class="token punctuation">=</span> <span class="token string">"0.16.20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  以下实例中，先创建文件，写入一些数据。然后使用 <code>digest::Context</code> 计算文件内容的 <code>SHA-256</code> 摘要 <code>digest::Digest</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token constant">HEXUPPER</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>digest<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token constant">SHA256</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Decode</span><span class="token punctuation">(</span><span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token class-name">DecodeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">sha256_digest</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">:</span> <span class="token class-name">Read</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Digest</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> context <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"file.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> output <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">write!</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"我们将生成此文本的摘要"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> digest <span class="token operator">=</span> <span class="token function">sha256_digest</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"SHA-256 摘要是 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SHA-256 摘要是 765E79C9E2677BCA5A050906AF635703BAC1A725EC63701285A907A263182EC2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-使用-HMAC-摘要对消息进行签名和验证">1.2. 使用 HMAC 摘要对消息进行签名和验证</h3><p>  使用 <code>ring::hmac</code> 创建字符串的签名 <code>hmac::Signature</code>，然后验证签名是否正确。HMAC运算利用hash算法，以一个消息M和一个密钥K作为输入，生成一个定长的消息摘要作为输出。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Unspecified</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>rand<span class="token punctuation">::</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>hmac<span class="token punctuation">,</span> rand<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Unspecified</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> key_value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">SystemRandom</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rng<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> key_value<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token class-name">Key</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token constant">HMAC_SHA256</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"合法而非常重要的信息。"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> signature <span class="token operator">=</span> <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signature<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>验证.</li></ul><h2 id="2-加密">2. 加密</h2><h3 id="2-1-使用-PBKDF2-对密码进行加密（salt）和散列（hash）运算">2.1 使用 <code>PBKDF2</code> 对密码进行加密（<code>salt</code>）和散列（<code>hash</code>）运算</h3><p>  对于通过 <code>PBKDF2</code> 密钥派生函数 <code>pbkdf2::derive</code> 生成的加密（加盐算法）密码，使用 <code>ring::pbkdf2</code> 进行散列（哈希）运算，使用 <code>pbkdf2::verify</code> 验证散列（哈希）运算是否正确。<code>salt</code> 值是使用 <code>SecureRandom::fill</code> 生成的，<code>salt</code> 字节数组被其安全生成的随机数填充。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 导入需要用到的库</span><span class="token keyword">use</span> <span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token constant">HEXUPPER</span><span class="token punctuation">;</span> <span class="token comment">// HEXUPPER 数据编码库</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Unspecified</span><span class="token punctuation">;</span> <span class="token comment">// Ring 库中的错误类型 Unspecified</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>rand<span class="token punctuation">::</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span> <span class="token comment">// 一个安全的随机数生成器</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>digest<span class="token punctuation">,</span> pbkdf2<span class="token punctuation">,</span> rand<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// Ring 库中的摘要、PBKDF2 和随机数模块</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">;</span> <span class="token comment">// 非零的 u32 类型</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Unspecified</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义常量 CREDENTIAL_LEN，并赋值为 SHA512 输出的长度</span>    <span class="token keyword">const</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token namespace">digest<span class="token punctuation">::</span></span><span class="token constant">SHA512_OUTPUT_LEN</span><span class="token punctuation">;</span>    <span class="token comment">// 定义 NonZeroU32 类型变量 n_iter，赋值为 100000</span>    <span class="token keyword">let</span> n_iter <span class="token operator">=</span> <span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">100_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建系统随机数生成器 rng</span>    <span class="token keyword">let</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">SystemRandom</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义长度为 CREDENTIAL_LEN 的数组 salt，并用随机数生成器 rng 填充</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> salt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rng<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> salt<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 定义字符串变量 password，并赋值为 "Guess Me If You Can!"</span>    <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">"Guess Me If You Can!"</span><span class="token punctuation">;</span>    <span class="token comment">// 定义长度为 CREDENTIAL_LEN 的数组 pbkdf2_hash，并使用 PBKDF2 算法和 salt 以及 password 的字节数组填充该数组</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> pbkdf2_hash <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">derive</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token keyword">mut</span> pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印 salt 和 pbkdf2_hash 的十六进制编码</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Salt: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>salt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"PBKDF2 hash: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 PBKDF2 算法、salt 和 password 的字节数组验证 pbkdf2_hash 是否正确</span>    <span class="token keyword">let</span> should_succeed <span class="token operator">=</span> <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义字符串变量 wrong_password，并赋值为 "Definitely not the correct password"</span>    <span class="token keyword">let</span> wrong_password <span class="token operator">=</span> <span class="token string">"Definitely not the correct password"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 PBKDF2 算法、salt 和 wrong_password 的字节数组验证 pbkdf2_hash 是否正确</span>    <span class="token keyword">let</span> should_fail <span class="token operator">=</span> <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        wrong_password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 assert! 宏判断 should_succeed 是否成功</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>should_succeed<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 assert! 宏判断 should_fail 是否失败</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>should_fail<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果程序没有发生错误</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下，没有报错，说明验证成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Salt: CDC7242F11C2AEF4F5091F88CDD63C2D07871ACA0B13A8E9AB458DFF9F2BC7B441F5F250A9C81FB4E006286E08504F0AD7698AF8EC8F03D58AB99706051D1BAEPBKDF2 hash: 6F547321949A89DA4A91BAD3FB1E5ACE48D0CAA57453221A82BD6CA4EA0E840FEFF2756070CB81978EBC9AFAB6017B050BF8A1D4909888470BCFA31494FBEE30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】四 并行/并发</title>
      <link href="/news/1680865445147.html"/>
      <url>/news/1680865445147.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-显式线程">1. 显式线程</h2><h3 id="1-1-生成短期线程">1.1 生成短期线程</h3><p>  需要安装<code>crossbeam</code>库，可通过<code>cargo add crossbeam</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">crossbeam</span> <span class="token punctuation">=</span> <span class="token string">"0.8.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>crossbeam</code> crate 为并发和并行编程提供了数据结构和函数。<code>Scope::spawn</code> 生成一个新的作用域线程，该线程确保传入 <code>crossbeam::scope</code> 函数的闭包在返回之前终止，这意味着您可以从调用的函数中引用数据。</p><ul><li>本实例将数组一分为二，并在不同的线程中并行计算。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token function">find_max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">find_max</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">THRESHOLD</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">split_at</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> thread_l <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">find_max</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> thread_r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">find_max</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> max_l <span class="token operator">=</span> thread_l<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> max_r <span class="token operator">=</span> thread_r<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>max_l<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max_r<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-2-创建并发的数据管道">1.2. 创建并发的数据管道</h3><p>  在章节1.1基础上再次安装<code>crossbeam-channel</code>库，可通过<code>cargo add crossbeam-channel</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">crossbeam</span> <span class="token punctuation">=</span> <span class="token string">"0.8.2"</span><span class="token key property">crossbeam-channel</span> <span class="token punctuation">=</span> <span class="token string">"0.5.7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  使用 <code>crossbeam</code> 和 <code>crossbeam-channel</code> 两个 crate 创建了一个并行的管道。管道有一个数据源和一个数据接收器，数据在从源到接收器的过程中由两个工作线程并行处理。<br>  使用容量由 <code>crossbeam_channel::bounded</code> 分配的有界信道。生产者必须在它自己的线程上，因为它产生的消息比工作线程处理它们的速度快（因为工作线程休眠了半秒）——这意味着生产者将在对 <code>[crossbeam_channel::Sender::send]</code> 调用时阻塞半秒，直到其中一个工作线程对信道中的数据处理完毕。也请注意，信道中的数据由最先接收它的任何工作线程调用，因此每个消息都传递给单个工作线程，而不是传递给两个工作线程。</p><p>  通过迭代器 <code>crossbeam_channel::Receiver::iter</code>方法从信道读取数据，这将会造成阻塞，要么等待新消息，要么直到信道关闭。因为信道是在 <code>crossbeam::scope</code>范围内创建的，我们必须通过 <code>drop</code> 手动关闭它们，以防止整个程序阻塞工作线程的 <code>for</code> 循环。可以将对 <code>drop</code> 的调用视作不再发送消息的信号。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam_channel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span>bounded<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>send1<span class="token punctuation">,</span> recv1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>send2<span class="token punctuation">,</span> recv2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_msgs <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_workers <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 生产者线程</span>        s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>                send1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"发送来源 &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 关闭信道 —— 这是退出的必要条件</span>            <span class="token comment">// for 巡海在工作线程中</span>            <span class="token function">drop</span><span class="token punctuation">(</span>send1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 由 2 个线程并行处理</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_workers <span class="token punctuation">&#123;</span>            <span class="token comment">// 从数据源发送数据到接收器，接收器接收数据</span>            <span class="token keyword">let</span> <span class="token punctuation">(</span>sendr<span class="token punctuation">,</span> recvr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>send2<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recv1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 在不同的线程中衍生工人</span>            s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 接收数据，直到信道关闭前</span>                <span class="token keyword">for</span> msg <span class="token keyword">in</span> recvr<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"工作线程 &#123;:?&#125; 接受到 &#123;&#125;. 并予以百倍奉还"</span><span class="token punctuation">,</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sendr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭信道，否则接收器不会关闭</span>        <span class="token comment">// 退出 for 循坏</span>        <span class="token function">drop</span><span class="token punctuation">(</span>send2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收器</span>        <span class="token keyword">for</span> msg <span class="token keyword">in</span> recv2<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"返回到接收器 &#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">发送来源 <span class="token number">0</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 接受到 <span class="token number">0</span>. 并予以百倍奉还工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 接受到 <span class="token number">1</span>. 并予以百倍奉还返回到接收器 <span class="token number">0</span>返回到接收器 <span class="token number">100</span>发送来源 <span class="token number">1</span>发送来源 <span class="token number">2</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 接受到 <span class="token number">2</span>. 并予以百倍奉还发送来源 <span class="token number">3</span>返回到接收器 <span class="token number">200</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 接受到 <span class="token number">3</span>. 并予以百倍奉还返回到接收器 <span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-在两个线程间传递数据">1.3 在两个线程间传递数据</h3><p>  在单生产者、单消费者（SPSC）环境中使用 <code>crossbeam-channel</code>。我们构建的生成短期线程实例中，使用 <code>crossbeam::scope</code> 和 <code>Scope::spawn</code> 来管理生产者线程。在两个线程之间，使用 <code>crossbeam_channel::unbounded</code> 信道交换数据，这意味着可存储消息的数量没有限制。生产者线程在消息之间休眠半秒。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread<span class="token punctuation">,</span> time<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span>unbounded<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>snd<span class="token punctuation">,</span> rcv<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">unbounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_msgs <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>                snd<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> msg <span class="token operator">=</span> rcv<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"收到 &#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">收到 <span class="token number">0</span>收到 <span class="token number">1</span>收到 <span class="token number">2</span>收到 <span class="token number">3</span>收到 <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-保持全局可变状态">1.4 保持全局可变状态</h3><p>  使用 <code>lazy_static</code> 声明全局状态。<code>lazy_static</code> 创建了一个全局可用的 <code>static ref</code>，它需要 <code>Mutex</code> 来允许变化（请参阅 <code>RwLock</code>）。在 <code>Mutex</code> 的包裹下，保证了状态不能被多个线程同时访问，从而防止出现争用情况。必须获取 <code>MutexGuard</code>，方可读取或更改存储在 <code>Mutex</code> 中的值。</p><p>此小节需要安装<code>lazy_static</code>库，可通过<code>cargo add lazy_static</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">lazy_static</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">FRUIT</span><span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span>fruit<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> db <span class="token operator">=</span> <span class="token constant">FRUIT</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Failed to acquire MutexGuard"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"梨"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">FRUIT</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Failed to acquire MutexGuard"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"葡萄"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>: 苹果<span class="token number">1</span>: 橘子<span class="token number">2</span>: 梨<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-对所有-iso-文件的-SHA256-值并发求和">1.5 对所有 <code>iso</code> 文件的 <code>SHA256</code> 值并发求和</h3><p>  计算了当前目录中每个扩展名为 <code>iso</code> 的文件的 <code>SHA256</code> 哈希值。线程池生成的线程数与使用 <code>num_cpus::get</code> 获取的系统内核数相等。<code>Walkdir::new</code> 遍历当前目录，并调用 <code>execute</code> 来执行读取和计算 <code>SHA256</code> 哈希值的操作。</p><p>此小节需要安装多个库</p><ul><li><code>threadpool</code>库，可通过<code>cargo add threadpool</code> 命令安装</li><li><code>num_cpus</code>库，可通过<code>cargo add num_cpus</code> 命令安装</li><li><code>walkdir</code>库，可通过<code>cargo add walkdir</code> 命令安装</li><li><code>ring</code>库，可通过<code>cargo add ring</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">ring</span> <span class="token punctuation">=</span> <span class="token string">"0.16.20"</span><span class="token key property">walkdir</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span class="token key property">num_cpus</span> <span class="token punctuation">=</span> <span class="token string">"1.15.0"</span><span class="token key property">threadpool</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">WalkDir</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">threadpool<span class="token punctuation">::</span></span><span class="token class-name">ThreadPool</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span></span>channel<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>digest<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token constant">SHA256</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Verify the iso extension</span><span class="token keyword">fn</span> <span class="token function-definition function">is_iso</span><span class="token punctuation">(</span>entry<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> entry<span class="token punctuation">.</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">to_string_lossy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"iso"</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">compute_digest</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">>></span><span class="token punctuation">(</span>filepath<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buf_reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filepath<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> context <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> buf_reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">num_cpus<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"/home/user/Downloads"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">follow_links</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_iso</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> digest <span class="token operator">=</span> <span class="token function">compute_digest</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法发送数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token function">drop</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> rx<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>sha<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span> sha<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果类似于如下结果：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SHA256:72e880f84a8cbc734160ca3b043c91b455ae5d8877d0d5afe15fa2894e177f07 <span class="token string">"/home/user/Downloads/ubuntu.iso"</span>SHA256:2da6c248348f5ff0ee06e57222d6cd7ff2a4c652195db7325ee8327e44175f53 <span class="token string">"/home/user/Downloads/debian.iso"</span>SHA256:6ea82342f0db613ce21a0f6df2e59ec2f0c9b05ed4e50f9288305c0d492b42b0 <span class="token string">"/home/user/Downloads/win11.iso"</span>SHA256:cb4ca11618c4e5a24f7a6bcff2eb2a14453f4d802772374386f69d710568aef8 <span class="token string">"/home/user/Downloads/win12.iso"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-将绘制分形的线程分派到线程池">1.6 将绘制分形的线程分派到线程池</h3><p>  通过从朱莉娅集绘制分形来生成图像，该集合具有用于分布式计算的线程池。使用 <code>ImageBuffer::new</code> 为指定宽度和高度的输出图像分配内存，<code>Rgb::from_channels</code> 信道则计算输出图像的 <code>RGB</code> 像素值。使用 <code>ThreadPool</code> 创建线程池，线程池中的线程数量和使用 <code>num_cpus::get</code> 获取的系统内核数相等。<code>ThreadPool::execute</code> 将每个像素作为单独的作业接收。<code>mpsc::channel</code> 信道接收作业，<code>Receiver::recv</code>接收器则检索作业。<code>ImageBuffer::put_pixel</code>处理数据，设置像素颜色。最后，<code>ImageBuffer::save</code> 将图像存储为 <code>output.png</code>。</p><p>此小节需要在1.5小节基础上安装如下两个库</p><ul><li><code>num</code>库，可通过<code>cargo add num</code> 命令安装</li><li><code>image</code>库，可通过<code>cargo add image</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">num_cpus</span> <span class="token punctuation">=</span> <span class="token string">"1.15.0"</span><span class="token key property">threadpool</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span class="token key property">num</span> <span class="token punctuation">=</span> <span class="token string">"0.4.0"</span><span class="token key property">image</span> <span class="token punctuation">=</span> <span class="token string">"0.24.6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">ImageBuffer</span><span class="token punctuation">,</span> <span class="token class-name">Rgb</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>channel<span class="token punctuation">,</span> <span class="token class-name">RecvError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">threadpool<span class="token punctuation">::</span></span><span class="token class-name">ThreadPool</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">MpscRecv</span><span class="token punctuation">(</span><span class="token class-name">RecvError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将强度值转换为 RGB 值的函数</span><span class="token comment">// 基于 http://www.efg2.com/Lab/ScienceAndEngineering/Spectra.htm</span><span class="token keyword">fn</span> <span class="token function-definition function">wavelength_to_rgb</span><span class="token punctuation">(</span>wavelength<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Rgb</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> wave <span class="token operator">=</span> wavelength <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">match</span> wavelength <span class="token punctuation">&#123;</span>        <span class="token number">380</span><span class="token punctuation">..=</span><span class="token number">439</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">440</span><span class="token punctuation">..=</span><span class="token number">489</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">440</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">440</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">490</span><span class="token punctuation">..=</span><span class="token number">509</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">490</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">510</span><span class="token punctuation">..=</span><span class="token number">579</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">510</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">580</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">510</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">580</span><span class="token punctuation">..=</span><span class="token number">644</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">645</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">645</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">580</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">645</span><span class="token punctuation">..=</span><span class="token number">780</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> factor <span class="token operator">=</span> <span class="token keyword">match</span> wavelength <span class="token punctuation">&#123;</span>        <span class="token number">380</span><span class="token punctuation">..=</span><span class="token number">419</span> <span class="token operator">=></span> <span class="token number">0.3</span> <span class="token operator">+</span> <span class="token number">0.7</span> <span class="token operator">*</span> <span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">420</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">701</span><span class="token punctuation">..=</span><span class="token number">780</span> <span class="token operator">=></span> <span class="token number">0.3</span> <span class="token operator">+</span> <span class="token number">0.7</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">780</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">780</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">700</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Rgb::from_channels(r, g, b, 0) // 自 0.24.0 后已弃用：使用像素的构造函数</span>    <span class="token class-name">Rgb</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//与原书不同</span><span class="token punctuation">&#125;</span><span class="token comment">// 将茱莉亚集距离映射为强度值</span><span class="token keyword">fn</span> <span class="token function-definition function">julia</span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token class-name">Complex</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> max_iter<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> width <span class="token operator">=</span> width <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> height <span class="token operator">=</span> height <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> z <span class="token operator">=</span> <span class="token class-name">Complex</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// scale and translate the point to image coordinates</span>        re<span class="token punctuation">:</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> width<span class="token punctuation">,</span>        im<span class="token punctuation">:</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> height<span class="token punctuation">)</span> <span class="token operator">/</span> height<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>max_iter <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2.0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        z <span class="token operator">=</span> z <span class="token operator">*</span> z <span class="token operator">+</span> c<span class="token punctuation">;</span>        i <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token punctuation">&#125;</span><span class="token comment">// 规格 RGB 颜色值范围内的强度值</span><span class="token keyword">fn</span> <span class="token function-definition function">normalize</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span> factor<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u8</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>color <span class="token operator">*</span> factor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">powf</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> img <span class="token operator">=</span> <span class="token class-name">ImageBuffer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> iterations <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.156</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">num_cpus<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>height <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>width <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token function">julia</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> pixel <span class="token operator">=</span> <span class="token function">wavelength_to_rgb</span><span class="token punctuation">(</span><span class="token number">380</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">400</span> <span class="token operator">/</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法发送数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span> <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">put_pixel</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> _ <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"output.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>将获得一张图片</li></ul><p><img src="/imgs/posts/pic-1680865445147.png" alt=""></p><h2 id="2-数据并行">2. 数据并行</h2><h3 id="2-1-并行改变数组中元素">2.1 并行改变数组中元素</h3><p>  实例使用了 <code>rayon</code> 库，这是一个 Rust 程序设计语言的数据并行库。<code>rayon</code> 为任何并行可迭代的数据类型提供 <code>par_iter_mut</code> 方法。这是一个类迭代器的链，可以对链内的数据并行计算。</p><ul><li><code>rayon</code>库，可通过<code>cargo add rayon</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">par_iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>p<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>p <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>-1, <span class="token number">6</span>, <span class="token number">8</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-并行测试集合中任意或所有的元素是否匹配给定断言">2.2 并行测试集合中任意或所有的元素是否匹配给定断言</h3><p>  如何使用 <code>rayon::any</code> 和 <code>rayon::all</code> 方法，这两个方法是分别与 <code>std::any</code> 和 <code>std::all</code> 相对应的并行方法。<code>rayon::any</code> 并行检查迭代器的任意元素是否与断言匹配，并在找到一个匹配的元素时就返回。<code>rayon::all</code> 并行检查迭代器的所有元素是否与断言匹配，并在找到不匹配的元素时立即返回。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在不被2整除的数(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均被2整除</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在大于8的数(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均小于或等于8</span>    vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在不被2整除的数</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均被2整除(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在大于8的数</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均小于或等于8(取反)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-3-使用给定断言并行搜索项">2.3 使用给定断言并行搜索项</h3><p>  使用 <code>rayon::find_any</code> 和 <code>par_iter</code> 并行搜索 <code>vector</code> 集合，以查找满足指定闭包中的断言的元素。如果有多个元素满足 <code>rayon::find_any</code> 闭包参数中定义的断言，<code>rayon</code> 将返回搜索发现的第一个元素，但不一定是 <code>vector</code> 集合的第一个元素。实例中闭包的参数是对引用的引用（<code>&amp;&amp;x</code>）</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f2 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f3 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>f3 <span class="token operator">></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-4-对-vector-并行排序">2.4 对 <code>vector</code> 并行排序</h3><p>  首先分配空字符串 <code>vector</code>；然后，通过 <code>par_iter_mut().for_each</code>并行对 <code>vector</code> 填充随机值。尽管存在多种选择，可以对可枚举数据类型进行排序，但 <code>par_sort_unstable</code> 通常比稳定排序（相同的值排序后相对顺序不变）算法快。</p><ul><li>在之前基础上安装<code>rand</code>库，可通过<code>cargo add rand</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token class-name">Alphanumeric</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread_rng<span class="token punctuation">,</span> <span class="token class-name">Rng</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">par_iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>p<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> rng<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token class-name">Alphanumeric</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//与原书不同</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">par_sort_unstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-5-Map-reduce-并行计算">2.5 <code>Map-reduce</code> 并行计算</h3><p>  使用 <code>rayon::filter</code>、<code>rayon::map</code>，以及 <code>rayon::reduce</code> 计算 <code>Person</code> 对象中年龄超过 30 岁的那些人的平均年龄。<code>rayon::filter</code> 过滤集合中满足给定断言的元素。<code>rayon::map</code> 对每个元素执行一次计算，创建一个新的迭代；<code>rayon::reduce</code> 执行新的计算，基于前一次的 <code>reduce</code> 计算结果和当前元素累加在一起。另外可以查看 <code>rayon::sum</code>，它与本实例中的 <code>reduce</code> 计算具有相同的结果。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">&#123;</span>    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Person</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_over_30 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum_over_30 <span class="token operator">=</span> v        <span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">,</span> y<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> alt_sum_30<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> avg_over_30 <span class="token operator">=</span> sum_over_30 <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> num_over_30<span class="token punctuation">;</span>    <span class="token keyword">let</span> alt_avg_over_30 <span class="token operator">=</span> alt_sum_30 <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> num_over_30<span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>avg_over_30 <span class="token operator">-</span> alt_avg_over_30<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f32</span><span class="token punctuation">::</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//EPSILON: 0.00000011920929</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"30岁以上的人的平均年龄是 &#123;&#125;"</span><span class="token punctuation">,</span> avg_over_30<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">30</span>岁以上的人的平均年龄是 <span class="token number">36.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-并行生成-png-缩略图">2.6 并行生成 <code>png</code> 缩略图</h3><p>  为当前目录中的所有 <code>.png</code> 图像文件生成缩略图，然后将生成的缩略图保存在一个名为 <code>thumbnails</code> 的新文件夹中。<code>glob::glob_with</code> 在当前目录中查找 <code>jpeg</code> 图像文件，<code>rayon</code> 通过 <code>par_iter</code> 方法调用 <code>DynamicImage::resize</code>，并行地调整图像大小。</p><ul><li>在之前基础上安装<code>glob</code>库，可通过<code>cargo add glob</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">image</span> <span class="token punctuation">=</span> <span class="token string">"0.24.6"</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span class="token key property">glob</span> <span class="token punctuation">=</span> <span class="token string">"0.3.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span>create_dir_all<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token class-name">ChainedError</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>glob_with<span class="token punctuation">,</span> <span class="token class-name">MatchOptions</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">imageops<span class="token punctuation">::</span></span><span class="token class-name">FilterType</span><span class="token punctuation">,</span> <span class="token class-name">ImageError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token class-name">ImageError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Glob</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">PatternError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> options<span class="token punctuation">:</span> <span class="token class-name">MatchOptions</span> <span class="token operator">=</span> <span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> files<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">glob_with</span><span class="token punctuation">(</span><span class="token string">"*.png"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"在当前目录中找不到 .png 文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> thumb_dir <span class="token operator">=</span> <span class="token string">"thumbnails"</span><span class="token punctuation">;</span>    <span class="token function">create_dir_all</span><span class="token punctuation">(</span>thumb_dir<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"将 &#123;&#125; 缩略图保存到 '&#123;&#125;'..."</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thumb_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> image_failures<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> files        <span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>path<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token function">make_thumbnail</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> thumb_dir<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">chain_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> path<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image_failures        <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">display_chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; thumbnails 保存成功"</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> image_failures<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">make_thumbnail</span><span class="token operator">&lt;</span><span class="token constant">PA</span><span class="token punctuation">,</span> <span class="token constant">PB</span><span class="token operator">></span><span class="token punctuation">(</span>original<span class="token punctuation">:</span> <span class="token constant">PA</span><span class="token punctuation">,</span> thumb_dir<span class="token punctuation">:</span> <span class="token constant">PB</span><span class="token punctuation">,</span> longest_edge<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">where</span>    <span class="token constant">PA</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token constant">PB</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token function">open</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> file_path <span class="token operator">=</span> thumb_dir<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>img        <span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>longest_edge<span class="token punctuation">,</span> longest_edge<span class="token punctuation">,</span> <span class="token class-name">FilterType</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>(处理1.6小节生成的图片)输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将 <span class="token number">1</span> 缩略图保存到 <span class="token string">'thumbnails'</span><span class="token punctuation">..</span>.<span class="token number">1</span> thumbnails 保存成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── output.png <span class="token comment"># 原始文件</span>└── thumbnails    └── output.png <span class="token comment"># 生成后的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】三 压缩</title>
      <link href="/news/1680011142405.html"/>
      <url>/news/1680011142405.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用-tar-包">1. 使用 <code>tar</code> 包</h2><p>  需要安装<code>flate2</code>和<code>tar</code>库，可通过<code>cargo add flate2</code> 和<code>cargo add tar</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span class="token key property">tar</span> <span class="token punctuation">=</span> <span class="token string">"0.4.38"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-1-压缩目录为-tar-包">1.1 压缩目录为 <code>tar</code> 包</h3><p>  压缩 <code>/root/testtar</code>目录内的内容到 <code>archive.tar.gz</code> 压缩包中。创建一个用 <code>GzEncoder</code> 和 <code>tar::Builder</code> 包裹的 <code>File</code>。使用 <code>Builder::append_dir_all</code>，将 <code>/root/testtar</code>目录内的内容递归添加到 <code>backup/code</code>路径下的归档文件中。在将数据写入压缩包 <code>archive.tar.gz</code> 之前，<code>GzEncoder</code> 负责清晰地将数据压缩。</p><ul><li><code>/root/testtar</code>目录结构如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/testtar/├── Cargo.lock_copy├── Cargo.toml_copy└── src-rust    └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细代码如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>write<span class="token punctuation">::</span></span><span class="token class-name">GzEncoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span></span><span class="token class-name">Compression</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tar_gz <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"archive.tar.gz"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> enc <span class="token operator">=</span> <span class="token class-name">GzEncoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar_gz<span class="token punctuation">,</span> <span class="token class-name">Compression</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tar <span class="token operator">=</span> <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">;</span>    tar<span class="token punctuation">.</span><span class="token function">append_dir_all</span><span class="token punctuation">(</span><span class="token string">"backup/code"</span><span class="token punctuation">,</span> <span class="token string">"/root/testtar"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,在当前目录下生成一个名为<code>archive.tar.gz</code>的压缩包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>目录结构如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── Cargo.lock├── Cargo.toml├── archive.tar.gz├── src│   └── main.rs└── target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-解压-tar-包">1.2. 解压 <code>tar</code> 包</h3><p>  从当前工作目录中的压缩包 <code>archive.tar.gz</code>，解压（<code>GzDecoder</code>）和提取（<code>Archive::unpack</code>）所有文件，并放在<code>copy</code>目录下。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>read<span class="token punctuation">::</span></span><span class="token class-name">GzDecoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"archive.tar.gz"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tar_gz <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tar <span class="token operator">=</span> <span class="token class-name">GzDecoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar_gz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">Archive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>    archive<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string">"./copy/"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,解压到<code>copy</code>目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>目录结构如下,可以看到目录包含<code>backup/code</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">copy/└── backup    └── code        ├── Cargo.lock_copy        ├── Cargo.toml_copy        └── src-rust            └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-从路径移除前缀时，解压-tar-包">1.3 从路径移除前缀时，解压 <code>tar</code> 包</h3><p>  循环遍历 <code>Archive::entries</code>。使用 <code>Path::strip_prefix</code> 移除指定的路径前缀（bundle/logs）。最终，通过 <code>Entry::unpack</code>提取 <code>tar::Entry</code>（<code>tar</code> 包中的内容）。此块代码需要安装<code>error-chain</code>库，通过<code>error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span class="token key property">tar</span> <span class="token punctuation">=</span> <span class="token string">"0.4.38"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>read<span class="token punctuation">::</span></span><span class="token class-name">GzDecoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">PathBuf</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>  foreign_links <span class="token punctuation">&#123;</span>    <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StripPrefixError</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">StripPrefixError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"archive.tar.gz"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">Archive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">GzDecoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">"backup/code"</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"提取了以下文件:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    archive        <span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> entry<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">PathBuf</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">strip_prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"> &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,解压到<code>copy</code>目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">提取了以下文件:<span class="token operator">></span> src-rust<span class="token operator">></span> src-rust/main.rs<span class="token operator">></span> Cargo.lock_copy<span class="token operator">></span> Cargo.toml_copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压到当前目录的目录结构如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── Cargo.lock_copy├── Cargo.toml_copy├── src-rust│   └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】二 命令行</title>
      <link href="/news/1679492996891.html"/>
      <url>/news/1679492996891.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-参数解析">1. 参数解析</h2><p>  需要安装<code>clap</code>库，可通过<code>cargo add clap --features derive</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">clap</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"4.1.11"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"derive"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-解析命令行参数">1.1 解析命令行参数</h3><p>  此应用程序使用 <code>clap</code> 构建器样式描述其命令行界面的结构。文档还提供了另外两种可用的方法去实例化应用程序。在构建器样式中，<code>short</code> 和 <code>long</code> 选项控制用户将要键入的标志；<code>short</code> 标志看起来像 <code>-f</code>，long 标志看起来像 <code>--file</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Arg</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"命令行-测试"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"0.1.0"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"Hackerman Jones &lt;hckrmnjones@hack.gov>"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">"参数解析教学"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>            <span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">short</span><span class="token punctuation">(</span><span class="token char">'f'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>                <span class="token comment">//  .takes_value(true)</span>                <span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token string">"A cool file"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>            <span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">short</span><span class="token punctuation">(</span><span class="token char">'n'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span>                <span class="token comment">//  .takes_value(true)</span>                <span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token string">"Five less than your favorite number"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get_matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> binding <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> myfile <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"传递的文件是: &#123;&#125;"</span><span class="token punctuation">,</span> myfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_str <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> num_str <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"不知道你最喜欢的数字是什么。"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">match</span> s<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"你喜欢的数字是 &#123;&#125;."</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"那不是一个数字! &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run -- <span class="token parameter variable">-f</span> abc.txt <span class="token parameter variable">-n</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">传递的文件是: abc.txt你喜欢的数字是 <span class="token number">105</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-ANSI-终端">2. <code>ANSI</code> 终端</h2><p>  需要安装<code>ansi_term</code>库，可通过<code>cargo add ansi_term</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">ansi_term</span> <span class="token punctuation">=</span> <span class="token string">"0.12.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>ansi_term</code> 中有两种主要的数据结构：<code>ANSIString</code> 和 <code>Style</code>。<code>Style</code> 包含样式信息：颜色，是否粗体文本，或者是否闪烁，或者其它样式。还有 <code>Colour</code> 变量，代表简单的前景色样式。<code>ANSIString</code> 是与 <code>Style</code> 配对的字符串。</p><h3 id="2-1-打印彩色文本到终端">2.1 打印彩色文本到终端</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Colour</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"This is &#123;&#125; in color, &#123;&#125; in color and &#123;&#125; in color"</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Red</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Blue</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Green</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">This is 红色 <span class="token keyword">in</span> color, 蓝色 <span class="token keyword">in</span> color and 绿色 <span class="token keyword">in</span> color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-终端中的粗体文本">2.2 终端中的粗体文本</h3><p>  对于比简单的前景色变化更复杂的事情，代码需要构造 <code>Style</code> 结构体。<code>Style::new()</code> 创建结构体，并链接属性。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Style</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; and 这不是"</span><span class="token punctuation">,</span> <span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是加粗"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这是加粗 and 这不是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-终端中的粗体和彩色文本">2.3 终端中的粗体和彩色文本</h3><p>  <code>Colour</code> 模块实现了许多类似 <code>Style</code> 的函数，并且可以链接方法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Colour</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Style</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"&#123;&#125;, &#123;&#125; and &#123;&#125;"</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Yellow</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是黄色的"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是加粗的"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Yellow</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是黄色并加粗的"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这是黄色的, 这是加粗的 and 这是黄色并加粗的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】async和await使用</title>
      <link href="/news/1678864283156.html"/>
      <url>/news/1678864283156.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用的库-库-httpx-可通过-pip-install-httpx-命令安装">1. 使用的库(库 <code>httpx</code> 可通过 <code>pip install httpx</code> 命令安装)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-async-和-await-的普通使用">2. <code>async</code> 和 <code>await</code> 的普通使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_other</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_other<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-async-和-await-调用库-httpx">3. <code>async</code> 和 <code>await</code> 调用库 <code>httpx</code></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_httpx</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_httpx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> httpx<span class="token punctuation">.</span>AsyncClient<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_httpx<span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_httpx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_other<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运行时长: %s 秒'</span><span class="token operator">%</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-详细情况">4. 详细情况</h2><h3 id="4-1-详细代码">4.1 详细代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_httpx</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_httpx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> httpx<span class="token punctuation">.</span>AsyncClient<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_httpx<span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_other</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_other<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_httpx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_other<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运行时长: %s 秒'</span><span class="token operator">%</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-运行输出结果">4.2 运行输出结果</h3><pre class="line-numbers language-none"><code class="language-none">&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-httpx&#x2F;0.23.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root&#x3D;1-641168d8-29511e7271300606309ff8b9&#39;&#125;, &#39;origin&#39;: &#39;106.120.122.135&#39;, &#39;url&#39;: &#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;&#125;&#123;&#39;cookies&#39;: &#123;&#125;&#125;&#123;&#39;uuid&#39;: &#39;fd8c2608-7b3e-47f9-8aec-0c31299771a7&#39;&#125;&#123;&#39;Content-Length&#39;: &#39;87&#39;, &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;, &#39;freeform&#39;: &#39;&#39;&#125;https:&#x2F;&#x2F;httpbin.org&#x2F;gethttps:&#x2F;&#x2F;httpbin.org&#x2F;uuidhttps:&#x2F;&#x2F;httpbin.org&#x2F;cookieshttps:&#x2F;&#x2F;httpbin.org&#x2F;response-headers?freeform&#x3D;运行时长: 12.626903533935547 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他事项">5. 其他事项</h2><p>  文中使用<code>httpx</code>进行异步请求，如果使用<code>aiohttp</code>(<code>通过pip install aiohttp</code>命令安装)进行异步请求时，使用<code>loop.close()</code>关闭事件循环时会抛出异常<code>raise RuntimeError('Event loop is closed')</code>【Python 版本 3.9】。相关代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_asyncio</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_asyncio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_asyncio<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_asyncio<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-运行报错结果">5.1 运行报错结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception ignored in: <span class="token operator">&lt;</span>function _ProactorBasePipeTransport.__del__ at 0x00000118E6D784C<span class="token operator"><span class="token file-descriptor important">0</span>></span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio\proactor_events.py"</span>, line <span class="token number">116</span>, <span class="token keyword">in</span> __del__    self.close<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio\proactor_events.py"</span>, line <span class="token number">108</span>, <span class="token keyword">in</span> close    self._loop.call_soon<span class="token punctuation">(</span>self._call_connection_lost, None<span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio<span class="token entity" title="\b">\b</span>ase_events.py"</span>, line <span class="token number">746</span>, <span class="token keyword">in</span> call_soon    self._check_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio<span class="token entity" title="\b">\b</span>ase_events.py"</span>, line <span class="token number">510</span>, <span class="token keyword">in</span> _check_closed    raise RuntimeError<span class="token punctuation">(</span><span class="token string">'Event loop is closed'</span><span class="token punctuation">)</span>RuntimeError: Event loop is closed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】一 算法</title>
      <link href="/news/1678889342364.html"/>
      <url>/news/1678889342364.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成随机值">1. 生成随机值</h2><p>  需要安装<code>rand</code>库，可通过<code>cargo add rand</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-生成随机数">1.1 生成随机数</h3><p>  在随机数生成器 <code>rand::Rng</code> 的帮助下，通过 <code>rand::thread_rng</code> 生成随机数。可以开启多个线程，每个线程都有一个初始化的生成器。整数在其类型范围内均匀分布，浮点数是从 <code>0</code>均匀分布到 <code>1</code>，但不包括 <code>1</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n1<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n2<span class="token punctuation">:</span> <span class="token keyword">u16</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u8: &#123;&#125;"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u16: &#123;&#125;"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u32: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 i32: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 float: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机生成 u8: <span class="token number">158</span>随机生成 u16: <span class="token number">26703</span>随机生成 u32: <span class="token number">2989669353</span>随机生成 i32: <span class="token parameter variable">-1944070083</span>随机生成 float: <span class="token number">0.6281595400384855</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-生成范围内随机数">1.2 生成范围内随机数</h3><p>  使用 <code>Rng::gen_range</code>，在半开放的 <code>[0, 10)</code> 范围内（不包括 <code>10</code>）生成一个随机值。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"整型Integer: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"浮点型Float: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">..</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">整型Integer: <span class="token number">7</span>浮点型Float: <span class="token number">4.609263483162893</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>Uniform</code> 模块可以得到均匀分布的值。下述代码和上述代码具有相同的效果，但在相同范围内重复生成数字时，下述代码性能可能会更好。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Uniform</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> die <span class="token operator">=</span> <span class="token class-name">Uniform</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> throw <span class="token operator">=</span> die<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"掷骰子: &#123;&#125;"</span><span class="token punctuation">,</span> throw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> throw <span class="token operator">==</span> <span class="token number">6</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">掷骰子: <span class="token number">3</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">2</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-生成给定分布随机数">1.3 生成给定分布随机数</h3><p>  默认情况下，随机数在 <code>rand</code> crate 中是均匀分布。<code>rand_distr</code>(可通过<code>cargo add rand_distr</code> 安装) crate 提供其它的分布类型。如要使用，首先实例化一个分布，然后在随机数生成器<code>rand::Rng</code> 的帮助下，使用 <code>Distribution::sample</code> 从该分布中进行采样。如下是一个使用正态（<code>Normal</code>）分布的实例</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span class="token key property">rand_distr</span> <span class="token punctuation">=</span> <span class="token string">"0.4.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand_distr<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Normal</span><span class="token punctuation">,</span> <span class="token class-name">NormalError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span>thread_rng<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">NormalError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> normal <span class="token operator">=</span> <span class="token class-name">Normal</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 来自 N(2, 9) 分布"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4.025748774397368</span> 来自 N<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">9</span><span class="token punctuation">)</span> 分布<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-生成自定义类型随机值">1.4 生成自定义类型随机值</h3><p>  随机生成一个元组 <code>(i32, bool, f64)</code> 和用户定义类型为 <code>Point</code> 的变量。为 <code>Standard</code> 实现 <code>Distribution</code> <code>trait</code>，以允许其随机生成。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Standard</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Distribution</span><span class="token operator">&lt;</span><span class="token class-name">Point</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">Standard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">sample</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">:</span> <span class="token class-name">Rng</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> rng<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>rand_x<span class="token punctuation">,</span> rand_y<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>            x<span class="token punctuation">:</span> rand_x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> rand_y<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rand_tuple <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rand_point<span class="token punctuation">:</span> <span class="token class-name">Point</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机元组: &#123;:?&#125;"</span><span class="token punctuation">,</span> rand_tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机坐标: &#123;:?&#125;"</span><span class="token punctuation">,</span> rand_point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机元组: <span class="token punctuation">(</span>-410099798, true, <span class="token number">0.3339881538362096</span><span class="token punctuation">)</span>随机坐标: Point <span class="token punctuation">&#123;</span> x: <span class="token number">1211748610</span>, y: <span class="token parameter variable">-959131956</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-5-从一组字母数字字符生成随机密码">1.5 从一组字母数字字符生成随机密码</h3><p>  随机生成一个给定长度的 <code>ASCII</code> 字符串，范围为 <code>A-Z</code>，<code>a-z</code>，<code>0-9</code>，使用字母数字样本</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread_rng<span class="token punctuation">,</span> <span class="token class-name">Rng</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token class-name">Alphanumeric</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rand_string<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sample_iter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Alphanumeric</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">::</span>from<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机密码: &#123;&#125;"</span><span class="token punctuation">,</span> rand_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机密码: bksgkrXebcPo3ZsW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-从一组用户定义字符创建随机密码">1.6 从一组用户定义字符创建随机密码</h3><p>  使用用户自定义的字节字符串，使用 <code>gen_range</code> 函数，随机生成一个给定长度的 <code>ASCII</code> 字符串</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">CHARSET</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\                            abcdefghijklmnopqrstuvwxyz\                            0123456789)(*&amp;^%$#@!~"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PASSWORD_LEN</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">PASSWORD_LEN</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> idx <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">CHARSET</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">CHARSET</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">char</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"指定字符随机密码: &#123;&#125;"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">指定字符随机密码: Rz<span class="token operator">!</span>eVvWN<span class="token punctuation">)</span>Xg5OYae<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Vector-排序">2. <code>Vector</code> 排序</h2><h3 id="2-1-整数-Vector-排序">2.1 整数 <code>Vector</code> 排序</h3><p>  通过 <code>vec::sort</code> 对一个整数 <code>Vector</code> 进行排序。另一种方法是使用 <code>vec::sort_unstable</code>，后者运行速度更快一些，但不保持相等元素的顺序。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Vector-排序">2.2 <code>Vector</code> 排序</h3><p>  对于<code>f32</code> 或 <code>f64</code> 的 <code>vector，可以使用</code> <code>vec::sort_by</code> 和 <code>PartialOrd::partial_cmp</code> 对其进行排序</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.15</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">1.123</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span><span class="token function">partial_cmp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.123</span><span class="token punctuation">,</span> <span class="token number">1.15</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-结构体-Vector-排序">2.3 结构体 <code>Vector</code> 排序</h3><p>  依据自然顺序（按名称和年龄），对具有 <code>name</code> 和 <code>age</code> 属性的 <code>Person</code> 结构体 <code>Vector</code> 排序。为了使 <code>Person</code> 可排序，需要添加<code>traits</code>：<code>PartialEq</code>。这样也可以使用 <code>vec:sort_by</code> 方法自定义比较函数，如按照年龄排序。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    salary<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> salary<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> people <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 根据 name 值对 people 进行排序</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根据 age 值对 people 进行排序(从小到大)</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// // 根据 salary 值对 people 进行排序(从大到小)</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> b<span class="token punctuation">.</span>salary<span class="token punctuation">.</span><span class="token function">partial_cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】2023-03-13-压缩数据和解压数据</title>
      <link href="/news/1678714773864.html"/>
      <url>/news/1678714773864.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用compress压缩文件">1. 使用compress压缩文件</h2><h3 id="1-1-使用到的库flate2-配置文件Cargo-toml中添加-或通过cargo-add-flate2-添加">1.1 使用到的库<code>flate2</code>,配置文件Cargo.toml中添加(或通过cargo add flate2 添加)</h3><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-使用库flate2压缩代码">1.2 使用库<code>flate2</code>压缩代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>write<span class="token punctuation">::</span></span><span class="token class-name">GzEncoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span></span><span class="token class-name">Compression</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span>args<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span>copy<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">BufReader</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在real_main函数中处理真正的程序</span>    <span class="token comment">//为了干净的结束和退出，在主函数中使用它</span>    <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Usage: `source` `target`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> <span class="token class-name">GzEncoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">Compression</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> encoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"源文件大小: &#123;:?&#125;"</span><span class="token punctuation">,</span>        input<span class="token punctuation">.</span><span class="token function">get_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"目标文件大小: &#123;:?&#125;"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"压缩时间: &#123;:?&#125;"</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-使用方式（以book-pdf为例）">1.3 使用方式（以book.pdf为例）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run book.pdf book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-运行输出结果">1.4 运行输出结果</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">源文件大小: <span class="token number">2307697</span>目标文件大小: <span class="token number">1885921</span>压缩时间: <span class="token number">1</span>.703851963s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-使用decompress解压文件-以解压zip格式文件为例">2. 使用decompress解压文件(以解压<code>zip</code>格式文件为例)</h2><h3 id="2-1-使用到的库zip-配置文件Cargo-toml中添加-或通过cargo-add-zip添加">2.1 使用到的库<code>zip</code>,配置文件<code>Cargo.toml</code>中添加(或通过<code>cargo add zip</code>添加)</h3><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">zip</span> <span class="token punctuation">=</span> <span class="token string">"0.6.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-使用库解压代码">2.2 使用库解压代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">zip<span class="token punctuation">::</span></span><span class="token class-name">ZipArchive</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在real_main函数中处理真正的程序</span>    <span class="token comment">//为了干净的结束和退出，在主函数中使用它</span>    <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个名为 args 的向量来收集用户在 CLI 中的输入</span>    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果 args 小于 2，就会出现问题，因为你需要发送</span>    <span class="token comment">// zip 文件，它会告诉你如何使用</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Usage: &#123;&#125; &lt;filename>"</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//args在第2个位置，第一个索引表示的是文件名</span>    <span class="token keyword">let</span> fname <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用标准fs打开文件</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用存档阅读器功能</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从0开始，覆盖整个archive的长度</span>    <span class="token comment">// zip 存档中会有多个文件，我们需要提取所有文件</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>archive<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> archive<span class="token punctuation">.</span><span class="token function">by_index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置提取文件的路径</span>        <span class="token keyword">let</span> outpath <span class="token operator">=</span> <span class="token keyword">match</span> file<span class="token punctuation">.</span><span class="token function">enclosed_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">continue</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> comment <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token operator">!</span>comment<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"File &#123;&#125; comment: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// zip 也可以包含其他文件夹</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>file<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ends_with</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"设置文件夹路径 &#123;&#125; 的目录 \"&#123;&#125;\""</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> outpath<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//递归创建一个新目录</span>            <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"文件 &#123;&#125; 提取到 \"&#123;&#125;\" (&#123;&#125; bytes)"</span><span class="token punctuation">,</span>                i<span class="token punctuation">,</span>                outpath<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                file<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果这些文件没有父目录，则创建一个新目录</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> outpath<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> outfile <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> file<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> outfile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Linux下获取和设置提取文件的权限</span>        <span class="token attribute attr-name">#[cfg(unix)]</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>unix<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">PermissionsExt</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">unix_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">set_permissions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">,</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">Permissions</span><span class="token punctuation">::</span><span class="token function">from_mode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用方式（以images-zip为例）">2.3 使用方式（以images.zip为例）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run images.zip <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-运行结果">2.4 运行结果</h3><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">设置文件夹路径 <span class="token number">0</span> 的目录 <span class="token string">"images/"</span>设置文件夹路径 <span class="token number">1</span> 的目录 <span class="token string">"images/axif/"</span>文件 <span class="token number">2</span> 提取到 <span class="token string">"images/axif/img3.avif"</span> <span class="token punctuation">(</span><span class="token number">34794</span> bytes<span class="token punctuation">)</span>文件 <span class="token number">3</span> 提取到 <span class="token string">"images/img1.jpg"</span> <span class="token punctuation">(</span><span class="token number">721480</span> bytes<span class="token punctuation">)</span>文件 <span class="token number">4</span> 提取到 <span class="token string">"images/img2.jpg"</span> <span class="token punctuation">(</span><span class="token number">715163</span> bytes<span class="token punctuation">)</span>解压时间: <span class="token number">134</span>.253736ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压文件路径如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">images├── axif│   └── img3.avif├── img1.jpg└── img2.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】标准库中的数据结构与算法</title>
      <link href="/news/1678627821546.html"/>
      <url>/news/1678627821546.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据结构">1. 数据结构</h2><p>  Rust的标准库提供了几种数据结构，可用于以各种方式存储和操作数据。如下所示：</p><ul><li><code>Vec&lt;T&gt;</code>：一个可增长的数组，可以存储可变数量的T类型元素。它被实现为一个动态分配的数组，并提供对其元素的有效访问。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>LinkedList&lt;T&gt;</code>：一个双链表，可以存储可变数量的类型T的元素。它允许有效地插入和删除列表两端的元素，但与Vec<T>相比，它对单个元素的访问速度较慢。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> list <span class="token operator">=</span> <span class="token class-name">LinkedList</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>HashMap&lt;K, V&gt;</code>：一个哈希表，可以存储从K类型键到V类型值的映射。它提供了基于键值的高效插入、删除和查找。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-算法">2. 算法</h2><p>  Rust标准库还提供了许多算法，可用于对数据执行常用操作。如下所示:</p><ul><li><code>sort</code>：使用稳定的排序算法对切片进行就地排序。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>binary_search</code>：对排序的切片执行二分查找，以查找给定元素的索引。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>iter::sum</code>：计算迭代器中元素的和。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>find</code>：查找迭代器中满足给定闭包的第一个元素,以下2种形式。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>first_even<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>first_even<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>min</code>和<code>max</code>：分别查找迭代器中的最小和最大元素。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>all</code>和<code>any</code>：分别确定迭代器中的所有元素或任一元素是否满足给定的闭包。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> all_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> any_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>all_even<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>any_even<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fold</code>：在迭代器上执行fold操作，根据迭代器的元素累积一个值。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// fold函数第一个是初始值，第二个是一个闭包，闭包第一个参数是一个累计值，第二个参数是本次迭代元素的引用，返回值作为下一次迭代的累计值。</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> x<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于 2 + （(((1 + 2) + 3) + 4) + 5）</span>    <span class="token keyword">let</span> mul<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> x<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于 3 * （(((1 * 2) * 3) * 4) * 5）</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>map</code>: 即是对迭代的元素进行一次映射后再返回映射后的结果,<code>collect</code>是将一个迭代器迭代的所有元素组合成一个新的集合</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vec_str <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec_str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vec_str<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec_str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>filter</code> 是一个迭代器适配器，它接受一个闭包作为参数，该闭包返回一个布尔值。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 错误示例 1</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| i % 3 == 0).collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 2</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 3</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).copied().collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 4</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).copied().collect();</span>    <span class="token comment">// assert_eq!(list1, [0, 3, 6]);</span>    <span class="token comment">// 正确示例 </span>    <span class="token keyword">let</span> list1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span><span class="token operator">*</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> list2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】读取CSV文件</title>
      <link href="/news/1678456159235.html"/>
      <url>/news/1678456159235.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-假设对以下nba-csv文件进行读取">1. 假设对以下<code>nba.csv</code>文件进行读取</h2><pre class="line-numbers language-csv" data-language="csv"><code class="language-csv"><span class="token value">姓名</span><span class="token punctuation">,</span><span class="token value">团队</span><span class="token punctuation">,</span><span class="token value">号码</span><span class="token punctuation">,</span><span class="token value">职位</span><span class="token punctuation">,</span><span class="token value">年龄</span><span class="token punctuation">,</span><span class="token value">身高</span><span class="token punctuation">,</span><span class="token value">体重</span><span class="token punctuation">,</span><span class="token value">大学</span><span class="token punctuation">,</span><span class="token value">薪水</span><span class="token value">埃弗里·布拉德利</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">0.0</span><span class="token punctuation">,</span><span class="token value">PG</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">6-2</span><span class="token punctuation">,</span><span class="token value">180.0</span><span class="token punctuation">,</span><span class="token value">Texas</span><span class="token punctuation">,</span><span class="token value">7730337.0</span><span class="token value">杰·克劳德</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">99.0</span><span class="token punctuation">,</span><span class="token value">SF</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">6-6</span><span class="token punctuation">,</span><span class="token value">235.0</span><span class="token punctuation">,</span><span class="token value">马奎特</span><span class="token punctuation">,</span><span class="token value">6796117.0</span><span class="token value">约翰·霍兰</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">30.0</span><span class="token punctuation">,</span><span class="token value">SG</span><span class="token punctuation">,</span><span class="token value">27.0</span><span class="token punctuation">,</span><span class="token value">6-5</span><span class="token punctuation">,</span><span class="token value">205.0</span><span class="token punctuation">,</span><span class="token value">波士顿大学</span><span class="token punctuation">,</span><span class="token value">R.J. 亨特</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">28.0</span><span class="token punctuation">,</span><span class="token value">SG</span><span class="token punctuation">,</span><span class="token value">22.0</span><span class="token punctuation">,</span><span class="token value">6-5</span><span class="token punctuation">,</span><span class="token value">185.0</span><span class="token punctuation">,</span><span class="token value">佐治亚州</span><span class="token punctuation">,</span><span class="token value">1148640.0</span><span class="token value">杰雷布科</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">8.0</span><span class="token punctuation">,</span><span class="token value">大前锋</span><span class="token punctuation">,</span><span class="token value">29.0</span><span class="token punctuation">,</span><span class="token value">6-10</span><span class="token punctuation">,</span><span class="token value">231.0</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token value">5000000.0</span><span class="token value">阿米尔约翰逊</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">90.0</span><span class="token punctuation">,</span><span class="token value">大前锋</span><span class="token punctuation">,</span><span class="token value">29.0</span><span class="token punctuation">,</span><span class="token value">6-9</span><span class="token punctuation">,</span><span class="token value">240.0</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token value">12000000.0</span><span class="token value">乔丹米奇</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">55.0</span><span class="token punctuation">,</span><span class="token value">PF</span><span class="token punctuation">,</span><span class="token value">21.0</span><span class="token punctuation">,</span><span class="token value">6-8</span><span class="token punctuation">,</span><span class="token value">235.0</span><span class="token punctuation">,</span><span class="token value">LSU</span><span class="token punctuation">,</span><span class="token value">1170960.0</span><span class="token value">凯利奥利尼克</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">41.0</span><span class="token punctuation">,</span><span class="token value">中锋</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">7-0</span><span class="token punctuation">,</span><span class="token value">238.0</span><span class="token punctuation">,</span><span class="token value">冈萨加</span><span class="token punctuation">,</span><span class="token value">2165160.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其对应的表格展示如下：<table><thead><tr><th>姓名</th><th>团队</th><th>号码</th><th>职位</th><th>年龄</th><th>身高</th><th>体重</th><th>大学</th><th>薪水</th></tr></thead><tbody><tr><td>埃弗里·布拉德利</td><td>波士顿凯尔特人队</td><td>0.0</td><td>PG</td><td>25.0</td><td>6-2</td><td>180.0</td><td>Texas</td><td>7730337.0</td></tr><tr><td>杰·克劳德</td><td>波士顿凯尔特人队</td><td>99.0</td><td>SF</td><td>25.0</td><td>6-6</td><td>235.0</td><td>马奎特</td><td>6796117.0</td></tr><tr><td>约翰·霍兰</td><td>波士顿凯尔特人队</td><td>30.0</td><td>SG</td><td>27.0</td><td>6-5</td><td>205.0</td><td>波士顿大学</td><td></td></tr><tr><td>R.J. 亨特</td><td>波士顿凯尔特人队</td><td>28.0</td><td>SG</td><td>22.0</td><td>6-5</td><td>185.0</td><td>佐治亚州</td><td>1148640.0</td></tr><tr><td>杰雷布科</td><td>波士顿凯尔特人队</td><td>8.0</td><td>大前锋</td><td>29.0</td><td>6-10</td><td>231.0</td><td></td><td>5000000.0</td></tr><tr><td>阿米尔约翰逊</td><td>波士顿凯尔特人队</td><td>90.0</td><td>大前锋</td><td>29.0</td><td>6-9</td><td>240.0</td><td></td><td>12000000.0</td></tr><tr><td>乔丹米奇</td><td>波士顿凯尔特人队</td><td>55.0</td><td>PF</td><td>21.0</td><td>6-8</td><td>235.0</td><td>LSU</td><td>1170960.0</td></tr><tr><td>凯利奥利尼克</td><td>波士顿凯尔特人队</td><td>41.0</td><td>中锋</td><td>25.0</td><td>7-0</td><td>238.0</td><td>冈萨加</td><td>2165160.0</td></tr></tbody></table></li></ul><h2 id="2-配置安装库CSV">2. 配置安装库<code>CSV</code></h2><ul><li>可直接在<code>Cargo.toml</code>文件中<code>dependencies</code>下方的添加<code>csv = &quot;1.1&quot;</code>，也可通过<code>cargo add csv</code>命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">csv</span> <span class="token punctuation">=</span> <span class="token string">"1.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-读取CSV文件">3. 读取<code>CSV</code>文件</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> csv<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">read_from_file</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">read_from_file</span><span class="token punctuation">(</span><span class="token string">"./nba.csv"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-上述代码输出内容如下">4. 上述代码输出内容如下</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"埃弗里·布拉德利"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"0.0"</span>, <span class="token string">"PG"</span>, <span class="token string">"25.0"</span>, <span class="token string">"6-2"</span>, <span class="token string">"180.0"</span>, <span class="token string">"Texas"</span>, <span class="token string">"7730337.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"杰·克劳德"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"99.0"</span>, <span class="token string">"SF"</span>, <span class="token string">"25.0"</span>, <span class="token string">"6-6"</span>, <span class="token string">"235.0"</span>, <span class="token string">"马奎特"</span>, <span class="token string">"6796117.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"约翰·霍兰"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"30.0"</span>, <span class="token string">"SG"</span>, <span class="token string">"27.0"</span>, <span class="token string">"6-5"</span>, <span class="token string">"205.0"</span>, <span class="token string">"波士顿大学"</span>, <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"R.J. 亨特"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"28.0"</span>, <span class="token string">"SG"</span>, <span class="token string">"22.0"</span>, <span class="token string">"6-5"</span>, <span class="token string">"185.0"</span>, <span class="token string">"佐治亚州"</span>, <span class="token string">"1148640.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"杰雷布科"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"8.0"</span>, <span class="token string">"大前锋"</span>, <span class="token string">"29.0"</span>, <span class="token string">"6-10"</span>, <span class="token string">"231.0"</span>, <span class="token string">""</span>, <span class="token string">"5000000.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"阿米尔约翰逊"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"90.0"</span>, <span class="token string">"大前锋"</span>, <span class="token string">"29.0"</span>, <span class="token string">"6-9"</span>, <span class="token string">"240.0"</span>, <span class="token string">""</span>, <span class="token string">"12000000.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"乔丹米奇"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"55.0"</span>, <span class="token string">"PF"</span>, <span class="token string">"21.0"</span>, <span class="token string">"6-8"</span>, <span class="token string">"235.0"</span>, <span class="token string">"LSU"</span>, <span class="token string">"1170960.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"凯利奥利尼克"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"41.0"</span>, <span class="token string">"中锋"</span>, <span class="token string">"25.0"</span>, <span class="token string">"7-0"</span>, <span class="token string">"238.0"</span>, <span class="token string">"冈萨加"</span>, <span class="token string">"2165160.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csv </tag>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】RSA加密使用</title>
      <link href="/news/1678453890145.html"/>
      <url>/news/1678453890145.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-pycryptodome">1. 安装 <code>pycryptodome</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-使用公钥加密">2. 使用公钥加密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> requests<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_v1_5<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    publickey <span class="token operator">=</span> <span class="token triple-quoted-string string">'''-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsgDq4OqxuEisnk2F0EJFmw4xKa5IrcqEYHvqxPs2CHEg2kolhfWA2SjNuGAHxyDDE5MLtOvzuXjBx/5YJtc9zj2xR/0moesS+Vi/xtG1tkVaTCba+TV+Y5C61iyr3FGqr+KOD4/XECu0Xky1W9ZmmaFADmZi7+6gO9wjgVpU9aLcBcw/loHOeJrCqjp7pA98hRJRY+MML8MK15mnC4ebooOva+mJlstW6t/1lghR8WNV8cocxgcHHuXBxgns2MlACQbSdJ8c6Z3RQeRZBzyjfey6JCCfbEKouVrWIUuPphBL3OANfgp0B+QG31bapvePTfXU48TYK0M5kE+8LgbbWQIDAQAB-----END PUBLIC KEY-----'''</span>    key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>publickey<span class="token punctuation">)</span>    passwd <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    pwd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>passwd<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】合并多个 xml 文件</title>
      <link href="/news/1678265743246.html"/>
      <url>/news/1678265743246.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-假设需要对以下-3-个文件进行合并">1. 假设需要对以下 3 个文件进行合并</h2><ul><li><code>file1.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file1.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>file2.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file2.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>file3.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file3.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item P<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-合并输出的预计结果保存在-output-xml-中">2. 合并输出的预计结果保存在 output.xml 中</h2><ul><li>合并条件是满足 <em><code>&#123;'id': '1','value':'a'&#125;</code></em> 的所有元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- output.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-合并方式一（根节点简单的情况）">3. 合并方式一（根节点简单的情况）</h2><ul><li>合并的方法如<code>merge_xml_files_root</code>所示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_xml_files_root</span><span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>root_data<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> ET<span class="token punctuation">.</span>Element<span class="token punctuation">(</span>root_data<span class="token punctuation">)</span>    <span class="token keyword">for</span> xml_file <span class="token keyword">in</span> xml_files<span class="token punctuation">:</span>        subtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>        subroot <span class="token operator">=</span> subtree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        attrib <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"[@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span></span><span class="token string">']"</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> elem <span class="token keyword">in</span> subroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>attrib<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>    tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>ElementTree<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xml_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'file1.xml'</span><span class="token punctuation">,</span><span class="token string">'file2.xml'</span><span class="token punctuation">,</span><span class="token string">'file3.xml'</span><span class="token punctuation">]</span>    attribs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span>    output_file <span class="token operator">=</span> <span class="token string">'output.xml'</span>    item <span class="token operator">=</span> <span class="token string">'item'</span>    root_data <span class="token operator">=</span> <span class="token string">'data'</span>    merge_xml_files_root<span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>root_data<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-合并方式二（根节点未知）">4. 合并方式二（根节点未知）</h2><ul><li>合并的方法如<code>merge_xml_files</code>所示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_xml_files</span><span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> xml_file <span class="token keyword">in</span> xml_files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> tree<span class="token punctuation">:</span>            <span class="token comment"># 使用第一个文件初始化tree</span>            tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>            root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> elem <span class="token keyword">in</span> root<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!=</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token comment"># 请除第一个文件中不符合的结点</span>                    root<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        subtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>        subroot <span class="token operator">=</span> subtree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        attrib <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"[@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span></span><span class="token string">']"</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> elem <span class="token keyword">in</span> subroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>attrib<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可通过以下方式调用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xml_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'file1.xml'</span><span class="token punctuation">,</span><span class="token string">'file2.xml'</span><span class="token punctuation">,</span><span class="token string">'file3.xml'</span><span class="token punctuation">]</span>    attribs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span>    output_file <span class="token operator">=</span> <span class="token string">'output.xml'</span>    item <span class="token operator">=</span> <span class="token string">'item'</span>    merge_xml_files<span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他使用方式">5. 其他使用方式</h2><ul><li>如果传入的 <code>attribs = &#123;'id': '1'&#125;</code>，将会得到满足该条件的结果，如下：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- output.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-扩充部分">6. 扩充部分</h2><ul><li>合并方式二使用<code>any()</code>函数进行结点删除,此外还有<code>all()</code>函数。<code>any()</code> 和 <code>all()</code> 都是 Python 内置函数。<code>any()</code> 函数用于判断给定的可迭代参数<code>iterable</code> 是否全部为 <code>False</code>，则返回 <code>False</code>，如果有一个为 <code>True</code>，则返回 <code>True</code>。元素除了是 0、空、FALSE 外都算 TRUE。</li></ul><h3 id="6-1-any-函数">6.1 <code>any()</code>函数</h3><ul><li><code>any()</code> 函数接受一个可迭代对象作为参数，如果可迭代对象中的任意一个元素为真值，则返回 <code>True</code>，否则返回 <code>False</code>。例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>文中使用的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!=</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>等价于</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'1'</span> <span class="token keyword">or</span> elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-all-函数">6.2 <code>all()</code>函数</h3><ul><li><code>all()</code>函数也接受一个可迭代对象作为参数，如果可迭代对象中的所有元素都为真值，则返回 <code>True</code>，否则返回 <code>False</code>。例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Ubuntu安装最新docker</title>
      <link href="/news/1678175207403.html"/>
      <url>/news/1678175207403.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-在线安装">1. 在线安装</h2><h3 id="使用存储库安装-前言">使用存储库安装(前言)</h3><p>  在新主机上首次安装 Docker Engine 之前，需要设置 Docker 存储库。之后，您可以从存储库中安装和更新 Docker。如无法使用 <code>root</code> 权限安装，可使用 <code>sudo</code> 来安装 docker。</p><h3 id="1-1-设置存储库">1.1 设置存储库</h3><h4 id="1-1-1-更新-apt-包索引并安装包以允许-apt-通过-HTTPS-使用存储库">1.1.1 更新 <code>apt</code> 包索引并安装包以允许 <code>apt</code> 通过 HTTPS 使用存储库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg <span class="token punctuation">\</span>    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-添加-Docker-官方GPG密钥">1.1.2 添加 Docker 官方<code>GPG</code>密钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-p</span> /etc/apt/keyrings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-3-使用以下命令设置存储库">1.1.3 使用以下命令设置存储库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-安装-Docker-引擎">1.2 安装 Docker 引擎</h3><h4 id="1-2-1-更新-apt-包索引">1.2.1 更新 <code>apt</code> 包索引</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-2-安装-Docker-引擎、容器和-Docker-Compose">1.2.2 安装 Docker 引擎、容器和 Docker Compose</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-3-通过运行-hello-world-镜像来验证-Docker-引擎安装是否成功">1.2.3 通过运行 <code>hello-world</code> 镜像来验证 Docker 引擎安装是否成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-4-注意事项">1.2.4 注意事项</h4><p>  <strong>通过上述安装的 <code>docker-compose</code> 启动时命令是 <code>docker compose</code>，而不是 <code>docker-compose</code>，如下</strong>：</p><ul><li><strong>成功示例</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>错误示例</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-离线安装">2. 离线安装</h2><p>  Docker 是一种开源的容器技术，可以让开发者和运维人员在不同的平台上快速部署和运行应用程序。<code>Docker </code>的优点是轻量、高效、可移植和安全。但是，如果要在没有互联网连接的环境中安装 Docker，就需要一些额外的步骤。本文将介绍如何在 <code>Ubuntu 16.04 LTS</code> 上离线安装 Docker 和 <code>Docker-compose</code>。</p><h3 id="2-1-准备工作">2.1 准备工作</h3><p>  在开始离线安装之前，我们需要准备以下几个文件：</p><ul><li><code>containerd.io</code> 包：这是 Docker 的一个依赖包，负责管理容器的生命周期。</li><li><code>docker-ce-cli</code> 包：这是 Docker 的命令行接口，提供了各种操作容器的命令。</li><li><code>docker-ce</code> 包：这是 Docker 的核心组件，包含了 Docker 引擎和其他功能。</li><li><code>docker-compose</code> 包：这是一个用于定义和运行多容器应用程序的工具。</li></ul><p>  可以从以下地址下载这些包，注意选择与 <code>Ubuntu</code> 版本相匹配的包。例如，如果，其他版本代号如下：</p><table><thead><tr><th>版本</th><th>代号</th><th>地址</th></tr></thead><tbody><tr><td>16.04 LTS</td><td>xenial</td><td><a href="https://download.docker.com/linux/ubuntu/dists/xenial/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>18.04 LTS</td><td>bionic</td><td><a href="https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>20.04 LTS</td><td>focal</td><td><a href="https://download.docker.com/linux/ubuntu/dists/focal/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>22.04 LTS</td><td>jammy</td><td><a href="https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/">官方下载地址</a></td></tr></tbody></table><p>  我们使用的是 <code>Ubuntu 16.04 LTS</code>（代号为 <code>xenial</code>）需要下载以下三个包，其他版本可下载对应的四个最新包</p><ul><li>containerd.io_1.4.6-1_amd64.deb</li><li>docker-ce-cli_20.10.7_3-0_ubuntu-xenial_amd64.deb</li><li>docker-ce_20.10.7_3-0_ubuntu-xenial_amd64.deb</li><li>docker-compose-Linux-x86_64 (官方下载地址中仅 Ubuntu 18 版本以上存在 docker-compose-plugin*.deb)</li></ul><p>  下载完成后，我们需要将这些文件拷贝到目标机器上，例如放在 <code>/home/ubuntu/docker</code> 目录下。</p><h3 id="2-2-卸载原有的-Docker">2.2. 卸载原有的 Docker</h3><p>  如果目标机器上已经安装了旧版本的 Docker，那么我们需要先卸载它们，以避免冲突。我们可以使用以下命令来卸载原有的 Docker：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> purge docker-ce<span class="token function">apt-get</span> autoremove <span class="token parameter variable">--purge</span> docker-ce<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-安装新版的-Docker">2.3 安装新版的 Docker</h3><p>  接下来，我们可以使用 <code>dpkg</code> 命令来安装新版的 Docker。注意要按照依赖顺序来安装包，即先安装 <code>containerd.io</code> 包，再安装 <code>docker-ce-cli</code> 包，最后安装 <code>docker-ce</code> 包。可以使用以下命令来进行安装：</p><h4 id="2-3-1-安装核心包">2.3.1 安装核心包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ubuntu/docker <span class="token comment"># 进入存放文件的目录</span>dpkg <span class="token parameter variable">-i</span> containerd.io_1.4.6-1_amd64.deb <span class="token comment"># 安装 containerd.io 包</span>dpkg <span class="token parameter variable">-i</span> docker-ce-cli_20.10.7_3-0_ubuntu-xenial_amd64.deb <span class="token comment"># 安装 docker-ce-cli 包</span>dpkg <span class="token parameter variable">-i</span> docker-ce_20.10.7_3-0_ubuntu-xenial_amd64.deb <span class="token comment"># 安装 docker-ce 包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注: 如果安装 <code>containerd.io</code>包时提示如下信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.containerd.io depends on libseccomp2<span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">2.4</span>.0<span class="token punctuation">)</span><span class="token punctuation">;</span>however: Version of libseccomp2:amd64 on system is <span class="token number">2.3</span>.1-2-ubuntu2~16.04.1.<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>则需要在该地址下载<code>libseccomp2(&gt;=2.4.0)</code>包，如<code>libseccomp2_2.4.3-1ubuntu1_amd64.deb</code> <a href="http://archive.ubuntu.com/ubuntu/pool/main/libs/libseccomp/">官方下载地址</a>。下载完成后，使用 <code>dpkg</code> 命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-i</span> libseccomp2_2.4.3-1ubuntu1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成后按照上述<code>docker</code>的安装顺序重新安装即可。</li></ul><h4 id="2-3-2-通过运行-docker-version-镜像来验证-Docker-引擎安装是否成功">2.3.2 通过运行 <code>docker --version</code> 镜像来验证 Docker 引擎安装是否成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--version</span> <span class="token comment"># 查看 Docker 版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果能够看到类似如下的输出，则说明 Docker 已经正常工作：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Docker version <span class="token number">20.10</span>.7, build f0df350<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-3-安装docker-compose-包【可选】">2.3.3 安装<code>docker-compose</code> 包【可选】</h4><p>  Ubuntu 18 版本以上安装<code>docker-compose</code> 包，下面以<code>Ubuntu 22.04 LTS</code>为例。Ubuntu 16 版本安装<code>docker-compose</code> 在后文进行描述。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-i</span> docker-compose-plugin_2.6.0~ubuntu-jammy_amd64.deb   <span class="token comment"># 安装 docker-compose 包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证 <code>docker-compose</code> 是否安装成功(注意如果安装的是最新版，则启动时命令是 <code>docker compose</code>，而不是 <code>docker-compose</code>)：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-docker-compose-离线安装">2.4 docker-compose 离线安装</h3><p>  <code>Docker-compose </code>是一个用于定义和运行多容器 Docker 应用程序的工具。它使用 <code>YAML</code> 文件来配置应用程序的服务、网络和卷，然后使用一个命令来创建和启动所有的服务。在没有互联网连接的环境中，需要离线安装 <code>docker-compose</code>。下面介绍如何在 <code>Ubuntu 16.04 LTS</code> 上离线安装 <code>docker-compose</code> 的步骤。</p><h4 id="2-4-1-下载-docker-compose">2.4.1 下载 <code>docker-compose</code></h4><p>  在可以访问互联网的电脑上，打开浏览器，访问 <a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a> ，找到最新的稳定版本（本文以 2.16.0【2023 年 3 月最新版】为例），点击 Assets 下的 <code>docker-compose-Linux-x86_64</code> 链接，下载二进制文件。将下载好的文件复制到 U 盘或其他可移动存储设备上，然后插入到目标服务器上。</p><h4 id="2-4-2-安装-docker-compose">2.4.2 安装 <code>docker-compose</code></h4><ul><li>在目标服务器上，打开终端，切换到 <code>root</code> 用户：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建一个 <code>/usr/local/bin</code> 目录（如果不存在）：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将 U 盘或其他可移动存储设备上的 <code>docker-compose-Linux-x86_64</code> 文件复制到 <code>/usr/local/bin</code> 目录下，并重命名为 <code>docker-compose</code> ：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /media/usb/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>给 <code>docker-compose</code> 文件添加可执行权限：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证 <code>docker-compose</code> 是否安装成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果输出类似如下内容，则表示安装成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> version <span class="token number">2.16</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】可用的翻译API及其调用方式</title>
      <link href="/news/1678175269378.html"/>
      <url>/news/1678175269378.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-谷歌翻译-API（需要设置代理）">1. 谷歌翻译 API（需要设置代理）</h2><p>  以翻译 <strong>“Authentication Architecture”</strong> 为例</p><h3 id="1-1-网页调用">1.1 网页调用</h3><h4 id="1-1-1-通过浏览器或命令行调用">1.1.1 通过浏览器或命令行调用</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">curl &quot;https:&#x2F;&#x2F;translate.google.com&#x2F;translate_a&#x2F;single?client&#x3D;gtx&amp;dt&#x3D;t&amp;dj&#x3D;1&amp;ie&#x3D;UTF-8&amp;sl&#x3D;auto&amp;tl&#x3D;zh_CN&amp;q&#x3D;Authentication%20Architecture&quot; -H &quot;Accept: application&#x2F;json&quot; --proxy http:&#x2F;&#x2F;127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-2-返回结果">1.1.2 返回结果</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sentences"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"trans"</span><span class="token operator">:</span> <span class="token string">"认证架构"</span><span class="token punctuation">,</span>      <span class="token property">"orig"</span><span class="token operator">:</span> <span class="token string">"Authentication Architecture"</span><span class="token punctuation">,</span>      <span class="token property">"backend"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"model_specification"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"translation_engine_debug_info"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"model_tracking"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"checkpoint_md5"</span><span class="token operator">:</span> <span class="token string">"95ad550c486923f3a292df3e4cffc30f"</span><span class="token punctuation">,</span>            <span class="token property">"launch_doc"</span><span class="token operator">:</span> <span class="token string">"en_zh_2022q2.md"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span>  <span class="token property">"confidence"</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token property">"spell"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"ld_result"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"srclangs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"srclangs_confidences"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"extended_srclangs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-通过-python-调用">1.2 通过 python 调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">translate_from_google</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    txt <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>txt<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">' ,=&amp;/+()'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://translate.google.com/translate_a/single?client=gtx&amp;dt=t&amp;dj=1&amp;ie=UTF-8&amp;sl=auto&amp;tl=zh_CN&amp;q='</span><span class="token operator">+</span>txt    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sentences'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'trans'</span><span class="token punctuation">)</span>  <span class="token comment"># 谷歌</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">translate_from_google<span class="token punctuation">(</span><span class="token string">'Authentication Architecture'</span><span class="token punctuation">)</span> <span class="token comment"># 调用</span><span class="token comment"># 输出"认证架构"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-有道翻译-API">2. 有道翻译 API</h2><h3 id="2-1-网页调用">2.1 网页调用</h3><h4 id="2-1-1-通过浏览器或命令行调用">2.1.1 通过浏览器或命令行调用</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">curl &quot;https:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate?doctype&#x3D;json&amp;type&#x3D;EN2ZH_CN&amp;i&#x3D;Authentication%20Architecture&quot; -H &quot;Accept: application&#x2F;json&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-2-返回的-json-结果">2.1.2 返回的 json 结果</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"EN2ZH_CN"</span><span class="token punctuation">,</span>  <span class="token property">"errorCode"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"elapsedTime"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"translateResult"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"Authentication Architecture"</span><span class="token punctuation">,</span> <span class="token property">"tgt"</span><span class="token operator">:</span> <span class="token string">"认证体系结构"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-通过-python-调用">2.2 通过 python 调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">translate_from_youdao</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">str</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>txt<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">' ,=&amp;/+()'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://fanyi.youdao.com/translate?&amp;doctype=json&amp;type=EN2ZH_CN&amp;i='</span><span class="token operator">+</span>txt    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'translateResult'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tgt'</span><span class="token punctuation">)</span> <span class="token comment"># 有道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">translate_from_youdao<span class="token punctuation">(</span><span class="token string">'Authentication Architecture'</span><span class="token punctuation">)</span> <span class="token comment"># 调用</span><span class="token comment"># 输出"认证体系结构"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Linux (WSL) 子系统如何与Windows通信</title>
      <link href="/news/1677410190368.html"/>
      <url>/news/1677410190368.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-检查网络是否通畅">1. 检查网络是否通畅</h2><h3 id="1-1-通过ipconfig获得WSL的ip地址，如-172-28-30-1">1.1 通过<code>ipconfig</code>获得WSL的ip地址，如 <code>172.28.30.1</code></h3><h3 id="1-2-进入Linux子系统，ping上面这个地址">1.2 进入Linux子系统，<code>ping</code>上面这个地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">172.28</span>.30.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-如果无法ping通-或使用过程中发现网络不通-，则可在Windows系统上通过powershell（管理员启动）运行如下命令，开启Linux-WSL-子系统访问Windows的防火墙">1.3 如果无法<code>ping</code>通(或使用过程中发现网络不通)，则可在Windows系统上通过<code>powershell</code>（管理员启动）运行如下命令，开启Linux (WSL) 子系统访问Windows的防火墙</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-NetFirewallRule</span> <span class="token operator">-</span>DisplayName <span class="token string">"WSL"</span> <span class="token operator">-</span>Direction Inbound  <span class="token operator">-</span>InterfaceAlias <span class="token string">"vEthernet (WSL)"</span>  <span class="token operator">-</span>Action Allow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-获取WSL自动配置的域名">2. 获取WSL自动配置的域名</h2><h3 id="方法1">方法1</h3><ul><li>直接打开以下文件(可记事本打开或命令行查看)，寻找172.28.30.1对应的域名</li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">type C:\Windows\System32\drivers\etc\hosts.ics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法2">方法2</h3><ul><li>通过Linux子系统tracepath任意地址，如</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tracepath baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>则此时域名为命令执行结果中前两行出现的域名</li></ul><h3 id="结果">结果</h3><ul><li>可以发现域名是 <code>example.mshome.net</code> 的形式，<code>example</code>一般为Windows及Linux子系统的主机名。比如，主机名为<code>taissan</code>，那么域名则是 <code>taissan.mshome.net</code>。</li></ul><h2 id="3-Linux子系统访问Windows上的服务">3. Linux子系统访问Windows上的服务</h2><ul><li>Linux子系统访问Windows上的代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://taissan.mshome.net:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Windows访问Linux子系统上的服务">4. Windows访问Linux子系统上的服务</h2><ul><li>直接访问<code>localhost</code>+端口即可，如</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-使用域名访问解决的问题">5. 使用域名访问解决的问题</h2><ul><li>配置域名访问后，后续无需再做配置。防止因电脑重启后wsl的IP变化，使得需要每次重新在Linux子系统中配置IP.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂记】测试Katex的公式支持程度</title>
      <link href="/news/1678109183215.html"/>
      <url>/news/1678109183215.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-测试代数（不支持双层大括号）">1. 测试代数（不支持双层大括号）</h2><ul><li>式子一</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>对于方程形如：</mtext><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设:</mtext><mi>ω</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>+</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mi>ω</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>+</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msup><mi>ω</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>−</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}  \text{对于方程形如：}x^{3}-1=0 \\  \text{设}\text{:}\omega =\frac{-1+\sqrt{3}i}{2} \\  x_{1}=1,x_{2}= \omega =\frac{-1+\sqrt{3}i}{2} \\  x_{3}= \omega ^{2}=\frac{-1-\sqrt{3}i}{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.394em;vertical-align:-2.447em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.947em;"><span style="top:-5.145em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">对于方程形如：</span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.747em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">设</span></span><span class="mord text"><span class="mord">:</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.951em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.447em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>式子二</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msup><mo><mi>x</mi></mo><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mn>1</mn></msub><mo>+</mo><msub><mo><mi>x</mi></mo><mn>2</mn></msub><mo>=</mo><mo>−</mo><mfrac><mi>b</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mn>1</mn></msub><msub><mo><mi>x</mi></mo><mn>2</mn></msub><mo>=</mo><mfrac><mi>c</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}  a\mathop{x}\nolimits^{2}+bx+c=0 \\  \Delta =\mathop{b}\nolimits^{2}-4ac \\  \Delta =\mathop{b}\nolimits^{2}-4ac \\  \mathop{x}\nolimits_{1,2}=\frac{-b\pm \sqrt{\mathop{b}\nolimits^{2}-4ac}}{2a} \\  \mathop{x}\nolimits_{1}+\mathop{x}\nolimits_{2}=-\frac{b}{a} \\  \mathop{x}\nolimits_{1}\mathop{x}\nolimits_{2}=\frac{c}{a}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.5759em;vertical-align:-3.538em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.038em;"><span style="top:-6.2569em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-4.9985em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-2.3211em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0589em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">b</span><span class="mbin mtight">±</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9499em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mop mtight"><span class="mop mathnormal mtight" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.8416em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span></span></span><span style="top:-2.9099em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0901em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.081em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:0.119em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.538em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>注：使用<mark class="hl-label blue">latex(katex)</mark> 时应使用<code>a\mathop&#123;x&#125;\nolimits^&#123;2&#125;+bx+c=0</code>，而不是<code>a\mathop&#123;&#123;x&#125;&#125;\nolimits^&#123;&#123;2&#125;&#125;+bx+c=0</code></li><li>即使用<mark class="hl-label green">单层</mark> 大括号<code>&#123;x&#125;</code>包裹参数，而不是<mark class="hl-label red">双层</mark> 大括号<code>&#123;&#123;x&#125;&#125;</code>包裹参数。</li></ul><h2 id="2-测试几何">2. 测试几何</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>⊂</mo><mi>α</mi><mo separator="true">,</mo><mi>n</mi><mo>⊂</mo><mi>α</mi><mo separator="true">,</mo><mi>m</mi><mo>∩</mo><mi>n</mi><mo>=</mo><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>⊥</mo><mi>m</mi><mo separator="true">,</mo><mi>a</mi><mo>⊥</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><mo>⇒</mo><mi>a</mi><mo>⊥</mo><mi>α</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\left.\begin{matrix}  m \subset \alpha ,n \subset \alpha ,m \cap n=P \\    a \perp m,a \perp n\end{matrix}\right\}\Rightarrow a \perp \alpha\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="3-测试不等式">3. 测试不等式</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>k</mi></msub><msub><mi>b</mi><mi>k</mi></msub><mo fence="true">)</mo></mrow><mrow><mtext> ⁣</mtext><mtext> ⁣</mtext><mn>2</mn></mrow></msup><mo>≤</mo><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>a</mi><mi>k</mi><mn>2</mn></msubsup><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>b</mi><mi>k</mi><mn>2</mn></msubsup><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\left( \sum_{k=1}^n a_k b_k \right)^{\!\!2}\leq\left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3683em;vertical-align:-0.4341em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9342em;"><span style="top:-2.9342em;"><span class="pstrut" style="height:3.0083em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0083em;"><span style="top:-3.2572em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mspace mtight" style="margin-right:-0.1952em;"></span><span class="mspace mtight" style="margin-right:-0.1952em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4341em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="4-测试积分">4. 测试积分</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>ξ</mi><mtext> </mtext><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>ξ</mi><mi>x</mi></mrow></msup><mtext> </mtext><mi mathvariant="normal">d</mi><mi>ξ</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}f(x) = \int_{-\infty}^\infty  \hat f(x)\xi\,e^{2 \pi i \xi x}  \,\mathrm{d}\xi\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.372em;vertical-align:-0.436em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span style="top:-2.9781em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4142em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.0833em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">πi</span><span class="mord mathnormal mtight" style="margin-right:0.04601em;">ξ</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.436em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="5-测试矩阵">5. 测试矩阵</h2><ul><li>矩阵一</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>A</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}A_{m\times n}=  \begin{bmatrix}    a_{11}&amp; a_{12}&amp; \cdots  &amp; a_{1n} \\    a_{21}&amp; a_{22}&amp; \cdots  &amp; a_{2n} \\    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\    a_{m1}&amp; a_{m2}&amp; \cdots  &amp; a_{mn}  \end{bmatrix}  =\left [ a_{ij}\right ]\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.46em;vertical-align:-2.48em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-4.98em;"><span class="pstrut" style="height:4.98em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2583em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:7.4em;"></span><span style="width:0.667em;height:5.400em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='5.400em' viewBox='0 0 667 5400'><path d='M403 1759 V84 H666 V0 H319 V1759 v1800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1800 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.58em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.38em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:7.4em;"></span><span style="width:0.667em;height:5.400em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='5.400em' viewBox='0 0 667 5400'><path d='M347 1759 V0 H0 V84 H263 V1759 v1800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1800 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>矩阵二</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo separator="true">,</mo><mi>B</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>b</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>n</mi><mo>×</mo><mi>s</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>c</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>s</mi></mrow></msub><mo>=</mo><msub><mrow><mo fence="true">[</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>s</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}  A={\left[ a_{ij}\right]_{m \times n}},B={\left[ b_{ij}\right]_{n \times s}} \\    c_{ij}= \sum \limits_{k=1}^{n}a_{ik}b_{kj} \\    C=AB=\left[ c_{ij}\right]_{m \times s}    = \left[ \sum \limits_{k=1}^{n}a_{ik}b_{kj}\right]_{m \times s}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.1478em;vertical-align:-2.8239em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3239em;"><span style="top:-5.9339em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.1884em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.0979em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7362em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.0979em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.6435em;"><span style="top:-1.6482em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1101em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8239em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="6-测试三角">6. 测试三角</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>α</mi><mo>+</mo><mi>sin</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mn>2</mn><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\sin \alpha + \sin \beta =2 \sin \frac{\alpha + \beta}{2}\cos \frac{\alpha - \beta}{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2922em;vertical-align:-0.3961em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8961em;"><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3961em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="7-测试统计">7. 测试统计</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>S</mi><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>N</mi><mi>n</mi></mfrac><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mi>A</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>M</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>A</mi><mi>k</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>M</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>N</mi><mi>n</mi></mfrac><mo fence="true">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}  S= \binom{N}{n},A_{k}=\binom{M}{k}\cdot \binom{N-M}{n-k} \\  P\left ( A_{k}\right ) = \frac{\binom{M}{k}\cdot \binom{N-M}{n-k}}{\binom{N}{n}}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.8457em;vertical-align:-1.6728em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1728em;"><span style="top:-4.7605em;"><span class="pstrut" style="height:3.51em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span><span style="top:-2.8472em;"><span class="pstrut" style="height:3.51em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.51em;"><span style="top:-2.3925em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7125em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4035em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6728em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>P</mi><mrow><mo fence="true">(</mo><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}P \left( \bigcup \limits_{i=1}^{n}A_{i}\right) = \prod \limits_{i=1}^{n}P \left( A_{i}\right)\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4277em;vertical-align:-0.9638em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4638em;"><span style="top:-3.4638em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">⋃</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∏</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9638em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="8-测试数列">8. 测试数列</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mrow><mo fence="true">)</mo><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mrow></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mrow><mo fence="true">)</mo><mo>⋅</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mrow></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\frac{n+1}{n \left( n-1 \left) \cdot 2^{n}\right. \right.}= \frac{1}{\left( n-1 \left) \cdot 2^{n-1}\right. \right.}-\frac{1}{n \cdot 2^{n}}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.4326em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9326em;"><span style="top:-3.0874em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span><span class="mord mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span><span class="mord mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4326em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><mrow><mi>n</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}(1+x)^{n} =1 + \frac{nx}{1!} + \frac{n(n-1)x^{2}}{2!} + \cdots\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4689em;vertical-align:-0.4845em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9845em;"><span style="top:-2.9845em;"><span class="pstrut" style="height:3.1089em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1089em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4845em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="9-测试物理-不支持unicode扩展">9. 测试物理(不支持unicode扩展)</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mstyle mathsize="2.074em"><mo>∯</mo></mstyle><mi mathvariant="double-struck">S</mi></msub><mi mathvariant="bold">D</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>s</mi><mo>=</mo><msub><mi>Q</mi><mi>f</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mstyle mathsize="2.074em"><mo>∯</mo></mstyle><mi mathvariant="double-struck">S</mi></msub><mi mathvariant="bold">B</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>s</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mstyle mathsize="2.074em"><mo>∮</mo></mstyle><mi mathvariant="double-struck">L</mi><mrow></mrow></msubsup><mi mathvariant="bold">E</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>l</mi><mo>=</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="normal">d</mi><msub><mi mathvariant="normal">Φ</mi><mi mathvariant="bold">B</mi></msub></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mstyle mathsize="2.074em"><mo>∮</mo></mstyle><mi mathvariant="double-struck">L</mi><mrow></mrow></msubsup><mi mathvariant="bold">H</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>l</mi><mo>=</mo><msub><mi>I</mi><mi>f</mi></msub><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="normal">d</mi><msub><mi mathvariant="normal">Φ</mi><mi mathvariant="bold">D</mi></msub></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">%此公式需要在设置中开启unicode扩展支持\begin{array}{l}    {\huge \oiint}_\mathbb{S}  \mathbf{D} \cdot\mathrm{d}s= Q_f \\    {\huge \oiint}_\mathbb{S}  \mathbf{B} \cdot\mathrm{d}s= 0 \\    {\huge \oint}_{\mathbb{L}}^{} \mathbf{E} \cdot \mathrm{d}l=-\cfrac{\mathrm{d}\Phi _{\mathbf{B}}}{\mathrm{d}t }  \\    {\huge \oint}_{\mathbb{L}}^{} \mathbf{H} \cdot \mathrm{d}l=I_f+\cfrac{\mathrm{d}\Phi _{\mathbf{D}}}{\mathrm{d}t }\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.419em;vertical-align:-4.4595em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.9595em;"><span style="top:-7.3639em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop vlist-t vlist-t2 sizing reset-size6 size10" style="position:relative;top:-0.0005em;"><span class="vlist-r"><span class="vlist" style="height:0.805em;"><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;">∬</span></span><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="overlay" style="height:0.499em;width:0.957em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.957em' height='0.499em' style='width:0.957em' viewBox='0 0 957 499' preserveAspectRatio='xMinYMin'><path d='M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2zm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.860.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.306em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2021em;"><span style="top:-2.0157em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbb mtight">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6843em;"><span></span></span></span></span></span></span><span class="mord mathbf">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.01em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop vlist-t vlist-t2 sizing reset-size6 size10" style="position:relative;top:-0.0005em;"><span class="vlist-r"><span class="vlist" style="height:0.805em;"><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;">∬</span></span><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="overlay" style="height:0.499em;width:0.957em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.957em' height='0.499em' style='width:0.957em' viewBox='0 0 957 499' preserveAspectRatio='xMinYMin'><path d='M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2zm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.860.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.306em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2021em;"><span style="top:-2.0157em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbb mtight">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6843em;"><span></span></span></span></span></span></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.6561em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop op-symbol small-op sizing reset-size6 size10" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∮</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4225em;"><span style="top:-2.0154em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">L</span></span></span></span><span style="top:-4.1225em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6846em;"><span></span></span></span></span></span></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3303em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span></span></span></span></span><span style="top:-0.3005em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop op-symbol small-op sizing reset-size6 size10" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∮</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4225em;"><span style="top:-2.0154em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">L</span></span></span></span><span style="top:-4.1225em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6846em;"><span></span></span></span></span></span></span><span class="mord mathbf">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3303em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.4595em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="10-测试化学-不支持mhchem扩展">10. 测试化学(不支持mhchem扩展)</h2><ul><li>源latex代码如下:</li></ul><p>\begin{array}{l}\ce{Zn^2+  <=>[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  <=>[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$}\end{array}</p><ul><li><a href="https://www.latexlive.com">公式模板来源</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 混元圣记 </category>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> katex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂记】使用Github访问Google</title>
      <link href="/news/1677410182753.html"/>
      <url>/news/1677410182753.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-任意仓库打开Codespaces">1. 任意仓库打开<code>Codespaces</code></h2><h2 id="2-打开Codespaces的终端（页面类似于vscode）">2. 打开<code>Codespaces</code>的终端（页面类似于<code>vscode</code>）</h2><h2 id="3-运行如下命令">3. 运行如下命令</h2><h3 id="3-1-切换到root权限">3.1 切换到<code>root</code>权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-运行docker应用">3.2 运行<code>docker</code>应用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6080</span>:80 <span class="token parameter variable">-v</span> /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新窗口打开弹出的网页">4. 新窗口打开弹出的网页</h2><h2 id="5-在新的页面中打开firefox浏览器（其他浏览器貌似无法使用），即可使用">5. 在新的页面中打开<code>firefox</code>浏览器（其他浏览器貌似无法使用），即可使用</h2>]]></content>
      
      
      <categories>
          
          <category> 混元圣记 </category>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CVE-2021-42694】Trojan Source木马源攻击</title>
      <link href="/news/1677410067156.html"/>
      <url>/news/1677410067156.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-RLO-LRI-ΓC«Γuª-和-PDI-LRI-Γu⌐Γuª-使用">1. <code>RLO LRI('ΓÇ«Γüª')</code> 和 <code>PDI LRI('Γü⌐Γüª')</code> 使用</h2><h3 id="1-1-使用DOS-CP437-编码">1.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">access_level <span class="token operator">=</span> <span class="token string">"user"</span><span class="token keyword">if</span> access_level <span class="token operator">!=</span> <span class="token string">'noneΓÇ«Γüª'</span><span class="token punctuation">:</span> <span class="token comment"># Check if admin Γü⌐Γüª' and access_level != 'user</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are an admin."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-使用utf-8-编码转换后（vscode：-Reopen-with-Encoding）">1.2 使用<code>utf-8</code> 编码转换后（vscode： Reopen with Encoding）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">access_level <span class="token operator">=</span> <span class="token string">"user"</span><span class="token keyword">if</span> access_level <span class="token operator">!=</span> <span class="token string">'none‮⁦'</span><span class="token punctuation">:</span> <span class="token comment"># Check if admin ⁩⁦' and access_level != 'user</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are an admin."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RLI使用-Γuº">2. RLI使用<code>('Γüº')</code></h2><h3 id="2-1-使用DOS-CP437-编码">2.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">bank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'alice'</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">subtract_funds</span><span class="token punctuation">(</span>account<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Subtract funds from bank account then Γüº'''</span> <span class="token punctuation">;</span><span class="token keyword">return</span>    bank<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> amount    <span class="token keyword">return</span>subtract_funds<span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-使用utf-8-编码转换后">2.2 使用<code>utf-8</code> 编码转换后</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">bank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'alice'</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">subtract_funds</span><span class="token punctuation">(</span>account<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Subtract funds from bank account then ⁧'''</span> <span class="token punctuation">;</span><span class="token keyword">return</span>    bank<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> amount    <span class="token keyword">return</span>subtract_funds<span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-╨¥-西里尔字母H-使用">3. <code>'╨¥'</code>(西里尔字母H)使用</h2><h3 id="3-1-使用DOS-CP437-编码">3.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> say╨¥ello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye, World!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>say╨¥ello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用utf-8-编码转换后-╨¥-变为类似H的字符">3.2 使用<code>utf-8</code> 编码转换后 <code>╨¥</code> 变为类似<code>H</code>的字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> sayНello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye, World!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>sayНello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考">参考</h2><table><thead><tr><th>Abbreviation</th><th>Code Point</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>LRE</td><td>U+202A</td><td>Left-to-Right Embedding</td><td>尝试将以下文本视为从左到右</td></tr><tr><td>RLE</td><td>U+202B</td><td>Right-to-Left Embedding</td><td>尝试将以下文本视为从右到左</td></tr><tr><td>LRO</td><td>U+202D</td><td>Left-to-Right Override</td><td>强制将以下文本视为从左到右</td></tr><tr><td>RLO</td><td>U+202E</td><td>Right-to-Left Override</td><td>强制将以下文本视为从右到左</td></tr><tr><td>LRI</td><td>U+2066</td><td>Left-to-Right Isolate</td><td>强制将后续文本视为从左到右，而不影响相邻文本</td></tr><tr><td>RLI</td><td>U+2067</td><td>Right-to-Left Isolate</td><td>强制将后续文本视为从右到左，而不影响相邻文本</td></tr><tr><td>FSI</td><td>U+2068</td><td>First Strong Isolate</td><td>强制按照下一个字符指示的方向处理后续文本</td></tr><tr><td>PDF</td><td>U+202C</td><td>Pop Directional Formatting</td><td>终止最近的 LRE.RLE.LRO 或 RLO</td></tr><tr><td>PDI</td><td>U+2069</td><td>Pop Directional Isolate</td><td>终止最近的 LRI 或 RLI</td></tr></tbody></table><p><a href="https://trojansource.codes/trojan-source.pdf">trojan-source论文</a></p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】pip 离线安装第三方库及依赖</title>
      <link href="/news/1677407864745.html"/>
      <url>/news/1677407864745.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-已安装的模块名称导出到文件">1. 已安装的模块名称导出到文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">></span>requirements.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-在线下载依赖">2. 在线下载依赖</h2><h3 id="2-1-直接下载对应包">2.1 直接下载对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip download <span class="token parameter variable">-d</span> D:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-通过requirements-txt直接下载对应包">2.2 通过requirements.txt直接下载对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip download <span class="token parameter variable">-d</span> D:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package <span class="token parameter variable">-r</span> requirements.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-将在线下载的包复制到离线电脑上">3. 将在线下载的包复制到离线电脑上</h2><ul><li>本文中从在线电脑上的路径<code>D:\python\pip\package</code> 下的包拷贝到离线电脑的<code>E:\python\pip\package</code>路径下</li></ul><h2 id="4-在离线电脑上安装已导出的模块，指定模块名称或指定包含所有模块列表的文件">4. 在离线电脑上安装已导出的模块，指定模块名称或指定包含所有模块列表的文件</h2><h3 id="4-1-直接安装对应包">4.1 直接安装对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --no-index --find-links<span class="token operator">=</span>E:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package <span class="token parameter variable">-r</span> requirements<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-通过requirements-txt直接安装对应包">4.2 通过<code>requirements.txt</code>直接安装对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --no-index --find-links<span class="token operator">=</span>E:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
