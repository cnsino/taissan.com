<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Rust Cookbook系列】七 数据库</title>
      <link href="/news/1681570373600.html"/>
      <url>/news/1681570373600.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SQLite">1. SQLite</h2><p>  需要安装<code>rusqlite</code>库，可通过<code>cargo add rusqlite --features bundled</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rusqlite</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.29.0"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"bundled"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-创建-SQLite-数据库">1.1 创建 SQLite 数据库</h3><p>  使用<code>rusqlite</code> <code>crate</code> 打开 <code>SQLite</code> 数据库连接。如果数据库不存在，<code>Connection::open</code>方法将创建它。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// use rusqlite::NO_PARAMS; 已弃用：改用空数组;stmt.execute（NO_PARAMS） => stmt.execute（[]）</span><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token string">"create table if not exists cat_colors (             id integer primary key,             name text not null unique         )"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token string">"create table if not exists cats (             id integer primary key,             name text not null,             color_id integer not null references cat_colors(id)         )"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>生成cats.db文件</li></ul><h3 id="1-2-数据插入和查询">1.2 数据插入和查询</h3><p>  <code>Connection::open</code> 将打开在前一章节实例中创建的数据库 <code>cats</code> 的连接。下面的实例使用 <code>Connection</code> 的 <code>execute</code> 方法将数据插入 <code>cat_colors</code> 和 <code>cats</code> 两张表中。首先，将数据插入到 <code>cat_colors</code> 表中。随后，使用 <code>Connection</code> 的 <code>last_insert_rowid</code> 方法来获取 <code>cat_colors</code> 表最后插入记录的 <code>id</code>。当向 <code>cats</code> 表中插入数据时，使用此 <code>id</code>。然后，使用 <code>prepare</code> 方法准备执行 <code>select</code> 查询操作，该方法提供 <code>statement</code> 结构体。最后，使用 <code>statement</code> 的 <code>query_map</code> 方法执行查询。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Cat</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> cat_colors <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cat_colors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Tigger"</span><span class="token punctuation">,</span> <span class="token string">"Sammy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cat_colors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Black"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"Oreo"</span><span class="token punctuation">,</span> <span class="token string">"Biscuit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>color<span class="token punctuation">,</span> catnames<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>cat_colors <span class="token punctuation">&#123;</span>        conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            <span class="token string">"INSERT INTO cat_colors (name) values (?1)"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>color<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> last_id<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">last_insert_rowid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> cat <span class="token keyword">in</span> catnames <span class="token punctuation">&#123;</span>            conn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                <span class="token string">"INSERT INTO cats (name, color_id) values (?1, ?2)"</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>cat<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>last_id<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>        <span class="token string">"SELECT c.name, cc.name from cats c         INNER JOIN cat_colors cc         ON cc.id = c.color_id;"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cats <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">query_map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>row<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>            name<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> cat <span class="token keyword">in</span> cats <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"找到猫 &#123;:?&#125;"</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Oreo"</span>, color: <span class="token string">"Black"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Biscuit"</span>, color: <span class="token string">"Black"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Tigger"</span>, color: <span class="token string">"Blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>找到猫 Ok<span class="token punctuation">(</span>Cat <span class="token punctuation">&#123;</span> name: <span class="token string">"Sammy"</span>, color: <span class="token string">"Blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-事务处理">1.3 事务处理</h3><p>  <code>Connection::open</code> 将打开来自前述实例的数据库 <code>cats.db</code>。使用 <code>Connection::transaction</code> 开始事务，除非使用 <code>Transaction::commit</code> 显式提交，否则事务将回滚。在下面的实例中，颜色表对颜色名称具有唯一性约束。当尝试插入重复的颜色时，事务会回滚。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rusqlite<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> conn <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"cats.db"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">successful_tx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> conn<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">rolled_back_tx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">successful_tx</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tx <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"delete from cat_colors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">rolled_back_tx</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tx <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"delete from cat_colors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into cat_colors (name) values (?1)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token string">"lavender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: SqliteFailure<span class="token punctuation">(</span>Error <span class="token punctuation">&#123;</span> code: ConstraintViolation, extended_code: <span class="token number">787</span> <span class="token punctuation">&#125;</span>, Some<span class="token punctuation">(</span><span class="token string">"FOREIGN KEY constraint failed"</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Postgres-暂未测试">2. Postgres (暂未测试)</h2><p>  需要安装<code>postgres</code>库，可通过<code>cargo add postgres</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">postgres</span> <span class="token punctuation">=</span> <span class="token string">"0.19.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-1-Postgres-数据库中创建表">2.1 Postgres 数据库中创建表</h3><p>  <code>Postgres</code> 数据库中，使用 <code>postgres</code> <code>crate</code> 创建表。<br><code>Client::connect</code>用于连接到现有数据库。本实例中使用 <code>Client::connect</code> 格式化连接数据库的 URL 字符串。假设存在一个数据库：名为 <code>library</code>，用户名为 <code>postgres</code>，密码为 <code>postgres</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"postgresql://postgres:postgres@localhost/library"</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// let mut client = Client::connect("host=localhost user=postgres", NoTls)?; //待测，官方连接数据库示例</span>        client<span class="token punctuation">.</span><span class="token function">batch_execute</span><span class="token punctuation">(</span><span class="token string">"        CREATE TABLE IF NOT EXISTS author (            id              SERIAL PRIMARY KEY,            name            VARCHAR NOT NULL,            country         VARCHAR NOT NULL            )    "</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">batch_execute</span><span class="token punctuation">(</span><span class="token string">"        CREATE TABLE IF NOT EXISTS book  (            id              SERIAL PRIMARY KEY,            title           VARCHAR NOT NULL,            author_id       INTEGER NOT NULL REFERENCES author            )    "</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-数据插入和查询">2.2 数据插入和查询</h3><p>  下述实例中使用 <code>Client</code> 的 <code>execute</code> 方法将数据插入到 <code>author</code> 表中。然后，使用 <code>Client</code> 的 <code>query</code> 方法查询 <code>author</code> 表中的数据。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Author</span> <span class="token punctuation">&#123;</span>    _id<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    country<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"postgresql://postgres:postgres@localhost/library"</span><span class="token punctuation">,</span>                                     <span class="token class-name">NoTls</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> authors <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Chinua Achebe"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Nigeria"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Rabindranath Tagore"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Anita Nair"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>authors <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>            _id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> key<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            country<span class="token punctuation">:</span> value<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>                <span class="token string">"INSERT INTO author (name, country) VALUES ($1, $2)"</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>author<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>author<span class="token punctuation">.</span>country<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT id, name, country FROM author"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>            _id<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            country<span class="token punctuation">:</span> row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Author &#123;&#125; is from &#123;&#125;"</span><span class="token punctuation">,</span> author<span class="token punctuation">.</span>name<span class="token punctuation">,</span> author<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-数据聚合">2.3 数据聚合</h3><p>  下述实例按照降序列出了<a href="https://github.com/MuseumofModernArt/collection/blob/master/Artists.csv">美国纽约州现代艺术博物馆</a>数据库中首批 7999 位艺术家的国籍。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">postgres<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Client</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token class-name">NoTls</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Nation</span> <span class="token punctuation">&#123;</span>    nationality<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    count<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>        <span class="token string">"postgresql://postgres:postgres@127.0.0.1/moma"</span><span class="token punctuation">,</span>        <span class="token class-name">NoTls</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> client<span class="token punctuation">.</span><span class="token function">query</span>     <span class="token punctuation">(</span><span class="token string">"SELECT nationality, COUNT(nationality) AS count     FROM artists GROUP BY nationality ORDER BY count DESC"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> <span class="token punctuation">(</span>nationality<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">></span><span class="token punctuation">)</span>         <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> row<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> nationality<span class="token punctuation">.</span><span class="token function">is_some</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">.</span><span class="token function">is_some</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> nation <span class="token operator">=</span> <span class="token class-name">Nation</span><span class="token punctuation">&#123;</span>                nationality<span class="token punctuation">:</span> nationality<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                count<span class="token punctuation">:</span> count<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; &#123;&#125;"</span><span class="token punctuation">,</span> nation<span class="token punctuation">.</span>nationality<span class="token punctuation">,</span> nation<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】六 数据结构</title>
      <link href="/news/1681480076711.html"/>
      <url>/news/1681480076711.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-位域">1. 位域</h2><h3 id="1-1-定义并操作位域风格的类型">1.1 定义并操作位域风格的类型</h3><p>  需要安装<code>bitflags</code>库，可通过<code>cargo add bitflags</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">bitflags</span> <span class="token punctuation">=</span> <span class="token string">"2.1.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  如下实例在 <code>bitflags!</code> 宏的帮助下创建类型安全的位域类型 <code>MyFlags</code>，并为其实现基本的清理操作（<code>clear</code> 方法）以及 <code>Display trait</code>。随后，展示了基本的按位操作和格式化。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bitflags<span class="token punctuation">::</span></span>bitflags<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token comment">// 定义 MyFlags 枚举类型，表示一个 32 位二进制标志位</span><span class="token macro property">bitflags!</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[derive(Clone, Copy, PartialEq, Eq, Debug )]</span>    <span class="token keyword">struct</span> <span class="token type-definition class-name">MyFlags</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_A</span>       <span class="token operator">=</span> <span class="token number">0b00000001</span><span class="token punctuation">;</span> <span class="token comment">// 第一位标志位表示 FLAG_A</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_B</span>       <span class="token operator">=</span> <span class="token number">0b00000010</span><span class="token punctuation">;</span> <span class="token comment">// 第二位标志位表示 FLAG_B</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_C</span>       <span class="token operator">=</span> <span class="token number">0b00000100</span><span class="token punctuation">;</span> <span class="token comment">// 第三位标志位表示 FLAG_C</span>        <span class="token keyword">const</span> <span class="token constant">FLAG_ABC</span>     <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// FLAG_ABC 表示 FLAG_A、FLAG_B 和 FLAG_C 的集合</span>                           <span class="token operator">|</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token operator">|</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实现 clear 方法，清空标志位</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">bits_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 将 MyFlags 对应的 u32 类型全部置为 0</span>        <span class="token keyword">self</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">MyFlags</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实现 fmt::Display trait，使得 MyFlags 类型可以被格式化输出</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"&#123;:032b&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将 MyFlags 转换为 32 位二进制数输出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 枚举类型可以像整数一样进行按位运算</span>    <span class="token keyword">let</span> e1 <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">;</span> <span class="token comment">// e1 包含 FLAG_A 和 FLAG_C</span>    <span class="token keyword">let</span> e2 <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">;</span> <span class="token comment">// e2 包含 FLAG_B 和 FLAG_C</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">|</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_ABC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 和 e2 的并集包含 FLAG_ABC</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">&amp;</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 和 e2 的交集包含 FLAG_C</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">-</span> e2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e1 减去 e2 的差集包含 FLAG_A</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">!</span>e2<span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e2 的补集不包含 FLAG_A</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> flags <span class="token operator">=</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_ABC</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"00000000000000000000000000000111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 MyFlags 为 32 位二进制数</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> flags<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"00000000000000000000000000000000"</span> <span class="token comment">// 清空 MyFlags，输出 0</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MyFlags(FLAG_B)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 MyFlags 枚举类型</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_A</span> <span class="token operator">|</span> <span class="token class-name">MyFlags</span><span class="token punctuation">::</span><span class="token constant">FLAG_B</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"MyFlags(FLAG_A | FLAG_B)"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验成功</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Ubuntu离线安装MiniKube</title>
      <link href="/news/1681466985497.html"/>
      <url>/news/1681466985497.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-工具包准备">1. 工具包准备</h2><p>  安装机器架构 Ubuntu16.04 AMD64<br>  docker的安装过程详见文章：<a href="https://www.taissan.com/news/1678175207403.html">【如何百科】Ubuntu 安装最新 docker</a></p><h3 id="1-1-Minekube-下载">1.1 Minekube 下载</h3><ul><li>官方二进制下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64/">下载链接</a></li><li>官方 Deb 包下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb/">下载链接</a></li><li>官方 RPM 包下载地址<a href="https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm/">下载链接</a></li></ul><h3 id="1-2-helm-下载">1.2 helm 下载</h3><ul><li>官方二进制包下载地址<a href="https://get.helm.sh/helm-v3.11.3-linux-amd64.tar.gz">下载链接</a></li><li>官方 Deb 包下载地址<a href="https://helm.baltorepo.com/stable/debian/packages/helm/releases/3.11.2-1/files/helm_3.11.2-1_amd64.deb/">下载链接</a></li></ul><h3 id="1-3-kubernetes-相关命令工具下载-至少需要下载以下三个工具">1.3 kubernetes 相关命令工具下载,至少需要下载以下三个工具</h3><p>  本文以 v1.26.3 版本为主。<a href="https://www.downloadkubernetes.com/">下载地址</a></p><ul><li>kubectl</li><li>kubelet</li><li>kubeadm</li></ul><h2 id="2-minikube-镜像准备">2. minikube 镜像准备</h2><h3 id="2-1-下载-minikube-必需的-9-个镜像">2.1 下载 minikube 必需的 9 个镜像</h3><ul><li><code>gcr.io/k8s-minikube/kicbase:v0.0.39</code></li><li><code>gcr.io/k8s-minikube/storage-provisioner:v5</code></li><li><code>registry.k8s.io/kube-apiserver:v1.26.3</code></li><li><code>registry.k8s.io/kube-controller-manager:v1.26.3</code></li><li><code>registry.k8s.io/kube-scheduler:v1.26.3</code></li><li><code>registry.k8s.io/kube-proxy:v1.26.3</code></li><li><code>registry.k8s.io/etcd:3.5.6-0</code></li><li><code>registry.k8s.io/pause:3.9</code></li><li><code>registry.k8s.io/coredns/coredns:v1.9.3</code></li></ul><h3 id="2-2-部署-minikube-dashboard-的-2-个镜像-可选">2.2 部署 minikube dashboard 的 2 个镜像(可选)</h3><ul><li><code>kubernetesui/dashboard:v2.7.0</code></li><li><code>kubernetesui/metrics-scraper:v1.0.8</code></li></ul><h3 id="2-3-镜像下载方法">2.3 镜像下载方法</h3><ul><li>(1). 通过 WSL 的 <code>docker pull</code> 命令下载并导出为 tar 包</li><li>(2). 通过 python 脚本下载 tar 包(仅支持 docker v2 清单的镜像)，脚本参考：<a href="https://github.com/NotGlop/docker-drag">https://github.com/NotGlop/docker-drag</a></li></ul><h2 id="3-minikube-部署">3. minikube 部署</h2><ul><li>将之前下载的所有镜像 tar 包及工具包上传到主机上</li></ul><h3 id="3-1-安装所有镜像">3.1 安装所有镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> *.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-安装所需工具-root-权限">3.2 安装所需工具(root 权限)</h3><ul><li>安装 minikube(deb 包)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> minikube_latest_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 helm(deb 包)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> helm_3.11.2-1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 kubectl(二进制)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-o</span> root <span class="token parameter variable">-g</span> root <span class="token parameter variable">-m</span> 0755 kubectl /usr/local/bin/kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-为-minikube-新建用户">3.3 为 minikube 新建用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建一个minikube用户</span>adduser minikube<span class="token comment"># 新建一个docker用户组</span><span class="token function">groupadd</span> <span class="token function">docker</span><span class="token comment"># 将minikube添加到docker组</span><span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> minikube<span class="token comment"># 将当前用户添加到该docker组(root)</span><span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span><span class="token comment"># 重启docker</span><span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-使用-minikube-用户启动-minikube。需要重启-2-次">3.4 使用 minikube 用户启动 minikube。需要重启 2 次</h3><ul><li>第一次启动时，会在用户目录下创建一个<code>.minikube/cache/linux/amd64/v1.26.3</code>的目录,但由于检测不到<code>kubectl</code>等工具，故会以失败告终。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将之前下载的 3 个命令工具(<code>kubectl,kubelet,kubeadm</code>) 拷贝到用户目录的 <code>.minikube/cache/linux/amd64/v1.26.3</code> 目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> tools/* .minikube/cache/linux/amd64/v1.26.3/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行第二次启动</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">minikube start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>待系统输出以下内容则说明 minikube 安装完成</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Done<span class="token operator">!</span> kubectl is now configured to use <span class="token string">"minikube"</span> cluster and <span class="token string">"default"</span> namespace by default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】五 密码学</title>
      <link href="/news/1681401209555.html"/>
      <url>/news/1681401209555.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-散列（哈希）">1. 散列（哈希）</h2><h3 id="1-1-计算文件的-SHA-256-摘要">1.1 计算文件的 SHA-256 摘要</h3><p>  需要安装<code>ring</code>,<code>data-encoding</code>,<code>error-chain</code> 库，可通过<code>cargo add ring</code>,<code>cargo add data-encoding</code> ,<code>cargo add error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">data-encoding</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">ring</span> <span class="token punctuation">=</span> <span class="token string">"0.16.20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  以下实例中，先创建文件，写入一些数据。然后使用 <code>digest::Context</code> 计算文件内容的 <code>SHA-256</code> 摘要 <code>digest::Digest</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token constant">HEXUPPER</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>digest<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token constant">SHA256</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Decode</span><span class="token punctuation">(</span><span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token class-name">DecodeError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">sha256_digest</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">:</span> <span class="token class-name">Read</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Digest</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> context <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"file.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> output <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">write!</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"我们将生成此文本的摘要"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> digest <span class="token operator">=</span> <span class="token function">sha256_digest</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"SHA-256 摘要是 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SHA-256 摘要是 765E79C9E2677BCA5A050906AF635703BAC1A725EC63701285A907A263182EC2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-使用-HMAC-摘要对消息进行签名和验证">1.2. 使用 HMAC 摘要对消息进行签名和验证</h3><p>  使用 <code>ring::hmac</code> 创建字符串的签名 <code>hmac::Signature</code>，然后验证签名是否正确。HMAC运算利用hash算法，以一个消息M和一个密钥K作为输入，生成一个定长的消息摘要作为输出。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Unspecified</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>rand<span class="token punctuation">::</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>hmac<span class="token punctuation">,</span> rand<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Unspecified</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> key_value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">SystemRandom</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rng<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> key_value<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token class-name">Key</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token constant">HMAC_SHA256</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">"合法而非常重要的信息。"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> signature <span class="token operator">=</span> <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">hmac<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signature<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>验证.</li></ul><h2 id="2-加密">2. 加密</h2><h3 id="2-1-使用-PBKDF2-对密码进行加密（salt）和散列（hash）运算">2.1 使用 <code>PBKDF2</code> 对密码进行加密（<code>salt</code>）和散列（<code>hash</code>）运算</h3><p>  对于通过 <code>PBKDF2</code> 密钥派生函数 <code>pbkdf2::derive</code> 生成的加密（加盐算法）密码，使用 <code>ring::pbkdf2</code> 进行散列（哈希）运算，使用 <code>pbkdf2::verify</code> 验证散列（哈希）运算是否正确。<code>salt</code> 值是使用 <code>SecureRandom::fill</code> 生成的，<code>salt</code> 字节数组被其安全生成的随机数填充。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 导入需要用到的库</span><span class="token keyword">use</span> <span class="token namespace">data_encoding<span class="token punctuation">::</span></span><span class="token constant">HEXUPPER</span><span class="token punctuation">;</span> <span class="token comment">// HEXUPPER 数据编码库</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Unspecified</span><span class="token punctuation">;</span> <span class="token comment">// Ring 库中的错误类型 Unspecified</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>rand<span class="token punctuation">::</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span> <span class="token comment">// 一个安全的随机数生成器</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>digest<span class="token punctuation">,</span> pbkdf2<span class="token punctuation">,</span> rand<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// Ring 库中的摘要、PBKDF2 和随机数模块</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">;</span> <span class="token comment">// 非零的 u32 类型</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Unspecified</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义常量 CREDENTIAL_LEN，并赋值为 SHA512 输出的长度</span>    <span class="token keyword">const</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token namespace">digest<span class="token punctuation">::</span></span><span class="token constant">SHA512_OUTPUT_LEN</span><span class="token punctuation">;</span>    <span class="token comment">// 定义 NonZeroU32 类型变量 n_iter，赋值为 100000</span>    <span class="token keyword">let</span> n_iter <span class="token operator">=</span> <span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">100_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建系统随机数生成器 rng</span>    <span class="token keyword">let</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">SystemRandom</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义长度为 CREDENTIAL_LEN 的数组 salt，并用随机数生成器 rng 填充</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> salt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rng<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> salt<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 定义字符串变量 password，并赋值为 "Guess Me If You Can!"</span>    <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">"Guess Me If You Can!"</span><span class="token punctuation">;</span>    <span class="token comment">// 定义长度为 CREDENTIAL_LEN 的数组 pbkdf2_hash，并使用 PBKDF2 算法和 salt 以及 password 的字节数组填充该数组</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> pbkdf2_hash <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token constant">CREDENTIAL_LEN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">derive</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token keyword">mut</span> pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印 salt 和 pbkdf2_hash 的十六进制编码</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Salt: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>salt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"PBKDF2 hash: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">HEXUPPER</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 PBKDF2 算法、salt 和 password 的字节数组验证 pbkdf2_hash 是否正确</span>    <span class="token keyword">let</span> should_succeed <span class="token operator">=</span> <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义字符串变量 wrong_password，并赋值为 "Definitely not the correct password"</span>    <span class="token keyword">let</span> wrong_password <span class="token operator">=</span> <span class="token string">"Definitely not the correct password"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 PBKDF2 算法、salt 和 wrong_password 的字节数组验证 pbkdf2_hash 是否正确</span>    <span class="token keyword">let</span> should_fail <span class="token operator">=</span> <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token function">verify</span><span class="token punctuation">(</span>        <span class="token namespace">pbkdf2<span class="token punctuation">::</span></span><span class="token constant">PBKDF2_HMAC_SHA512</span><span class="token punctuation">,</span> <span class="token comment">// 使用 HMAC-SHA512 算法</span>        n_iter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>salt<span class="token punctuation">,</span>        wrong_password<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbkdf2_hash<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 assert! 宏判断 should_succeed 是否成功</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>should_succeed<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 assert! 宏判断 should_fail 是否失败</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>should_fail<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果程序没有发生错误</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下，没有报错，说明验证成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Salt: CDC7242F11C2AEF4F5091F88CDD63C2D07871ACA0B13A8E9AB458DFF9F2BC7B441F5F250A9C81FB4E006286E08504F0AD7698AF8EC8F03D58AB99706051D1BAEPBKDF2 hash: 6F547321949A89DA4A91BAD3FB1E5ACE48D0CAA57453221A82BD6CA4EA0E840FEFF2756070CB81978EBC9AFAB6017B050BF8A1D4909888470BCFA31494FBEE30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】四 并行/并发</title>
      <link href="/news/1680865445147.html"/>
      <url>/news/1680865445147.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-显式线程">1. 显式线程</h2><h3 id="1-1-生成短期线程">1.1 生成短期线程</h3><p>  需要安装<code>crossbeam</code>库，可通过<code>cargo add crossbeam</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">crossbeam</span> <span class="token punctuation">=</span> <span class="token string">"0.8.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>crossbeam</code> crate 为并发和并行编程提供了数据结构和函数。<code>Scope::spawn</code> 生成一个新的作用域线程，该线程确保传入 <code>crossbeam::scope</code> 函数的闭包在返回之前终止，这意味着您可以从调用的函数中引用数据。</p><ul><li>本实例将数组一分为二，并在不同的线程中并行计算。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token function">find_max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">find_max</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">THRESHOLD</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">split_at</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> thread_l <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">find_max</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> thread_r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">find_max</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> max_l <span class="token operator">=</span> thread_l<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> max_r <span class="token operator">=</span> thread_r<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>max_l<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max_r<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>校验</li></ul><h3 id="1-2-创建并发的数据管道">1.2. 创建并发的数据管道</h3><p>  在章节1.1基础上再次安装<code>crossbeam-channel</code>库，可通过<code>cargo add crossbeam-channel</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">crossbeam</span> <span class="token punctuation">=</span> <span class="token string">"0.8.2"</span><span class="token key property">crossbeam-channel</span> <span class="token punctuation">=</span> <span class="token string">"0.5.7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  使用 <code>crossbeam</code> 和 <code>crossbeam-channel</code> 两个 crate 创建了一个并行的管道。管道有一个数据源和一个数据接收器，数据在从源到接收器的过程中由两个工作线程并行处理。<br>  使用容量由 <code>crossbeam_channel::bounded</code> 分配的有界信道。生产者必须在它自己的线程上，因为它产生的消息比工作线程处理它们的速度快（因为工作线程休眠了半秒）——这意味着生产者将在对 <code>[crossbeam_channel::Sender::send]</code> 调用时阻塞半秒，直到其中一个工作线程对信道中的数据处理完毕。也请注意，信道中的数据由最先接收它的任何工作线程调用，因此每个消息都传递给单个工作线程，而不是传递给两个工作线程。</p><p>  通过迭代器 <code>crossbeam_channel::Receiver::iter</code>方法从信道读取数据，这将会造成阻塞，要么等待新消息，要么直到信道关闭。因为信道是在 <code>crossbeam::scope</code>范围内创建的，我们必须通过 <code>drop</code> 手动关闭它们，以防止整个程序阻塞工作线程的 <code>for</code> 循环。可以将对 <code>drop</code> 的调用视作不再发送消息的信号。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">crossbeam_channel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span>bounded<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>send1<span class="token punctuation">,</span> recv1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>send2<span class="token punctuation">,</span> recv2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_msgs <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_workers <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 生产者线程</span>        s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>                send1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"发送来源 &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 关闭信道 —— 这是退出的必要条件</span>            <span class="token comment">// for 巡海在工作线程中</span>            <span class="token function">drop</span><span class="token punctuation">(</span>send1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 由 2 个线程并行处理</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_workers <span class="token punctuation">&#123;</span>            <span class="token comment">// 从数据源发送数据到接收器，接收器接收数据</span>            <span class="token keyword">let</span> <span class="token punctuation">(</span>sendr<span class="token punctuation">,</span> recvr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>send2<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recv1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 在不同的线程中衍生工人</span>            s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 接收数据，直到信道关闭前</span>                <span class="token keyword">for</span> msg <span class="token keyword">in</span> recvr<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"工作线程 &#123;:?&#125; 接受到 &#123;&#125;. 并予以百倍奉还"</span><span class="token punctuation">,</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sendr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭信道，否则接收器不会关闭</span>        <span class="token comment">// 退出 for 循坏</span>        <span class="token function">drop</span><span class="token punctuation">(</span>send2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收器</span>        <span class="token keyword">for</span> msg <span class="token keyword">in</span> recv2<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"返回到接收器 &#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">发送来源 <span class="token number">0</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 接受到 <span class="token number">0</span>. 并予以百倍奉还工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 接受到 <span class="token number">1</span>. 并予以百倍奉还返回到接收器 <span class="token number">0</span>返回到接收器 <span class="token number">100</span>发送来源 <span class="token number">1</span>发送来源 <span class="token number">2</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 接受到 <span class="token number">2</span>. 并予以百倍奉还发送来源 <span class="token number">3</span>返回到接收器 <span class="token number">200</span>工作线程 ThreadId<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 接受到 <span class="token number">3</span>. 并予以百倍奉还返回到接收器 <span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-在两个线程间传递数据">1.3 在两个线程间传递数据</h3><p>  在单生产者、单消费者（SPSC）环境中使用 <code>crossbeam-channel</code>。我们构建的生成短期线程实例中，使用 <code>crossbeam::scope</code> 和 <code>Scope::spawn</code> 来管理生产者线程。在两个线程之间，使用 <code>crossbeam_channel::unbounded</code> 信道交换数据，这意味着可存储消息的数量没有限制。生产者线程在消息之间休眠半秒。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread<span class="token punctuation">,</span> time<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span>unbounded<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>snd<span class="token punctuation">,</span> rcv<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">unbounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n_msgs <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token namespace">crossbeam<span class="token punctuation">::</span></span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>                snd<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>n_msgs <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> msg <span class="token operator">=</span> rcv<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"收到 &#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">收到 <span class="token number">0</span>收到 <span class="token number">1</span>收到 <span class="token number">2</span>收到 <span class="token number">3</span>收到 <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-保持全局可变状态">1.4 保持全局可变状态</h3><p>  使用 <code>lazy_static</code> 声明全局状态。<code>lazy_static</code> 创建了一个全局可用的 <code>static ref</code>，它需要 <code>Mutex</code> 来允许变化（请参阅 <code>RwLock</code>）。在 <code>Mutex</code> 的包裹下，保证了状态不能被多个线程同时访问，从而防止出现争用情况。必须获取 <code>MutexGuard</code>，方可读取或更改存储在 <code>Mutex</code> 中的值。</p><p>此小节需要安装<code>lazy_static</code>库，可通过<code>cargo add lazy_static</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">lazy_static</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token macro property">lazy_static!</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">FRUIT</span><span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span>fruit<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> db <span class="token operator">=</span> <span class="token constant">FRUIT</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Failed to acquire MutexGuard"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"梨"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">FRUIT</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Failed to acquire MutexGuard"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"葡萄"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>: 苹果<span class="token number">1</span>: 橘子<span class="token number">2</span>: 梨<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-对所有-iso-文件的-SHA256-值并发求和">1.5 对所有 <code>iso</code> 文件的 <code>SHA256</code> 值并发求和</h3><p>  计算了当前目录中每个扩展名为 <code>iso</code> 的文件的 <code>SHA256</code> 哈希值。线程池生成的线程数与使用 <code>num_cpus::get</code> 获取的系统内核数相等。<code>Walkdir::new</code> 遍历当前目录，并调用 <code>execute</code> 来执行读取和计算 <code>SHA256</code> 哈希值的操作。</p><p>此小节需要安装多个库</p><ul><li><code>threadpool</code>库，可通过<code>cargo add threadpool</code> 命令安装</li><li><code>num_cpus</code>库，可通过<code>cargo add num_cpus</code> 命令安装</li><li><code>walkdir</code>库，可通过<code>cargo add walkdir</code> 命令安装</li><li><code>ring</code>库，可通过<code>cargo add ring</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">ring</span> <span class="token punctuation">=</span> <span class="token string">"0.16.20"</span><span class="token key property">walkdir</span> <span class="token punctuation">=</span> <span class="token string">"2.3.3"</span><span class="token key property">num_cpus</span> <span class="token punctuation">=</span> <span class="token string">"1.15.0"</span><span class="token key property">threadpool</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">walkdir<span class="token punctuation">::</span></span><span class="token class-name">WalkDir</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">BufReader</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">threadpool<span class="token punctuation">::</span></span><span class="token class-name">ThreadPool</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span></span>channel<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ring<span class="token punctuation">::</span>digest<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token constant">SHA256</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Verify the iso extension</span><span class="token keyword">fn</span> <span class="token function-definition function">is_iso</span><span class="token punctuation">(</span>entry<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> entry<span class="token punctuation">.</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">to_string_lossy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"iso"</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">compute_digest</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">>></span><span class="token punctuation">(</span>filepath<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Digest</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buf_reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filepath<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> context <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">SHA256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> buf_reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">num_cpus<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"/home/user/Downloads"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">follow_links</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_iso</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> digest <span class="token operator">=</span> <span class="token function">compute_digest</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法发送数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token function">drop</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> rx<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>sha<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span> sha<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果类似于如下结果：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SHA256:72e880f84a8cbc734160ca3b043c91b455ae5d8877d0d5afe15fa2894e177f07 <span class="token string">"/home/user/Downloads/ubuntu.iso"</span>SHA256:2da6c248348f5ff0ee06e57222d6cd7ff2a4c652195db7325ee8327e44175f53 <span class="token string">"/home/user/Downloads/debian.iso"</span>SHA256:6ea82342f0db613ce21a0f6df2e59ec2f0c9b05ed4e50f9288305c0d492b42b0 <span class="token string">"/home/user/Downloads/win11.iso"</span>SHA256:cb4ca11618c4e5a24f7a6bcff2eb2a14453f4d802772374386f69d710568aef8 <span class="token string">"/home/user/Downloads/win12.iso"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-将绘制分形的线程分派到线程池">1.6 将绘制分形的线程分派到线程池</h3><p>  通过从朱莉娅集绘制分形来生成图像，该集合具有用于分布式计算的线程池。使用 <code>ImageBuffer::new</code> 为指定宽度和高度的输出图像分配内存，<code>Rgb::from_channels</code> 信道则计算输出图像的 <code>RGB</code> 像素值。使用 <code>ThreadPool</code> 创建线程池，线程池中的线程数量和使用 <code>num_cpus::get</code> 获取的系统内核数相等。<code>ThreadPool::execute</code> 将每个像素作为单独的作业接收。<code>mpsc::channel</code> 信道接收作业，<code>Receiver::recv</code>接收器则检索作业。<code>ImageBuffer::put_pixel</code>处理数据，设置像素颜色。最后，<code>ImageBuffer::save</code> 将图像存储为 <code>output.png</code>。</p><p>此小节需要在1.5小节基础上安装如下两个库</p><ul><li><code>num</code>库，可通过<code>cargo add num</code> 命令安装</li><li><code>image</code>库，可通过<code>cargo add image</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">num_cpus</span> <span class="token punctuation">=</span> <span class="token string">"1.15.0"</span><span class="token key property">threadpool</span> <span class="token punctuation">=</span> <span class="token string">"1.8.1"</span><span class="token key property">num</span> <span class="token punctuation">=</span> <span class="token string">"0.4.0"</span><span class="token key property">image</span> <span class="token punctuation">=</span> <span class="token string">"0.24.6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">ImageBuffer</span><span class="token punctuation">,</span> <span class="token class-name">Rgb</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">num<span class="token punctuation">::</span>complex<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>channel<span class="token punctuation">,</span> <span class="token class-name">RecvError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">threadpool<span class="token punctuation">::</span></span><span class="token class-name">ThreadPool</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">MpscRecv</span><span class="token punctuation">(</span><span class="token class-name">RecvError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将强度值转换为 RGB 值的函数</span><span class="token comment">// 基于 http://www.efg2.com/Lab/ScienceAndEngineering/Spectra.htm</span><span class="token keyword">fn</span> <span class="token function-definition function">wavelength_to_rgb</span><span class="token punctuation">(</span>wavelength<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Rgb</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> wave <span class="token operator">=</span> wavelength <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">match</span> wavelength <span class="token punctuation">&#123;</span>        <span class="token number">380</span><span class="token punctuation">..=</span><span class="token number">439</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">440</span><span class="token punctuation">..=</span><span class="token number">489</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">440</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">490</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">440</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">490</span><span class="token punctuation">..=</span><span class="token number">509</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">490</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">510</span><span class="token punctuation">..=</span><span class="token number">579</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">510</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">580</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">510</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">580</span><span class="token punctuation">..=</span><span class="token number">644</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">645</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">645</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">580</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">645</span><span class="token punctuation">..=</span><span class="token number">780</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> factor <span class="token operator">=</span> <span class="token keyword">match</span> wavelength <span class="token punctuation">&#123;</span>        <span class="token number">380</span><span class="token punctuation">..=</span><span class="token number">419</span> <span class="token operator">=></span> <span class="token number">0.3</span> <span class="token operator">+</span> <span class="token number">0.7</span> <span class="token operator">*</span> <span class="token punctuation">(</span>wave <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">420</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">380</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">701</span><span class="token punctuation">..=</span><span class="token number">780</span> <span class="token operator">=></span> <span class="token number">0.3</span> <span class="token operator">+</span> <span class="token number">0.7</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">780</span><span class="token punctuation">.</span> <span class="token operator">-</span> wave<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">780</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token number">700</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">normalize</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Rgb::from_channels(r, g, b, 0) // 自 0.24.0 后已弃用：使用像素的构造函数</span>    <span class="token class-name">Rgb</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//与原书不同</span><span class="token punctuation">&#125;</span><span class="token comment">// 将茱莉亚集距离映射为强度值</span><span class="token keyword">fn</span> <span class="token function-definition function">julia</span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token class-name">Complex</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">></span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> max_iter<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> width <span class="token operator">=</span> width <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> height <span class="token operator">=</span> height <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> z <span class="token operator">=</span> <span class="token class-name">Complex</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// scale and translate the point to image coordinates</span>        re<span class="token punctuation">:</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> width<span class="token punctuation">,</span>        im<span class="token punctuation">:</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> height<span class="token punctuation">)</span> <span class="token operator">/</span> height<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>max_iter <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> z<span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2.0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        z <span class="token operator">=</span> z <span class="token operator">*</span> z <span class="token operator">+</span> c<span class="token punctuation">;</span>        i <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token punctuation">&#125;</span><span class="token comment">// 规格 RGB 颜色值范围内的强度值</span><span class="token keyword">fn</span> <span class="token function-definition function">normalize</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span> factor<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u8</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>color <span class="token operator">*</span> factor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">powf</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> img <span class="token operator">=</span> <span class="token class-name">ImageBuffer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> iterations <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.156</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">num_cpus<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>height <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>width <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token function">julia</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> pixel <span class="token operator">=</span> <span class="token function">wavelength_to_rgb</span><span class="token punctuation">(</span><span class="token number">380</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">400</span> <span class="token operator">/</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法发送数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span> <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">put_pixel</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> _ <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"output.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>将获得一张图片</li></ul><p><img src="/imgs/posts/pic-1680865445147.png" alt=""></p><h2 id="2-数据并行">2. 数据并行</h2><h3 id="2-1-并行改变数组中元素">2.1 并行改变数组中元素</h3><p>  实例使用了 <code>rayon</code> 库，这是一个 Rust 程序设计语言的数据并行库。<code>rayon</code> 为任何并行可迭代的数据类型提供 <code>par_iter_mut</code> 方法。这是一个类迭代器的链，可以对链内的数据并行计算。</p><ul><li><code>rayon</code>库，可通过<code>cargo add rayon</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">par_iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>p<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>p <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>-1, <span class="token number">6</span>, <span class="token number">8</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-并行测试集合中任意或所有的元素是否匹配给定断言">2.2 并行测试集合中任意或所有的元素是否匹配给定断言</h3><p>  如何使用 <code>rayon::any</code> 和 <code>rayon::all</code> 方法，这两个方法是分别与 <code>std::any</code> 和 <code>std::all</code> 相对应的并行方法。<code>rayon::any</code> 并行检查迭代器的任意元素是否与断言匹配，并在找到一个匹配的元素时就返回。<code>rayon::all</code> 并行检查迭代器的所有元素是否与断言匹配，并在找到不匹配的元素时立即返回。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在不被2整除的数(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均被2整除</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在大于8的数(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均小于或等于8</span>    vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在不被2整除的数</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均被2整除(取反)</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在大于8的数</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否所有数均小于或等于8(取反)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-3-使用给定断言并行搜索项">2.3 使用给定断言并行搜索项</h3><p>  使用 <code>rayon::find_any</code> 和 <code>par_iter</code> 并行搜索 <code>vector</code> 集合，以查找满足指定闭包中的断言的元素。如果有多个元素满足 <code>rayon::find_any</code> 闭包参数中定义的断言，<code>rayon</code> 将返回搜索发现的第一个元素，但不一定是 <code>vector</code> 集合的第一个元素。实例中闭包的参数是对引用的引用（<code>&amp;&amp;x</code>）</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f2 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f3 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find_any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>f3 <span class="token operator">></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-4-对-vector-并行排序">2.4 对 <code>vector</code> 并行排序</h3><p>  首先分配空字符串 <code>vector</code>；然后，通过 <code>par_iter_mut().for_each</code>并行对 <code>vector</code> 填充随机值。尽管存在多种选择，可以对可枚举数据类型进行排序，但 <code>par_sort_unstable</code> 通常比稳定排序（相同的值排序后相对顺序不变）算法快。</p><ul><li>在之前基础上安装<code>rand</code>库，可通过<code>cargo add rand</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token class-name">Alphanumeric</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread_rng<span class="token punctuation">,</span> <span class="token class-name">Rng</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">par_iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>p<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> rng<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token class-name">Alphanumeric</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//与原书不同</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">par_sort_unstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>进行校验</li></ul><h3 id="2-5-Map-reduce-并行计算">2.5 <code>Map-reduce</code> 并行计算</h3><p>  使用 <code>rayon::filter</code>、<code>rayon::map</code>，以及 <code>rayon::reduce</code> 计算 <code>Person</code> 对象中年龄超过 30 岁的那些人的平均年龄。<code>rayon::filter</code> 过滤集合中满足给定断言的元素。<code>rayon::map</code> 对每个元素执行一次计算，创建一个新的迭代；<code>rayon::reduce</code> 执行新的计算，基于前一次的 <code>reduce</code> 计算结果和当前元素累加在一起。另外可以查看 <code>rayon::sum</code>，它与本实例中的 <code>reduce</code> 计算具有相同的结果。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">&#123;</span>    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Person</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_over_30 <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum_over_30 <span class="token operator">=</span> v        <span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">,</span> y<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> alt_sum_30<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> avg_over_30 <span class="token operator">=</span> sum_over_30 <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> num_over_30<span class="token punctuation">;</span>    <span class="token keyword">let</span> alt_avg_over_30 <span class="token operator">=</span> alt_sum_30 <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> num_over_30<span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>avg_over_30 <span class="token operator">-</span> alt_avg_over_30<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f32</span><span class="token punctuation">::</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//EPSILON: 0.00000011920929</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"30岁以上的人的平均年龄是 &#123;&#125;"</span><span class="token punctuation">,</span> avg_over_30<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">30</span>岁以上的人的平均年龄是 <span class="token number">36.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-并行生成-png-缩略图">2.6 并行生成 <code>png</code> 缩略图</h3><p>  为当前目录中的所有 <code>.png</code> 图像文件生成缩略图，然后将生成的缩略图保存在一个名为 <code>thumbnails</code> 的新文件夹中。<code>glob::glob_with</code> 在当前目录中查找 <code>jpeg</code> 图像文件，<code>rayon</code> 通过 <code>par_iter</code> 方法调用 <code>DynamicImage::resize</code>，并行地调整图像大小。</p><ul><li>在之前基础上安装<code>glob</code>库，可通过<code>cargo add glob</code> 命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">image</span> <span class="token punctuation">=</span> <span class="token string">"0.24.6"</span><span class="token key property">rayon</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span class="token key property">glob</span> <span class="token punctuation">=</span> <span class="token string">"0.3.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span>create_dir_all<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token class-name">ChainedError</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>glob_with<span class="token punctuation">,</span> <span class="token class-name">MatchOptions</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">imageops<span class="token punctuation">::</span></span><span class="token class-name">FilterType</span><span class="token punctuation">,</span> <span class="token class-name">ImageError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>    foreign_links <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token class-name">ImageError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Glob</span><span class="token punctuation">(</span><span class="token namespace">glob<span class="token punctuation">::</span></span><span class="token class-name">PatternError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> options<span class="token punctuation">:</span> <span class="token class-name">MatchOptions</span> <span class="token operator">=</span> <span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> files<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">glob_with</span><span class="token punctuation">(</span><span class="token string">"*.png"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token namespace">error_chain<span class="token punctuation">::</span></span><span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">"在当前目录中找不到 .png 文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> thumb_dir <span class="token operator">=</span> <span class="token string">"thumbnails"</span><span class="token punctuation">;</span>    <span class="token function">create_dir_all</span><span class="token punctuation">(</span>thumb_dir<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"将 &#123;&#125; 缩略图保存到 '&#123;&#125;'..."</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thumb_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> image_failures<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> files        <span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>path<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token function">make_thumbnail</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> thumb_dir<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">chain_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> path<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image_failures        <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">display_chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; thumbnails 保存成功"</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> image_failures<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">make_thumbnail</span><span class="token operator">&lt;</span><span class="token constant">PA</span><span class="token punctuation">,</span> <span class="token constant">PB</span><span class="token operator">></span><span class="token punctuation">(</span>original<span class="token punctuation">:</span> <span class="token constant">PA</span><span class="token punctuation">,</span> thumb_dir<span class="token punctuation">:</span> <span class="token constant">PB</span><span class="token punctuation">,</span> longest_edge<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">where</span>    <span class="token constant">PA</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token constant">PB</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token function">open</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> file_path <span class="token operator">=</span> thumb_dir<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>img        <span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>longest_edge<span class="token punctuation">,</span> longest_edge<span class="token punctuation">,</span> <span class="token class-name">FilterType</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>cargo run</code>(处理1.6小节生成的图片)输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将 <span class="token number">1</span> 缩略图保存到 <span class="token string">'thumbnails'</span><span class="token punctuation">..</span>.<span class="token number">1</span> thumbnails 保存成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── output.png <span class="token comment"># 原始文件</span>└── thumbnails    └── output.png <span class="token comment"># 生成后的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】三 压缩</title>
      <link href="/news/1680011142405.html"/>
      <url>/news/1680011142405.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用-tar-包">1. 使用 <code>tar</code> 包</h2><p>  需要安装<code>flate2</code>和<code>tar</code>库，可通过<code>cargo add flate2</code> 和<code>cargo add tar</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span class="token key property">tar</span> <span class="token punctuation">=</span> <span class="token string">"0.4.38"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-1-压缩目录为-tar-包">1.1 压缩目录为 <code>tar</code> 包</h3><p>  压缩 <code>/root/testtar</code>目录内的内容到 <code>archive.tar.gz</code> 压缩包中。创建一个用 <code>GzEncoder</code> 和 <code>tar::Builder</code> 包裹的 <code>File</code>。使用 <code>Builder::append_dir_all</code>，将 <code>/root/testtar</code>目录内的内容递归添加到 <code>backup/code</code>路径下的归档文件中。在将数据写入压缩包 <code>archive.tar.gz</code> 之前，<code>GzEncoder</code> 负责清晰地将数据压缩。</p><ul><li><code>/root/testtar</code>目录结构如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/testtar/├── Cargo.lock_copy├── Cargo.toml_copy└── src-rust    └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细代码如下：</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>write<span class="token punctuation">::</span></span><span class="token class-name">GzEncoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span></span><span class="token class-name">Compression</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tar_gz <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"archive.tar.gz"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> enc <span class="token operator">=</span> <span class="token class-name">GzEncoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar_gz<span class="token punctuation">,</span> <span class="token class-name">Compression</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tar <span class="token operator">=</span> <span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">;</span>    tar<span class="token punctuation">.</span><span class="token function">append_dir_all</span><span class="token punctuation">(</span><span class="token string">"backup/code"</span><span class="token punctuation">,</span> <span class="token string">"/root/testtar"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,在当前目录下生成一个名为<code>archive.tar.gz</code>的压缩包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>目录结构如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── Cargo.lock├── Cargo.toml├── archive.tar.gz├── src│   └── main.rs└── target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-解压-tar-包">1.2. 解压 <code>tar</code> 包</h3><p>  从当前工作目录中的压缩包 <code>archive.tar.gz</code>，解压（<code>GzDecoder</code>）和提取（<code>Archive::unpack</code>）所有文件，并放在<code>copy</code>目录下。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>read<span class="token punctuation">::</span></span><span class="token class-name">GzDecoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"archive.tar.gz"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tar_gz <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tar <span class="token operator">=</span> <span class="token class-name">GzDecoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar_gz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">Archive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>    archive<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string">"./copy/"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,解压到<code>copy</code>目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>目录结构如下,可以看到目录包含<code>backup/code</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">copy/└── backup    └── code        ├── Cargo.lock_copy        ├── Cargo.toml_copy        └── src-rust            └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-从路径移除前缀时，解压-tar-包">1.3 从路径移除前缀时，解压 <code>tar</code> 包</h3><p>  循环遍历 <code>Archive::entries</code>。使用 <code>Path::strip_prefix</code> 移除指定的路径前缀（bundle/logs）。最终，通过 <code>Entry::unpack</code>提取 <code>tar::Entry</code>（<code>tar</code> 包中的内容）。此块代码需要安装<code>error-chain</code>库，通过<code>error-chain</code> 命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">error-chain</span> <span class="token punctuation">=</span> <span class="token string">"0.12.4"</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span class="token key property">tar</span> <span class="token punctuation">=</span> <span class="token string">"0.4.38"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">error_chain<span class="token punctuation">::</span></span>error_chain<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>read<span class="token punctuation">::</span></span><span class="token class-name">GzDecoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">PathBuf</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">tar<span class="token punctuation">::</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token macro property">error_chain!</span> <span class="token punctuation">&#123;</span>  foreign_links <span class="token punctuation">&#123;</span>    <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StripPrefixError</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">StripPrefixError</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"archive.tar.gz"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">Archive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">GzDecoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">"backup/code"</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"提取了以下文件:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    archive        <span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> entry<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">PathBuf</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> path <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">strip_prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"> &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下,解压到<code>copy</code>目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>输出结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">提取了以下文件:<span class="token operator">></span> src-rust<span class="token operator">></span> src-rust/main.rs<span class="token operator">></span> Cargo.lock_copy<span class="token operator">></span> Cargo.toml_copy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压到当前目录的目录结构如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── Cargo.lock_copy├── Cargo.toml_copy├── src-rust│   └── main.rs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】二 命令行</title>
      <link href="/news/1679492996891.html"/>
      <url>/news/1679492996891.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-参数解析">1. 参数解析</h2><p>  需要安装<code>clap</code>库，可通过<code>cargo add clap --features derive</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">clap</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"4.1.11"</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"derive"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-解析命令行参数">1.1 解析命令行参数</h3><p>  此应用程序使用 <code>clap</code> 构建器样式描述其命令行界面的结构。文档还提供了另外两种可用的方法去实例化应用程序。在构建器样式中，<code>short</code> 和 <code>long</code> 选项控制用户将要键入的标志；<code>short</code> 标志看起来像 <code>-f</code>，long 标志看起来像 <code>--file</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Arg</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token class-name">Command</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"命令行-测试"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"0.1.0"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"Hackerman Jones &lt;hckrmnjones@hack.gov>"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">"参数解析教学"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>            <span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">short</span><span class="token punctuation">(</span><span class="token char">'f'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>                <span class="token comment">//  .takes_value(true)</span>                <span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token string">"A cool file"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>            <span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">short</span><span class="token punctuation">(</span><span class="token char">'n'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span>                <span class="token comment">//  .takes_value(true)</span>                <span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token string">"Five less than your favorite number"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">get_matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> binding <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> myfile <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"传递的文件是: &#123;&#125;"</span><span class="token punctuation">,</span> myfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_str <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get_one</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> num_str <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"不知道你最喜欢的数字是什么。"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">match</span> s<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"你喜欢的数字是 &#123;&#125;."</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"那不是一个数字! &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行命令如下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run -- <span class="token parameter variable">-f</span> abc.txt <span class="token parameter variable">-n</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">传递的文件是: abc.txt你喜欢的数字是 <span class="token number">105</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-ANSI-终端">2. <code>ANSI</code> 终端</h2><p>  需要安装<code>ansi_term</code>库，可通过<code>cargo add ansi_term</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">ansi_term</span> <span class="token punctuation">=</span> <span class="token string">"0.12.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>ansi_term</code> 中有两种主要的数据结构：<code>ANSIString</code> 和 <code>Style</code>。<code>Style</code> 包含样式信息：颜色，是否粗体文本，或者是否闪烁，或者其它样式。还有 <code>Colour</code> 变量，代表简单的前景色样式。<code>ANSIString</code> 是与 <code>Style</code> 配对的字符串。</p><h3 id="2-1-打印彩色文本到终端">2.1 打印彩色文本到终端</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Colour</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"This is &#123;&#125; in color, &#123;&#125; in color and &#123;&#125; in color"</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Red</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Blue</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Green</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">This is 红色 <span class="token keyword">in</span> color, 蓝色 <span class="token keyword">in</span> color and 绿色 <span class="token keyword">in</span> color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-终端中的粗体文本">2.2 终端中的粗体文本</h3><p>  对于比简单的前景色变化更复杂的事情，代码需要构造 <code>Style</code> 结构体。<code>Style::new()</code> 创建结构体，并链接属性。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Style</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; and 这不是"</span><span class="token punctuation">,</span> <span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是加粗"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这是加粗 and 这不是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-终端中的粗体和彩色文本">2.3 终端中的粗体和彩色文本</h3><p>  <code>Colour</code> 模块实现了许多类似 <code>Style</code> 的函数，并且可以链接方法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Colour</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">ansi_term<span class="token punctuation">::</span></span><span class="token class-name">Style</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"&#123;&#125;, &#123;&#125; and &#123;&#125;"</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Yellow</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是黄色的"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Style</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是加粗的"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Colour</span><span class="token punctuation">::</span><span class="token class-name">Yellow</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token string">"这是黄色并加粗的"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这是黄色的, 这是加粗的 and 这是黄色并加粗的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】async和await使用</title>
      <link href="/news/1678864283156.html"/>
      <url>/news/1678864283156.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用的库-库-httpx-可通过-pip-install-httpx-命令安装">1. 使用的库(库 <code>httpx</code> 可通过 <code>pip install httpx</code> 命令安装)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-async-和-await-的普通使用">2. <code>async</code> 和 <code>await</code> 的普通使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_other</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_other<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-async-和-await-调用库-httpx">3. <code>async</code> 和 <code>await</code> 调用库 <code>httpx</code></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_httpx</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_httpx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> httpx<span class="token punctuation">.</span>AsyncClient<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_httpx<span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_httpx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_other<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运行时长: %s 秒'</span><span class="token operator">%</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-详细情况">4. 详细情况</h2><h3 id="4-1-详细代码">4.1 详细代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_httpx</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_httpx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> httpx<span class="token punctuation">.</span>AsyncClient<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_httpx<span class="token punctuation">(</span>client<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_other</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_other<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_httpx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_other<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运行时长: %s 秒'</span><span class="token operator">%</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-运行输出结果">4.2 运行输出结果</h3><pre class="line-numbers language-none"><code class="language-none">&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-httpx&#x2F;0.23.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root&#x3D;1-641168d8-29511e7271300606309ff8b9&#39;&#125;, &#39;origin&#39;: &#39;106.120.122.135&#39;, &#39;url&#39;: &#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;&#125;&#123;&#39;cookies&#39;: &#123;&#125;&#125;&#123;&#39;uuid&#39;: &#39;fd8c2608-7b3e-47f9-8aec-0c31299771a7&#39;&#125;&#123;&#39;Content-Length&#39;: &#39;87&#39;, &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;, &#39;freeform&#39;: &#39;&#39;&#125;https:&#x2F;&#x2F;httpbin.org&#x2F;gethttps:&#x2F;&#x2F;httpbin.org&#x2F;uuidhttps:&#x2F;&#x2F;httpbin.org&#x2F;cookieshttps:&#x2F;&#x2F;httpbin.org&#x2F;response-headers?freeform&#x3D;运行时长: 12.626903533935547 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他事项">5. 其他事项</h2><p>  文中使用<code>httpx</code>进行异步请求，如果使用<code>aiohttp</code>(<code>通过pip install aiohttp</code>命令安装)进行异步请求时，使用<code>loop.close()</code>关闭事件循环时会抛出异常<code>raise RuntimeError('Event loop is closed')</code>【Python 版本 3.9】。相关代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_asyncio</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test_asyncio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/uuid'</span><span class="token punctuation">,</span> <span class="token string">'https://httpbin.org/response-headers?freeform='</span><span class="token punctuation">]</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>fetch_asyncio<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">]</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">return</span> responses<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 其他流程</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    responses <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>test_asyncio<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 其他流程</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-运行报错结果">5.1 运行报错结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception ignored in: <span class="token operator">&lt;</span>function _ProactorBasePipeTransport.__del__ at 0x00000118E6D784C<span class="token operator"><span class="token file-descriptor important">0</span>></span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio\proactor_events.py"</span>, line <span class="token number">116</span>, <span class="token keyword">in</span> __del__    self.close<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio\proactor_events.py"</span>, line <span class="token number">108</span>, <span class="token keyword">in</span> close    self._loop.call_soon<span class="token punctuation">(</span>self._call_connection_lost, None<span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio<span class="token entity" title="\b">\b</span>ase_events.py"</span>, line <span class="token number">746</span>, <span class="token keyword">in</span> call_soon    self._check_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"C:\Program Files\Python39\lib<span class="token entity" title="\a">\a</span>syncio<span class="token entity" title="\b">\b</span>ase_events.py"</span>, line <span class="token number">510</span>, <span class="token keyword">in</span> _check_closed    raise RuntimeError<span class="token punctuation">(</span><span class="token string">'Event loop is closed'</span><span class="token punctuation">)</span>RuntimeError: Event loop is closed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust Cookbook系列】一 算法</title>
      <link href="/news/1678889342364.html"/>
      <url>/news/1678889342364.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成随机值">1. 生成随机值</h2><p>  需要安装<code>rand</code>库，可通过<code>cargo add rand</code>命令安装</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-生成随机数">1.1 生成随机数</h3><p>  在随机数生成器 <code>rand::Rng</code> 的帮助下，通过 <code>rand::thread_rng</code> 生成随机数。可以开启多个线程，每个线程都有一个初始化的生成器。整数在其类型范围内均匀分布，浮点数是从 <code>0</code>均匀分布到 <code>1</code>，但不包括 <code>1</code>。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n1<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n2<span class="token punctuation">:</span> <span class="token keyword">u16</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u8: &#123;&#125;"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u16: &#123;&#125;"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 u32: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 i32: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机生成 float: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机生成 u8: <span class="token number">158</span>随机生成 u16: <span class="token number">26703</span>随机生成 u32: <span class="token number">2989669353</span>随机生成 i32: <span class="token parameter variable">-1944070083</span>随机生成 float: <span class="token number">0.6281595400384855</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-生成范围内随机数">1.2 生成范围内随机数</h3><p>  使用 <code>Rng::gen_range</code>，在半开放的 <code>[0, 10)</code> 范围内（不包括 <code>10</code>）生成一个随机值。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"整型Integer: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"浮点型Float: &#123;&#125;"</span><span class="token punctuation">,</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">..</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">整型Integer: <span class="token number">7</span>浮点型Float: <span class="token number">4.609263483162893</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  使用 <code>Uniform</code> 模块可以得到均匀分布的值。下述代码和上述代码具有相同的效果，但在相同范围内重复生成数字时，下述代码性能可能会更好。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Uniform</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> die <span class="token operator">=</span> <span class="token class-name">Uniform</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> throw <span class="token operator">=</span> die<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"掷骰子: &#123;&#125;"</span><span class="token punctuation">,</span> throw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> throw <span class="token operator">==</span> <span class="token number">6</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">掷骰子: <span class="token number">3</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">2</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">1</span>掷骰子: <span class="token number">5</span>掷骰子: <span class="token number">4</span>掷骰子: <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-生成给定分布随机数">1.3 生成给定分布随机数</h3><p>  默认情况下，随机数在 <code>rand</code> crate 中是均匀分布。<code>rand_distr</code>(可通过<code>cargo add rand_distr</code> 安装) crate 提供其它的分布类型。如要使用，首先实例化一个分布，然后在随机数生成器<code>rand::Rng</code> 的帮助下，使用 <code>Distribution::sample</code> 从该分布中进行采样。如下是一个使用正态（<code>Normal</code>）分布的实例</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span class="token key property">rand_distr</span> <span class="token punctuation">=</span> <span class="token string">"0.4.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand_distr<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Normal</span><span class="token punctuation">,</span> <span class="token class-name">NormalError</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span>thread_rng<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">NormalError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> normal <span class="token operator">=</span> <span class="token class-name">Normal</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 来自 N(2, 9) 分布"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4.025748774397368</span> 来自 N<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">9</span><span class="token punctuation">)</span> 分布<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-生成自定义类型随机值">1.4 生成自定义类型随机值</h3><p>  随机生成一个元组 <code>(i32, bool, f64)</code> 和用户定义类型为 <code>Point</code> 的变量。为 <code>Standard</code> 实现 <code>Distribution</code> <code>trait</code>，以允许其随机生成。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Distribution</span><span class="token punctuation">,</span> <span class="token class-name">Standard</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Distribution</span><span class="token operator">&lt;</span><span class="token class-name">Point</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">Standard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">sample</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">:</span> <span class="token class-name">Rng</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> rng<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>rand_x<span class="token punctuation">,</span> rand_y<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>            x<span class="token punctuation">:</span> rand_x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> rand_y<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rand_tuple <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rand_point<span class="token punctuation">:</span> <span class="token class-name">Point</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机元组: &#123;:?&#125;"</span><span class="token punctuation">,</span> rand_tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机坐标: &#123;:?&#125;"</span><span class="token punctuation">,</span> rand_point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机元组: <span class="token punctuation">(</span>-410099798, true, <span class="token number">0.3339881538362096</span><span class="token punctuation">)</span>随机坐标: Point <span class="token punctuation">&#123;</span> x: <span class="token number">1211748610</span>, y: <span class="token parameter variable">-959131956</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-5-从一组字母数字字符生成随机密码">1.5 从一组字母数字字符生成随机密码</h3><p>  随机生成一个给定长度的 <code>ASCII</code> 字符串，范围为 <code>A-Z</code>，<code>a-z</code>，<code>0-9</code>，使用字母数字样本</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>thread_rng<span class="token punctuation">,</span> <span class="token class-name">Rng</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>distributions<span class="token punctuation">::</span></span><span class="token class-name">Alphanumeric</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rand_string<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sample_iter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Alphanumeric</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">::</span>from<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"随机密码: &#123;&#125;"</span><span class="token punctuation">,</span> rand_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">随机密码: bksgkrXebcPo3ZsW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-从一组用户定义字符创建随机密码">1.6 从一组用户定义字符创建随机密码</h3><p>  使用用户自定义的字节字符串，使用 <code>gen_range</code> 函数，随机生成一个给定长度的 <code>ASCII</code> 字符串</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">CHARSET</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\                            abcdefghijklmnopqrstuvwxyz\                            0123456789)(*&amp;^%$#@!~"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PASSWORD_LEN</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">PASSWORD_LEN</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> idx <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">CHARSET</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">CHARSET</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">char</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"指定字符随机密码: &#123;&#125;"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序输出结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">指定字符随机密码: Rz<span class="token operator">!</span>eVvWN<span class="token punctuation">)</span>Xg5OYae<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Vector-排序">2. <code>Vector</code> 排序</h2><h3 id="2-1-整数-Vector-排序">2.1 整数 <code>Vector</code> 排序</h3><p>  通过 <code>vec::sort</code> 对一个整数 <code>Vector</code> 进行排序。另一种方法是使用 <code>vec::sort_unstable</code>，后者运行速度更快一些，但不保持相等元素的顺序。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Vector-排序">2.2 <code>Vector</code> 排序</h3><p>  对于<code>f32</code> 或 <code>f64</code> 的 <code>vector，可以使用</code> <code>vec::sort_by</code> 和 <code>PartialOrd::partial_cmp</code> 对其进行排序</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.15</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">1.123</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span><span class="token function">partial_cmp</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.123</span><span class="token punctuation">,</span> <span class="token number">1.15</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-结构体-Vector-排序">2.3 结构体 <code>Vector</code> 排序</h3><p>  依据自然顺序（按名称和年龄），对具有 <code>name</code> 和 <code>age</code> 属性的 <code>Person</code> 结构体 <code>Vector</code> 排序。为了使 <code>Person</code> 可排序，需要添加<code>traits</code>：<code>PartialEq</code>。这样也可以使用 <code>vec:sort_by</code> 方法自定义比较函数，如按照年龄排序。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug, PartialEq)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    salary<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> salary<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> people <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 根据 name 值对 people 进行排序</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根据 age 值对 people 进行排序(从小到大)</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// // 根据 salary 值对 people 进行排序(从大到小)</span>    people<span class="token punctuation">.</span><span class="token function">sort_by</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> b<span class="token punctuation">.</span>salary<span class="token punctuation">.</span><span class="token function">partial_cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>        people<span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Zoe"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">9483.54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6433.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Al"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2433.64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
            <tag> rustcookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】2023-03-13-压缩数据和解压数据</title>
      <link href="/news/1678714773864.html"/>
      <url>/news/1678714773864.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用compress压缩文件">1. 使用compress压缩文件</h2><h3 id="1-1-使用到的库flate2-配置文件Cargo-toml中添加-或通过cargo-add-flate2-添加">1.1 使用到的库<code>flate2</code>,配置文件Cargo.toml中添加(或通过cargo add flate2 添加)</h3><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">flate2</span> <span class="token punctuation">=</span> <span class="token string">"1.0.25"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-使用库flate2压缩代码">1.2 使用库<code>flate2</code>压缩代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span>write<span class="token punctuation">::</span></span><span class="token class-name">GzEncoder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">flate2<span class="token punctuation">::</span></span><span class="token class-name">Compression</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span>args<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span>copy<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">BufReader</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在real_main函数中处理真正的程序</span>    <span class="token comment">//为了干净的结束和退出，在主函数中使用它</span>    <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Usage: `source` `target`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> <span class="token class-name">GzEncoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">Compression</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> encoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> output <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"源文件大小: &#123;:?&#125;"</span><span class="token punctuation">,</span>        input<span class="token punctuation">.</span><span class="token function">get_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"目标文件大小: &#123;:?&#125;"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"压缩时间: &#123;:?&#125;"</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-使用方式（以book-pdf为例）">1.3 使用方式（以book.pdf为例）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run book.pdf book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-运行输出结果">1.4 运行输出结果</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">源文件大小: <span class="token number">2307697</span>目标文件大小: <span class="token number">1885921</span>压缩时间: <span class="token number">1</span>.703851963s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-使用decompress解压文件-以解压zip格式文件为例">2. 使用decompress解压文件(以解压<code>zip</code>格式文件为例)</h2><h3 id="2-1-使用到的库zip-配置文件Cargo-toml中添加-或通过cargo-add-zip添加">2.1 使用到的库<code>zip</code>,配置文件<code>Cargo.toml</code>中添加(或通过<code>cargo add zip</code>添加)</h3><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">zip</span> <span class="token punctuation">=</span> <span class="token string">"0.6.4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-使用库解压代码">2.2 使用库解压代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">zip<span class="token punctuation">::</span></span><span class="token class-name">ZipArchive</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在real_main函数中处理真正的程序</span>    <span class="token comment">//为了干净的结束和退出，在主函数中使用它</span>    <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">real_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个名为 args 的向量来收集用户在 CLI 中的输入</span>    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果 args 小于 2，就会出现问题，因为你需要发送</span>    <span class="token comment">// zip 文件，它会告诉你如何使用</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Usage: &#123;&#125; &lt;filename>"</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//args在第2个位置，第一个索引表示的是文件名</span>    <span class="token keyword">let</span> fname <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用标准fs打开文件</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用存档阅读器功能</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> archive <span class="token operator">=</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从0开始，覆盖整个archive的长度</span>    <span class="token comment">// zip 存档中会有多个文件，我们需要提取所有文件</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>archive<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> archive<span class="token punctuation">.</span><span class="token function">by_index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置提取文件的路径</span>        <span class="token keyword">let</span> outpath <span class="token operator">=</span> <span class="token keyword">match</span> file<span class="token punctuation">.</span><span class="token function">enclosed_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">continue</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> comment <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token operator">!</span>comment<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"File &#123;&#125; comment: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// zip 也可以包含其他文件夹</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>file<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ends_with</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"设置文件夹路径 &#123;&#125; 的目录 \"&#123;&#125;\""</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> outpath<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//递归创建一个新目录</span>            <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"文件 &#123;&#125; 提取到 \"&#123;&#125;\" (&#123;&#125; bytes)"</span><span class="token punctuation">,</span>                i<span class="token punctuation">,</span>                outpath<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                file<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果这些文件没有父目录，则创建一个新目录</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> outpath<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> outfile <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> file<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> outfile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Linux下获取和设置提取文件的权限</span>        <span class="token attribute attr-name">#[cfg(unix)]</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>unix<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">PermissionsExt</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">unix_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">set_permissions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>outpath<span class="token punctuation">,</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">Permissions</span><span class="token punctuation">::</span><span class="token function">from_mode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用方式（以images-zip为例）">2.3 使用方式（以images.zip为例）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run images.zip <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-运行结果">2.4 运行结果</h3><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">设置文件夹路径 <span class="token number">0</span> 的目录 <span class="token string">"images/"</span>设置文件夹路径 <span class="token number">1</span> 的目录 <span class="token string">"images/axif/"</span>文件 <span class="token number">2</span> 提取到 <span class="token string">"images/axif/img3.avif"</span> <span class="token punctuation">(</span><span class="token number">34794</span> bytes<span class="token punctuation">)</span>文件 <span class="token number">3</span> 提取到 <span class="token string">"images/img1.jpg"</span> <span class="token punctuation">(</span><span class="token number">721480</span> bytes<span class="token punctuation">)</span>文件 <span class="token number">4</span> 提取到 <span class="token string">"images/img2.jpg"</span> <span class="token punctuation">(</span><span class="token number">715163</span> bytes<span class="token punctuation">)</span>解压时间: <span class="token number">134</span>.253736ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压文件路径如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">images├── axif│   └── img3.avif├── img1.jpg└── img2.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】标准库中的数据结构与算法</title>
      <link href="/news/1678627821546.html"/>
      <url>/news/1678627821546.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据结构">1. 数据结构</h2><p>  Rust的标准库提供了几种数据结构，可用于以各种方式存储和操作数据。如下所示：</p><ul><li><code>Vec&lt;T&gt;</code>：一个可增长的数组，可以存储可变数量的T类型元素。它被实现为一个动态分配的数组，并提供对其元素的有效访问。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>LinkedList&lt;T&gt;</code>：一个双链表，可以存储可变数量的类型T的元素。它允许有效地插入和删除列表两端的元素，但与Vec<T>相比，它对单个元素的访问速度较慢。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> list <span class="token operator">=</span> <span class="token class-name">LinkedList</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>HashMap&lt;K, V&gt;</code>：一个哈希表，可以存储从K类型键到V类型值的映射。它提供了基于键值的高效插入、删除和查找。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-算法">2. 算法</h2><p>  Rust标准库还提供了许多算法，可用于对数据执行常用操作。如下所示:</p><ul><li><code>sort</code>：使用稳定的排序算法对切片进行就地排序。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>binary_search</code>：对排序的切片执行二分查找，以查找给定元素的索引。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>iter::sum</code>：计算迭代器中元素的和。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>find</code>：查找迭代器中满足给定闭包的第一个元素,以下2种形式。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>first_even<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>first_even<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>min</code>和<code>max</code>：分别查找迭代器中的最小和最大元素。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>all</code>和<code>any</code>：分别确定迭代器中的所有元素或任一元素是否满足给定的闭包。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> all_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> any_even <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>all_even<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>any_even<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fold</code>：在迭代器上执行fold操作，根据迭代器的元素累积一个值。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// fold函数第一个是初始值，第二个是一个闭包，闭包第一个参数是一个累计值，第二个参数是本次迭代元素的引用，返回值作为下一次迭代的累计值。</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> x<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于 2 + （(((1 + 2) + 3) + 4) + 5）</span>    <span class="token keyword">let</span> mul<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>acc<span class="token punctuation">,</span> x<span class="token closure-punctuation punctuation">|</span></span> acc <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于 3 * （(((1 * 2) * 3) * 4) * 5）</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>map</code>: 即是对迭代的元素进行一次映射后再返回映射后的结果,<code>collect</code>是将一个迭代器迭代的所有元素组合成一个新的集合</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vec_str <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec_str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vec_str<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>vec_str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>filter</code> 是一个迭代器适配器，它接受一个闭包作为参数，该闭包返回一个布尔值。</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 错误示例 1</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| i % 3 == 0).collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 2</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 3</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).copied().collect();</span>    <span class="token comment">// let list2 = [0, 3, 6];</span>    <span class="token comment">// assert_eq!(list1, list2);</span>    <span class="token comment">// 错误示例 4</span>    <span class="token comment">// let list1: Vec&lt;_> = v.iter().filter(|i| **i % 3 == 0).copied().collect();</span>    <span class="token comment">// assert_eq!(list1, [0, 3, 6]);</span>    <span class="token comment">// 正确示例 </span>    <span class="token keyword">let</span> list1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span><span class="token operator">*</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> list2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rust杂记】读取CSV文件</title>
      <link href="/news/1678456159235.html"/>
      <url>/news/1678456159235.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-假设对以下nba-csv文件进行读取">1. 假设对以下<code>nba.csv</code>文件进行读取</h2><pre class="line-numbers language-csv" data-language="csv"><code class="language-csv"><span class="token value">姓名</span><span class="token punctuation">,</span><span class="token value">团队</span><span class="token punctuation">,</span><span class="token value">号码</span><span class="token punctuation">,</span><span class="token value">职位</span><span class="token punctuation">,</span><span class="token value">年龄</span><span class="token punctuation">,</span><span class="token value">身高</span><span class="token punctuation">,</span><span class="token value">体重</span><span class="token punctuation">,</span><span class="token value">大学</span><span class="token punctuation">,</span><span class="token value">薪水</span><span class="token value">埃弗里·布拉德利</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">0.0</span><span class="token punctuation">,</span><span class="token value">PG</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">6-2</span><span class="token punctuation">,</span><span class="token value">180.0</span><span class="token punctuation">,</span><span class="token value">Texas</span><span class="token punctuation">,</span><span class="token value">7730337.0</span><span class="token value">杰·克劳德</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">99.0</span><span class="token punctuation">,</span><span class="token value">SF</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">6-6</span><span class="token punctuation">,</span><span class="token value">235.0</span><span class="token punctuation">,</span><span class="token value">马奎特</span><span class="token punctuation">,</span><span class="token value">6796117.0</span><span class="token value">约翰·霍兰</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">30.0</span><span class="token punctuation">,</span><span class="token value">SG</span><span class="token punctuation">,</span><span class="token value">27.0</span><span class="token punctuation">,</span><span class="token value">6-5</span><span class="token punctuation">,</span><span class="token value">205.0</span><span class="token punctuation">,</span><span class="token value">波士顿大学</span><span class="token punctuation">,</span><span class="token value">R.J. 亨特</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">28.0</span><span class="token punctuation">,</span><span class="token value">SG</span><span class="token punctuation">,</span><span class="token value">22.0</span><span class="token punctuation">,</span><span class="token value">6-5</span><span class="token punctuation">,</span><span class="token value">185.0</span><span class="token punctuation">,</span><span class="token value">佐治亚州</span><span class="token punctuation">,</span><span class="token value">1148640.0</span><span class="token value">杰雷布科</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">8.0</span><span class="token punctuation">,</span><span class="token value">大前锋</span><span class="token punctuation">,</span><span class="token value">29.0</span><span class="token punctuation">,</span><span class="token value">6-10</span><span class="token punctuation">,</span><span class="token value">231.0</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token value">5000000.0</span><span class="token value">阿米尔约翰逊</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">90.0</span><span class="token punctuation">,</span><span class="token value">大前锋</span><span class="token punctuation">,</span><span class="token value">29.0</span><span class="token punctuation">,</span><span class="token value">6-9</span><span class="token punctuation">,</span><span class="token value">240.0</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token value">12000000.0</span><span class="token value">乔丹米奇</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">55.0</span><span class="token punctuation">,</span><span class="token value">PF</span><span class="token punctuation">,</span><span class="token value">21.0</span><span class="token punctuation">,</span><span class="token value">6-8</span><span class="token punctuation">,</span><span class="token value">235.0</span><span class="token punctuation">,</span><span class="token value">LSU</span><span class="token punctuation">,</span><span class="token value">1170960.0</span><span class="token value">凯利奥利尼克</span><span class="token punctuation">,</span><span class="token value">波士顿凯尔特人队</span><span class="token punctuation">,</span><span class="token value">41.0</span><span class="token punctuation">,</span><span class="token value">中锋</span><span class="token punctuation">,</span><span class="token value">25.0</span><span class="token punctuation">,</span><span class="token value">7-0</span><span class="token punctuation">,</span><span class="token value">238.0</span><span class="token punctuation">,</span><span class="token value">冈萨加</span><span class="token punctuation">,</span><span class="token value">2165160.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其对应的表格展示如下：<table><thead><tr><th>姓名</th><th>团队</th><th>号码</th><th>职位</th><th>年龄</th><th>身高</th><th>体重</th><th>大学</th><th>薪水</th></tr></thead><tbody><tr><td>埃弗里·布拉德利</td><td>波士顿凯尔特人队</td><td>0.0</td><td>PG</td><td>25.0</td><td>6-2</td><td>180.0</td><td>Texas</td><td>7730337.0</td></tr><tr><td>杰·克劳德</td><td>波士顿凯尔特人队</td><td>99.0</td><td>SF</td><td>25.0</td><td>6-6</td><td>235.0</td><td>马奎特</td><td>6796117.0</td></tr><tr><td>约翰·霍兰</td><td>波士顿凯尔特人队</td><td>30.0</td><td>SG</td><td>27.0</td><td>6-5</td><td>205.0</td><td>波士顿大学</td><td></td></tr><tr><td>R.J. 亨特</td><td>波士顿凯尔特人队</td><td>28.0</td><td>SG</td><td>22.0</td><td>6-5</td><td>185.0</td><td>佐治亚州</td><td>1148640.0</td></tr><tr><td>杰雷布科</td><td>波士顿凯尔特人队</td><td>8.0</td><td>大前锋</td><td>29.0</td><td>6-10</td><td>231.0</td><td></td><td>5000000.0</td></tr><tr><td>阿米尔约翰逊</td><td>波士顿凯尔特人队</td><td>90.0</td><td>大前锋</td><td>29.0</td><td>6-9</td><td>240.0</td><td></td><td>12000000.0</td></tr><tr><td>乔丹米奇</td><td>波士顿凯尔特人队</td><td>55.0</td><td>PF</td><td>21.0</td><td>6-8</td><td>235.0</td><td>LSU</td><td>1170960.0</td></tr><tr><td>凯利奥利尼克</td><td>波士顿凯尔特人队</td><td>41.0</td><td>中锋</td><td>25.0</td><td>7-0</td><td>238.0</td><td>冈萨加</td><td>2165160.0</td></tr></tbody></table></li></ul><h2 id="2-配置安装库CSV">2. 配置安装库<code>CSV</code></h2><ul><li>可直接在<code>Cargo.toml</code>文件中<code>dependencies</code>下方的添加<code>csv = &quot;1.1&quot;</code>，也可通过<code>cargo add csv</code>命令安装</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">csv</span> <span class="token punctuation">=</span> <span class="token string">"1.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-读取CSV文件">3. 读取<code>CSV</code>文件</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span><span class="token keyword">use</span> csv<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">read_from_file</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token namespace">csv<span class="token punctuation">::</span></span><span class="token class-name">Reader</span><span class="token punctuation">::</span><span class="token function">from_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> reader<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> record <span class="token operator">=</span> result<span class="token operator">?</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">read_from_file</span><span class="token punctuation">(</span><span class="token string">"./nba.csv"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-上述代码输出内容如下">4. 上述代码输出内容如下</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"埃弗里·布拉德利"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"0.0"</span>, <span class="token string">"PG"</span>, <span class="token string">"25.0"</span>, <span class="token string">"6-2"</span>, <span class="token string">"180.0"</span>, <span class="token string">"Texas"</span>, <span class="token string">"7730337.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"杰·克劳德"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"99.0"</span>, <span class="token string">"SF"</span>, <span class="token string">"25.0"</span>, <span class="token string">"6-6"</span>, <span class="token string">"235.0"</span>, <span class="token string">"马奎特"</span>, <span class="token string">"6796117.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"约翰·霍兰"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"30.0"</span>, <span class="token string">"SG"</span>, <span class="token string">"27.0"</span>, <span class="token string">"6-5"</span>, <span class="token string">"205.0"</span>, <span class="token string">"波士顿大学"</span>, <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"R.J. 亨特"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"28.0"</span>, <span class="token string">"SG"</span>, <span class="token string">"22.0"</span>, <span class="token string">"6-5"</span>, <span class="token string">"185.0"</span>, <span class="token string">"佐治亚州"</span>, <span class="token string">"1148640.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"杰雷布科"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"8.0"</span>, <span class="token string">"大前锋"</span>, <span class="token string">"29.0"</span>, <span class="token string">"6-10"</span>, <span class="token string">"231.0"</span>, <span class="token string">""</span>, <span class="token string">"5000000.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"阿米尔约翰逊"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"90.0"</span>, <span class="token string">"大前锋"</span>, <span class="token string">"29.0"</span>, <span class="token string">"6-9"</span>, <span class="token string">"240.0"</span>, <span class="token string">""</span>, <span class="token string">"12000000.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"乔丹米奇"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"55.0"</span>, <span class="token string">"PF"</span>, <span class="token string">"21.0"</span>, <span class="token string">"6-8"</span>, <span class="token string">"235.0"</span>, <span class="token string">"LSU"</span>, <span class="token string">"1170960.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>StringRecord<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"凯利奥利尼克"</span>, <span class="token string">"波士顿凯尔特人队"</span>, <span class="token string">"41.0"</span>, <span class="token string">"中锋"</span>, <span class="token string">"25.0"</span>, <span class="token string">"7-0"</span>, <span class="token string">"238.0"</span>, <span class="token string">"冈萨加"</span>, <span class="token string">"2165160.0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 锈浪宫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csv </tag>
            
            <tag> rust </tag>
            
            <tag> crates </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】RSA加密使用</title>
      <link href="/news/1678453890145.html"/>
      <url>/news/1678453890145.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-pycryptodome">1. 安装 <code>pycryptodome</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-使用公钥加密">2. 使用公钥加密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> requests<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_v1_5<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    publickey <span class="token operator">=</span> <span class="token triple-quoted-string string">'''-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsgDq4OqxuEisnk2F0EJFmw4xKa5IrcqEYHvqxPs2CHEg2kolhfWA2SjNuGAHxyDDE5MLtOvzuXjBx/5YJtc9zj2xR/0moesS+Vi/xtG1tkVaTCba+TV+Y5C61iyr3FGqr+KOD4/XECu0Xky1W9ZmmaFADmZi7+6gO9wjgVpU9aLcBcw/loHOeJrCqjp7pA98hRJRY+MML8MK15mnC4ebooOva+mJlstW6t/1lghR8WNV8cocxgcHHuXBxgns2MlACQbSdJ8c6Z3RQeRZBzyjfey6JCCfbEKouVrWIUuPphBL3OANfgp0B+QG31bapvePTfXU48TYK0M5kE+8LgbbWQIDAQAB-----END PUBLIC KEY-----'''</span>    key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>publickey<span class="token punctuation">)</span>    passwd <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    pwd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>passwd<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】合并多个 xml 文件</title>
      <link href="/news/1678265743246.html"/>
      <url>/news/1678265743246.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-假设需要对以下-3-个文件进行合并">1. 假设需要对以下 3 个文件进行合并</h2><ul><li><code>file1.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file1.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>file2.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file2.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>file3.xml</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- file3.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item P<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-合并输出的预计结果保存在-output-xml-中">2. 合并输出的预计结果保存在 output.xml 中</h2><ul><li>合并条件是满足 <em><code>&#123;'id': '1','value':'a'&#125;</code></em> 的所有元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- output.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-合并方式一（根节点简单的情况）">3. 合并方式一（根节点简单的情况）</h2><ul><li>合并的方法如<code>merge_xml_files_root</code>所示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_xml_files_root</span><span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>root_data<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> ET<span class="token punctuation">.</span>Element<span class="token punctuation">(</span>root_data<span class="token punctuation">)</span>    <span class="token keyword">for</span> xml_file <span class="token keyword">in</span> xml_files<span class="token punctuation">:</span>        subtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>        subroot <span class="token operator">=</span> subtree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        attrib <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"[@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span></span><span class="token string">']"</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> elem <span class="token keyword">in</span> subroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>attrib<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>    tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>ElementTree<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xml_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'file1.xml'</span><span class="token punctuation">,</span><span class="token string">'file2.xml'</span><span class="token punctuation">,</span><span class="token string">'file3.xml'</span><span class="token punctuation">]</span>    attribs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span>    output_file <span class="token operator">=</span> <span class="token string">'output.xml'</span>    item <span class="token operator">=</span> <span class="token string">'item'</span>    root_data <span class="token operator">=</span> <span class="token string">'data'</span>    merge_xml_files_root<span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>root_data<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-合并方式二（根节点未知）">4. 合并方式二（根节点未知）</h2><ul><li>合并的方法如<code>merge_xml_files</code>所示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_xml_files</span><span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> xml_file <span class="token keyword">in</span> xml_files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> tree<span class="token punctuation">:</span>            <span class="token comment"># 使用第一个文件初始化tree</span>            tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>            root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> elem <span class="token keyword">in</span> root<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!=</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token comment"># 请除第一个文件中不符合的结点</span>                    root<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        subtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml_file<span class="token punctuation">)</span>        subroot <span class="token operator">=</span> subtree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>        attrib <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"[@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span></span><span class="token string">']"</span></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> elem <span class="token keyword">in</span> subroot<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>attrib<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可通过以下方式调用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xml_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'file1.xml'</span><span class="token punctuation">,</span><span class="token string">'file2.xml'</span><span class="token punctuation">,</span><span class="token string">'file3.xml'</span><span class="token punctuation">]</span>    attribs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span>    output_file <span class="token operator">=</span> <span class="token string">'output.xml'</span>    item <span class="token operator">=</span> <span class="token string">'item'</span>    merge_xml_files<span class="token punctuation">(</span>xml_files<span class="token punctuation">,</span>item<span class="token punctuation">,</span>attribs<span class="token punctuation">,</span>output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他使用方式">5. 其他使用方式</h2><ul><li>如果传入的 <code>attribs = &#123;'id': '1'&#125;</code>，将会得到满足该条件的结果，如下：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- output.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subitem</span><span class="token punctuation">></span></span>Subitem Y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subitem</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-扩充部分">6. 扩充部分</h2><ul><li>合并方式二使用<code>any()</code>函数进行结点删除,此外还有<code>all()</code>函数。<code>any()</code> 和 <code>all()</code> 都是 Python 内置函数。<code>any()</code> 函数用于判断给定的可迭代参数<code>iterable</code> 是否全部为 <code>False</code>，则返回 <code>False</code>，如果有一个为 <code>True</code>，则返回 <code>True</code>。元素除了是 0、空、FALSE 外都算 TRUE。</li></ul><h3 id="6-1-any-函数">6.1 <code>any()</code>函数</h3><ul><li><code>any()</code> 函数接受一个可迭代对象作为参数，如果可迭代对象中的任意一个元素为真值，则返回 <code>True</code>，否则返回 <code>False</code>。例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>文中使用的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!=</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attribs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>等价于</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'1'</span> <span class="token keyword">or</span> elem<span class="token punctuation">.</span>attrib<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-all-函数">6.2 <code>all()</code>函数</h3><ul><li><code>all()</code>函数也接受一个可迭代对象作为参数，如果可迭代对象中的所有元素都为真值，则返回 <code>True</code>，否则返回 <code>False</code>。例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Ubuntu安装最新docker</title>
      <link href="/news/1678175207403.html"/>
      <url>/news/1678175207403.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-在线安装">1. 在线安装</h2><h3 id="使用存储库安装-前言">使用存储库安装(前言)</h3><p>  在新主机上首次安装 Docker Engine 之前，需要设置 Docker 存储库。之后，您可以从存储库中安装和更新 Docker。如无法使用 <code>root</code> 权限安装，可使用 <code>sudo</code> 来安装 docker。</p><h3 id="1-1-设置存储库">1.1 设置存储库</h3><h4 id="1-1-1-更新-apt-包索引并安装包以允许-apt-通过-HTTPS-使用存储库">1.1.1 更新 <code>apt</code> 包索引并安装包以允许 <code>apt</code> 通过 HTTPS 使用存储库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg <span class="token punctuation">\</span>    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-添加-Docker-官方GPG密钥">1.1.2 添加 Docker 官方<code>GPG</code>密钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-p</span> /etc/apt/keyrings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-3-使用以下命令设置存储库">1.1.3 使用以下命令设置存储库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-安装-Docker-引擎">1.2 安装 Docker 引擎</h3><h4 id="1-2-1-更新-apt-包索引">1.2.1 更新 <code>apt</code> 包索引</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-2-安装-Docker-引擎、容器和-Docker-Compose">1.2.2 安装 Docker 引擎、容器和 Docker Compose</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-3-通过运行-hello-world-镜像来验证-Docker-引擎安装是否成功">1.2.3 通过运行 <code>hello-world</code> 镜像来验证 Docker 引擎安装是否成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-4-注意事项">1.2.4 注意事项</h4><p>  <strong>通过上述安装的 <code>docker-compose</code> 启动时命令是 <code>docker compose</code>，而不是 <code>docker-compose</code>，如下</strong>：</p><ul><li><strong>成功示例</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>错误示例</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-离线安装">2. 离线安装</h2><p>  Docker 是一种开源的容器技术，可以让开发者和运维人员在不同的平台上快速部署和运行应用程序。<code>Docker </code>的优点是轻量、高效、可移植和安全。但是，如果要在没有互联网连接的环境中安装 Docker，就需要一些额外的步骤。本文将介绍如何在 <code>Ubuntu 16.04 LTS</code> 上离线安装 Docker 和 <code>Docker-compose</code>。</p><h3 id="2-1-准备工作">2.1 准备工作</h3><p>  在开始离线安装之前，我们需要准备以下几个文件：</p><ul><li><code>containerd.io</code> 包：这是 Docker 的一个依赖包，负责管理容器的生命周期。</li><li><code>docker-ce-cli</code> 包：这是 Docker 的命令行接口，提供了各种操作容器的命令。</li><li><code>docker-ce</code> 包：这是 Docker 的核心组件，包含了 Docker 引擎和其他功能。</li><li><code>docker-compose</code> 包：这是一个用于定义和运行多容器应用程序的工具。</li></ul><p>  可以从以下地址下载这些包，注意选择与 <code>Ubuntu</code> 版本相匹配的包。例如，如果，其他版本代号如下：</p><table><thead><tr><th>版本</th><th>代号</th><th>地址</th></tr></thead><tbody><tr><td>16.04 LTS</td><td>xenial</td><td><a href="https://download.docker.com/linux/ubuntu/dists/xenial/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>18.04 LTS</td><td>bionic</td><td><a href="https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>20.04 LTS</td><td>focal</td><td><a href="https://download.docker.com/linux/ubuntu/dists/focal/pool/stable/amd64/">官方下载地址</a></td></tr><tr><td>22.04 LTS</td><td>jammy</td><td><a href="https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/">官方下载地址</a></td></tr></tbody></table><p>  我们使用的是 <code>Ubuntu 16.04 LTS</code>（代号为 <code>xenial</code>）需要下载以下三个包，其他版本可下载对应的四个最新包</p><ul><li>containerd.io_1.4.6-1_amd64.deb</li><li>docker-ce-cli_20.10.7_3-0_ubuntu-xenial_amd64.deb</li><li>docker-ce_20.10.7_3-0_ubuntu-xenial_amd64.deb</li><li>docker-compose-Linux-x86_64 (官方下载地址中仅 Ubuntu 18 版本以上存在 docker-compose-plugin*.deb)</li></ul><p>  下载完成后，我们需要将这些文件拷贝到目标机器上，例如放在 <code>/home/ubuntu/docker</code> 目录下。</p><h3 id="2-2-卸载原有的-Docker">2.2. 卸载原有的 Docker</h3><p>  如果目标机器上已经安装了旧版本的 Docker，那么我们需要先卸载它们，以避免冲突。我们可以使用以下命令来卸载原有的 Docker：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> purge docker-ce<span class="token function">apt-get</span> autoremove <span class="token parameter variable">--purge</span> docker-ce<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-安装新版的-Docker">2.3 安装新版的 Docker</h3><p>  接下来，我们可以使用 <code>dpkg</code> 命令来安装新版的 Docker。注意要按照依赖顺序来安装包，即先安装 <code>containerd.io</code> 包，再安装 <code>docker-ce-cli</code> 包，最后安装 <code>docker-ce</code> 包。可以使用以下命令来进行安装：</p><h4 id="2-3-1-安装核心包">2.3.1 安装核心包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ubuntu/docker <span class="token comment"># 进入存放文件的目录</span>dpkg <span class="token parameter variable">-i</span> containerd.io_1.4.6-1_amd64.deb <span class="token comment"># 安装 containerd.io 包</span>dpkg <span class="token parameter variable">-i</span> docker-ce-cli_20.10.7_3-0_ubuntu-xenial_amd64.deb <span class="token comment"># 安装 docker-ce-cli 包</span>dpkg <span class="token parameter variable">-i</span> docker-ce_20.10.7_3-0_ubuntu-xenial_amd64.deb <span class="token comment"># 安装 docker-ce 包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注: 如果安装 <code>containerd.io</code>包时提示如下信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.containerd.io depends on libseccomp2<span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">2.4</span>.0<span class="token punctuation">)</span><span class="token punctuation">;</span>however: Version of libseccomp2:amd64 on system is <span class="token number">2.3</span>.1-2-ubuntu2~16.04.1.<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>则需要在该地址下载<code>libseccomp2(&gt;=2.4.0)</code>包，如<code>libseccomp2_2.4.3-1ubuntu1_amd64.deb</code> <a href="http://archive.ubuntu.com/ubuntu/pool/main/libs/libseccomp/">官方下载地址</a>。下载完成后，使用 <code>dpkg</code> 命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-i</span> libseccomp2_2.4.3-1ubuntu1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成后按照上述<code>docker</code>的安装顺序重新安装即可。</li></ul><h4 id="2-3-2-通过运行-docker-version-镜像来验证-Docker-引擎安装是否成功">2.3.2 通过运行 <code>docker --version</code> 镜像来验证 Docker 引擎安装是否成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--version</span> <span class="token comment"># 查看 Docker 版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果能够看到类似如下的输出，则说明 Docker 已经正常工作：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Docker version <span class="token number">20.10</span>.7, build f0df350<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-3-安装docker-compose-包【可选】">2.3.3 安装<code>docker-compose</code> 包【可选】</h4><p>  Ubuntu 18 版本以上安装<code>docker-compose</code> 包，下面以<code>Ubuntu 22.04 LTS</code>为例。Ubuntu 16 版本安装<code>docker-compose</code> 在后文进行描述。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-i</span> docker-compose-plugin_2.6.0~ubuntu-jammy_amd64.deb   <span class="token comment"># 安装 docker-compose 包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证 <code>docker-compose</code> 是否安装成功(注意如果安装的是最新版，则启动时命令是 <code>docker compose</code>，而不是 <code>docker-compose</code>)：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-docker-compose-离线安装">2.4 docker-compose 离线安装</h3><p>  <code>Docker-compose </code>是一个用于定义和运行多容器 Docker 应用程序的工具。它使用 <code>YAML</code> 文件来配置应用程序的服务、网络和卷，然后使用一个命令来创建和启动所有的服务。在没有互联网连接的环境中，需要离线安装 <code>docker-compose</code>。下面介绍如何在 <code>Ubuntu 16.04 LTS</code> 上离线安装 <code>docker-compose</code> 的步骤。</p><h4 id="2-4-1-下载-docker-compose">2.4.1 下载 <code>docker-compose</code></h4><p>  在可以访问互联网的电脑上，打开浏览器，访问 <a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a> ，找到最新的稳定版本（本文以 2.16.0【2023 年 3 月最新版】为例），点击 Assets 下的 <code>docker-compose-Linux-x86_64</code> 链接，下载二进制文件。将下载好的文件复制到 U 盘或其他可移动存储设备上，然后插入到目标服务器上。</p><h4 id="2-4-2-安装-docker-compose">2.4.2 安装 <code>docker-compose</code></h4><ul><li>在目标服务器上，打开终端，切换到 <code>root</code> 用户：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建一个 <code>/usr/local/bin</code> 目录（如果不存在）：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将 U 盘或其他可移动存储设备上的 <code>docker-compose-Linux-x86_64</code> 文件复制到 <code>/usr/local/bin</code> 目录下，并重命名为 <code>docker-compose</code> ：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /media/usb/docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>给 <code>docker-compose</code> 文件添加可执行权限：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证 <code>docker-compose</code> 是否安装成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果输出类似如下内容，则表示安装成功：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> version <span class="token number">2.16</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python杂记】可用的翻译API及其调用方式</title>
      <link href="/news/1678175269378.html"/>
      <url>/news/1678175269378.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-谷歌翻译-API（需要设置代理）">1. 谷歌翻译 API（需要设置代理）</h2><p>  以翻译 <strong>“Authentication Architecture”</strong> 为例</p><h3 id="1-1-网页调用">1.1 网页调用</h3><h4 id="1-1-1-通过浏览器或命令行调用">1.1.1 通过浏览器或命令行调用</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">curl &quot;https:&#x2F;&#x2F;translate.google.com&#x2F;translate_a&#x2F;single?client&#x3D;gtx&amp;dt&#x3D;t&amp;dj&#x3D;1&amp;ie&#x3D;UTF-8&amp;sl&#x3D;auto&amp;tl&#x3D;zh_CN&amp;q&#x3D;Authentication%20Architecture&quot; -H &quot;Accept: application&#x2F;json&quot; --proxy http:&#x2F;&#x2F;127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-2-返回结果">1.1.2 返回结果</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sentences"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"trans"</span><span class="token operator">:</span> <span class="token string">"认证架构"</span><span class="token punctuation">,</span>      <span class="token property">"orig"</span><span class="token operator">:</span> <span class="token string">"Authentication Architecture"</span><span class="token punctuation">,</span>      <span class="token property">"backend"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"model_specification"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"translation_engine_debug_info"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"model_tracking"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"checkpoint_md5"</span><span class="token operator">:</span> <span class="token string">"95ad550c486923f3a292df3e4cffc30f"</span><span class="token punctuation">,</span>            <span class="token property">"launch_doc"</span><span class="token operator">:</span> <span class="token string">"en_zh_2022q2.md"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span>  <span class="token property">"confidence"</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token property">"spell"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"ld_result"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"srclangs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"srclangs_confidences"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"extended_srclangs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-通过-python-调用">1.2 通过 python 调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">translate_from_google</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    txt <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>txt<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">' ,=&amp;/+()'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://translate.google.com/translate_a/single?client=gtx&amp;dt=t&amp;dj=1&amp;ie=UTF-8&amp;sl=auto&amp;tl=zh_CN&amp;q='</span><span class="token operator">+</span>txt    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sentences'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'trans'</span><span class="token punctuation">)</span>  <span class="token comment"># 谷歌</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">translate_from_google<span class="token punctuation">(</span><span class="token string">'Authentication Architecture'</span><span class="token punctuation">)</span> <span class="token comment"># 调用</span><span class="token comment"># 输出"认证架构"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-有道翻译-API">2. 有道翻译 API</h2><h3 id="2-1-网页调用">2.1 网页调用</h3><h4 id="2-1-1-通过浏览器或命令行调用">2.1.1 通过浏览器或命令行调用</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">curl &quot;https:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate?doctype&#x3D;json&amp;type&#x3D;EN2ZH_CN&amp;i&#x3D;Authentication%20Architecture&quot; -H &quot;Accept: application&#x2F;json&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-2-返回的-json-结果">2.1.2 返回的 json 结果</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"EN2ZH_CN"</span><span class="token punctuation">,</span>  <span class="token property">"errorCode"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"elapsedTime"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"translateResult"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"Authentication Architecture"</span><span class="token punctuation">,</span> <span class="token property">"tgt"</span><span class="token operator">:</span> <span class="token string">"认证体系结构"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-通过-python-调用">2.2 通过 python 调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">translate_from_youdao</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">str</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>txt<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">' ,=&amp;/+()'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'https://fanyi.youdao.com/translate?&amp;doctype=json&amp;type=EN2ZH_CN&amp;i='</span><span class="token operator">+</span>txt    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'translateResult'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tgt'</span><span class="token punctuation">)</span> <span class="token comment"># 有道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">translate_from_youdao<span class="token punctuation">(</span><span class="token string">'Authentication Architecture'</span><span class="token punctuation">)</span> <span class="token comment"># 调用</span><span class="token comment"># 输出"认证体系结构"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程大陆 </category>
          
          <category> 盘蛇教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】Linux (WSL) 子系统如何与Windows通信</title>
      <link href="/news/1677410190368.html"/>
      <url>/news/1677410190368.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-检查网络是否通畅">1. 检查网络是否通畅</h2><h3 id="1-1-通过ipconfig获得WSL的ip地址，如-172-28-30-1">1.1 通过<code>ipconfig</code>获得WSL的ip地址，如 <code>172.28.30.1</code></h3><h3 id="1-2-进入Linux子系统，ping上面这个地址">1.2 进入Linux子系统，<code>ping</code>上面这个地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">172.28</span>.30.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-如果无法ping通-或使用过程中发现网络不通-，则可在Windows系统上通过powershell（管理员启动）运行如下命令，开启Linux-WSL-子系统访问Windows的防火墙">1.3 如果无法<code>ping</code>通(或使用过程中发现网络不通)，则可在Windows系统上通过<code>powershell</code>（管理员启动）运行如下命令，开启Linux (WSL) 子系统访问Windows的防火墙</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-NetFirewallRule</span> <span class="token operator">-</span>DisplayName <span class="token string">"WSL"</span> <span class="token operator">-</span>Direction Inbound  <span class="token operator">-</span>InterfaceAlias <span class="token string">"vEthernet (WSL)"</span>  <span class="token operator">-</span>Action Allow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-获取WSL自动配置的域名">2. 获取WSL自动配置的域名</h2><h3 id="方法1">方法1</h3><ul><li>直接打开以下文件(可记事本打开或命令行查看)，寻找172.28.30.1对应的域名</li></ul><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">type C:\Windows\System32\drivers\etc\hosts.ics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法2">方法2</h3><ul><li>通过Linux子系统tracepath任意地址，如</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tracepath baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>则此时域名为命令执行结果中前两行出现的域名</li></ul><h3 id="结果">结果</h3><ul><li>可以发现域名是 <code>example.mshome.net</code> 的形式，<code>example</code>一般为Windows及Linux子系统的主机名。比如，主机名为<code>taissan</code>，那么域名则是 <code>taissan.mshome.net</code>。</li></ul><h2 id="3-Linux子系统访问Windows上的服务">3. Linux子系统访问Windows上的服务</h2><ul><li>Linux子系统访问Windows上的代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://taissan.mshome.net:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Windows访问Linux子系统上的服务">4. Windows访问Linux子系统上的服务</h2><ul><li>直接访问<code>localhost</code>+端口即可，如</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-使用域名访问解决的问题">5. 使用域名访问解决的问题</h2><ul><li>配置域名访问后，后续无需再做配置。防止因电脑重启后wsl的IP变化，使得需要每次重新在Linux子系统中配置IP.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂记】测试Katex的公式支持程度</title>
      <link href="/news/1678109183215.html"/>
      <url>/news/1678109183215.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-测试代数（不支持双层大括号）">1. 测试代数（不支持双层大括号）</h2><ul><li>式子一</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>对于方程形如：</mtext><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设:</mtext><mi>ω</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>+</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mi>ω</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>+</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msup><mi>ω</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo>−</mo><mn>1</mn><mo>−</mo><msqrt><mn>3</mn></msqrt><mi>i</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}  \text{对于方程形如：}x^{3}-1=0 \\  \text{设}\text{:}\omega =\frac{-1+\sqrt{3}i}{2} \\  x_{1}=1,x_{2}= \omega =\frac{-1+\sqrt{3}i}{2} \\  x_{3}= \omega ^{2}=\frac{-1-\sqrt{3}i}{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.394em;vertical-align:-2.447em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.947em;"><span style="top:-5.145em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">对于方程形如：</span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.747em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">设</span></span><span class="mord text"><span class="mord">:</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.349em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.951em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">3</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.447em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>式子二</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msup><mo><mi>x</mi></mo><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mn>1</mn></msub><mo>+</mo><msub><mo><mi>x</mi></mo><mn>2</mn></msub><mo>=</mo><mo>−</mo><mfrac><mi>b</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>x</mi></mo><mn>1</mn></msub><msub><mo><mi>x</mi></mo><mn>2</mn></msub><mo>=</mo><mfrac><mi>c</mi><mi>a</mi></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}  a\mathop{x}\nolimits^{2}+bx+c=0 \\  \Delta =\mathop{b}\nolimits^{2}-4ac \\  \Delta =\mathop{b}\nolimits^{2}-4ac \\  \mathop{x}\nolimits_{1,2}=\frac{-b\pm \sqrt{\mathop{b}\nolimits^{2}-4ac}}{2a} \\  \mathop{x}\nolimits_{1}+\mathop{x}\nolimits_{2}=-\frac{b}{a} \\  \mathop{x}\nolimits_{1}\mathop{x}\nolimits_{2}=\frac{c}{a}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.5759em;vertical-align:-3.538em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.038em;"><span style="top:-6.2569em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-4.9985em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-2.3211em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0589em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">b</span><span class="mbin mtight">±</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9499em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mop mtight"><span class="mop mathnormal mtight" style="position:relative;top:0.0972em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.8416em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span></span></span><span style="top:-2.9099em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0901em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.081em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:0.119em;"><span class="pstrut" style="height:3.0589em;"></span><span class="mord"><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.0347em;">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.538em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>注：使用<mark class="hl-label blue">latex(katex)</mark> 时应使用<code>a\mathop&#123;x&#125;\nolimits^&#123;2&#125;+bx+c=0</code>，而不是<code>a\mathop&#123;&#123;x&#125;&#125;\nolimits^&#123;&#123;2&#125;&#125;+bx+c=0</code></li><li>即使用<mark class="hl-label green">单层</mark> 大括号<code>&#123;x&#125;</code>包裹参数，而不是<mark class="hl-label red">双层</mark> 大括号<code>&#123;&#123;x&#125;&#125;</code>包裹参数。</li></ul><h2 id="2-测试几何">2. 测试几何</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>⊂</mo><mi>α</mi><mo separator="true">,</mo><mi>n</mi><mo>⊂</mo><mi>α</mi><mo separator="true">,</mo><mi>m</mi><mo>∩</mo><mi>n</mi><mo>=</mo><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>⊥</mo><mi>m</mi><mo separator="true">,</mo><mi>a</mi><mo>⊥</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><mo>⇒</mo><mi>a</mi><mo>⊥</mo><mi>α</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\left.\begin{matrix}  m \subset \alpha ,n \subset \alpha ,m \cap n=P \\    a \perp m,a \perp n\end{matrix}\right\}\Rightarrow a \perp \alpha\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="3-测试不等式">3. 测试不等式</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>k</mi></msub><msub><mi>b</mi><mi>k</mi></msub><mo fence="true">)</mo></mrow><mrow><mtext> ⁣</mtext><mtext> ⁣</mtext><mn>2</mn></mrow></msup><mo>≤</mo><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>a</mi><mi>k</mi><mn>2</mn></msubsup><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>b</mi><mi>k</mi><mn>2</mn></msubsup><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\left( \sum_{k=1}^n a_k b_k \right)^{\!\!2}\leq\left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3683em;vertical-align:-0.4341em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9342em;"><span style="top:-2.9342em;"><span class="pstrut" style="height:3.0083em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0083em;"><span style="top:-3.2572em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mspace mtight" style="margin-right:-0.1952em;"></span><span class="mspace mtight" style="margin-right:-0.1952em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4341em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="4-测试积分">4. 测试积分</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mover accent="true"><mi>f</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>ξ</mi><mtext> </mtext><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>ξ</mi><mi>x</mi></mrow></msup><mtext> </mtext><mi mathvariant="normal">d</mi><mi>ξ</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}f(x) = \int_{-\infty}^\infty  \hat f(x)\xi\,e^{2 \pi i \xi x}  \,\mathrm{d}\xi\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.372em;vertical-align:-0.436em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span style="top:-2.9781em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4142em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.0833em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">πi</span><span class="mord mathnormal mtight" style="margin-right:0.04601em;">ξ</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.436em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="5-测试矩阵">5. 测试矩阵</h2><ul><li>矩阵一</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>A</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}A_{m\times n}=  \begin{bmatrix}    a_{11}&amp; a_{12}&amp; \cdots  &amp; a_{1n} \\    a_{21}&amp; a_{22}&amp; \cdots  &amp; a_{2n} \\    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\    a_{m1}&amp; a_{m2}&amp; \cdots  &amp; a_{mn}  \end{bmatrix}  =\left [ a_{ij}\right ]\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.46em;vertical-align:-2.48em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-4.98em;"><span class="pstrut" style="height:4.98em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2583em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:7.4em;"></span><span style="width:0.667em;height:5.400em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='5.400em' viewBox='0 0 667 5400'><path d='M403 1759 V84 H666 V0 H319 V1759 v1800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1800 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.58em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.38em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.98em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:7.4em;"></span><span style="width:0.667em;height:5.400em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='5.400em' viewBox='0 0 667 5400'><path d='M347 1759 V0 H0 V84 H263 V1759 v1800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1800 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.48em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>矩阵二</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo separator="true">,</mo><mi>B</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>b</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>n</mi><mo>×</mo><mi>s</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>=</mo><msub><mrow><mo fence="true">[</mo><msub><mi>c</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>s</mi></mrow></msub><mo>=</mo><msub><mrow><mo fence="true">[</mo><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>s</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}  A={\left[ a_{ij}\right]_{m \times n}},B={\left[ b_{ij}\right]_{n \times s}} \\    c_{ij}= \sum \limits_{k=1}^{n}a_{ik}b_{kj} \\    C=AB=\left[ c_{ij}\right]_{m \times s}    = \left[ \sum \limits_{k=1}^{n}a_{ik}b_{kj}\right]_{m \times s}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.1478em;vertical-align:-2.8239em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3239em;"><span style="top:-5.9339em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.1884em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.0979em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7362em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0725em;"><span style="top:-2.3642em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3941em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.0979em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.6435em;"><span style="top:-1.6482em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1101em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8239em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="6-测试三角">6. 测试三角</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>α</mi><mo>+</mo><mi>sin</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mn>2</mn><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\sin \alpha + \sin \beta =2 \sin \frac{\alpha + \beta}{2}\cos \frac{\alpha - \beta}{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2922em;vertical-align:-0.3961em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8961em;"><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3961em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="7-测试统计">7. 测试统计</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>S</mi><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>N</mi><mi>n</mi></mfrac><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mi>A</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>M</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>A</mi><mi>k</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>M</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>N</mi><mi>n</mi></mfrac><mo fence="true">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}  S= \binom{N}{n},A_{k}=\binom{M}{k}\cdot \binom{N-M}{n-k} \\  P\left ( A_{k}\right ) = \frac{\binom{M}{k}\cdot \binom{N-M}{n-k}}{\binom{N}{n}}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.8457em;vertical-align:-1.6728em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1728em;"><span style="top:-4.7605em;"><span class="pstrut" style="height:3.51em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9223em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span><span style="top:-2.8472em;"><span class="pstrut" style="height:3.51em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.51em;"><span style="top:-2.3925em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7125em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mopen sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">(</span></span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9591em;"><span style="top:-2.156em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4035em;"><span></span></span></span></span></span><span class="mclose sizing reset-size3 size6 mtight delimcenter" style="top:0.075em;"><span class="delimsizing size1 mtight"><span class="mtight">)</span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6728em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>P</mi><mrow><mo fence="true">(</mo><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>P</mi><mrow><mo fence="true">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}P \left( \bigcup \limits_{i=1}^{n}A_{i}\right) = \prod \limits_{i=1}^{n}P \left( A_{i}\right)\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4277em;vertical-align:-0.9638em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4638em;"><span style="top:-3.4638em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">⋃</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∏</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9638em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="8-测试数列">8. 测试数列</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>n</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mrow><mo fence="true">)</mo><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mrow></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mrow><mo fence="true">)</mo><mo>⋅</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mrow></mfrac><mo>−</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\frac{n+1}{n \left( n-1 \left) \cdot 2^{n}\right. \right.}= \frac{1}{\left( n-1 \left) \cdot 2^{n-1}\right. \right.}-\frac{1}{n \cdot 2^{n}}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.4326em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9326em;"><span style="top:-3.0874em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span><span class="mord mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span><span class="mord mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4326em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><mrow><mi>n</mi><mi>x</mi></mrow><mrow><mn>1</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}(1+x)^{n} =1 + \frac{nx}{1!} + \frac{n(n-1)x^{2}}{2!} + \cdots\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4689em;vertical-align:-0.4845em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9845em;"><span style="top:-2.9845em;"><span class="pstrut" style="height:3.1089em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1089em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4845em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="9-测试物理-不支持unicode扩展">9. 测试物理(不支持unicode扩展)</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mstyle mathsize="2.074em"><mo>∯</mo></mstyle><mi mathvariant="double-struck">S</mi></msub><mi mathvariant="bold">D</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>s</mi><mo>=</mo><msub><mi>Q</mi><mi>f</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mstyle mathsize="2.074em"><mo>∯</mo></mstyle><mi mathvariant="double-struck">S</mi></msub><mi mathvariant="bold">B</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>s</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mstyle mathsize="2.074em"><mo>∮</mo></mstyle><mi mathvariant="double-struck">L</mi><mrow></mrow></msubsup><mi mathvariant="bold">E</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>l</mi><mo>=</mo><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="normal">d</mi><msub><mi mathvariant="normal">Φ</mi><mi mathvariant="bold">B</mi></msub></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mstyle mathsize="2.074em"><mo>∮</mo></mstyle><mi mathvariant="double-struck">L</mi><mrow></mrow></msubsup><mi mathvariant="bold">H</mi><mo>⋅</mo><mi mathvariant="normal">d</mi><mi>l</mi><mo>=</mo><msub><mi>I</mi><mi>f</mi></msub><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="normal">d</mi><msub><mi mathvariant="normal">Φ</mi><mi mathvariant="bold">D</mi></msub></mrow><mrow><mi mathvariant="normal">d</mi><mi>t</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">%此公式需要在设置中开启unicode扩展支持\begin{array}{l}    {\huge \oiint}_\mathbb{S}  \mathbf{D} \cdot\mathrm{d}s= Q_f \\    {\huge \oiint}_\mathbb{S}  \mathbf{B} \cdot\mathrm{d}s= 0 \\    {\huge \oint}_{\mathbb{L}}^{} \mathbf{E} \cdot \mathrm{d}l=-\cfrac{\mathrm{d}\Phi _{\mathbf{B}}}{\mathrm{d}t }  \\    {\huge \oint}_{\mathbb{L}}^{} \mathbf{H} \cdot \mathrm{d}l=I_f+\cfrac{\mathrm{d}\Phi _{\mathbf{D}}}{\mathrm{d}t }\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.419em;vertical-align:-4.4595em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.9595em;"><span style="top:-7.3639em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop vlist-t vlist-t2 sizing reset-size6 size10" style="position:relative;top:-0.0005em;"><span class="vlist-r"><span class="vlist" style="height:0.805em;"><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;">∬</span></span><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="overlay" style="height:0.499em;width:0.957em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.957em' height='0.499em' style='width:0.957em' viewBox='0 0 957 499' preserveAspectRatio='xMinYMin'><path d='M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2zm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.860.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.306em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2021em;"><span style="top:-2.0157em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbb mtight">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6843em;"><span></span></span></span></span></span></span><span class="mord mathbf">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.01em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop vlist-t vlist-t2 sizing reset-size6 size10" style="position:relative;top:-0.0005em;"><span class="vlist-r"><span class="vlist" style="height:0.805em;"><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;">∬</span></span><span style="top:-4.074em;"><span class="pstrut" style="height:4.074em;"></span><span class="overlay" style="height:0.499em;width:0.957em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.957em' height='0.499em' style='width:0.957em' viewBox='0 0 957 499' preserveAspectRatio='xMinYMin'><path d='M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2zm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.860.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.306em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2021em;"><span style="top:-2.0157em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbb mtight">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6843em;"><span></span></span></span></span></span></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.6561em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop op-symbol small-op sizing reset-size6 size10" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∮</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4225em;"><span style="top:-2.0154em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">L</span></span></span></span><span style="top:-4.1225em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6846em;"><span></span></span></span></span></span></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3303em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span></span></span></span></span><span style="top:-0.3005em;"><span class="pstrut" style="height:4.074em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mop op-symbol small-op sizing reset-size6 size10" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∮</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4225em;"><span style="top:-2.0154em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">L</span></span></span></span><span style="top:-4.1225em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6846em;"><span></span></span></span></span></span></span><span class="mord mathbf">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">d</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3303em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.4595em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h2 id="10-测试化学-不支持mhchem扩展">10. 测试化学(不支持mhchem扩展)</h2><ul><li>源latex代码如下:</li></ul><p>\begin{array}{l}\ce{Zn^2+  <=>[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  <=>[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$}\end{array}</p><ul><li><a href="https://www.latexlive.com">公式模板来源</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 混元圣记 </category>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> katex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂记】使用Github访问Google</title>
      <link href="/news/1677410182753.html"/>
      <url>/news/1677410182753.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-任意仓库打开Codespaces">1. 任意仓库打开<code>Codespaces</code></h2><h2 id="2-打开Codespaces的终端（页面类似于vscode）">2. 打开<code>Codespaces</code>的终端（页面类似于<code>vscode</code>）</h2><h2 id="3-运行如下命令">3. 运行如下命令</h2><h3 id="3-1-切换到root权限">3.1 切换到<code>root</code>权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-运行docker应用">3.2 运行<code>docker</code>应用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6080</span>:80 <span class="token parameter variable">-v</span> /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-新窗口打开弹出的网页">4. 新窗口打开弹出的网页</h2><h2 id="5-在新的页面中打开firefox浏览器（其他浏览器貌似无法使用），即可使用">5. 在新的页面中打开<code>firefox</code>浏览器（其他浏览器貌似无法使用），即可使用</h2>]]></content>
      
      
      <categories>
          
          <category> 混元圣记 </category>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CVE-2021-42694】Trojan Source木马源攻击</title>
      <link href="/news/1677410067156.html"/>
      <url>/news/1677410067156.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-RLO-LRI-ΓC«Γuª-和-PDI-LRI-Γu⌐Γuª-使用">1. <code>RLO LRI('ΓÇ«Γüª')</code> 和 <code>PDI LRI('Γü⌐Γüª')</code> 使用</h2><h3 id="1-1-使用DOS-CP437-编码">1.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">access_level <span class="token operator">=</span> <span class="token string">"user"</span><span class="token keyword">if</span> access_level <span class="token operator">!=</span> <span class="token string">'noneΓÇ«Γüª'</span><span class="token punctuation">:</span> <span class="token comment"># Check if admin Γü⌐Γüª' and access_level != 'user</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are an admin."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-使用utf-8-编码转换后（vscode：-Reopen-with-Encoding）">1.2 使用<code>utf-8</code> 编码转换后（vscode： Reopen with Encoding）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">access_level <span class="token operator">=</span> <span class="token string">"user"</span><span class="token keyword">if</span> access_level <span class="token operator">!=</span> <span class="token string">'none‮⁦'</span><span class="token punctuation">:</span> <span class="token comment"># Check if admin ⁩⁦' and access_level != 'user</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are an admin."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RLI使用-Γuº">2. RLI使用<code>('Γüº')</code></h2><h3 id="2-1-使用DOS-CP437-编码">2.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">bank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'alice'</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">subtract_funds</span><span class="token punctuation">(</span>account<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Subtract funds from bank account then Γüº'''</span> <span class="token punctuation">;</span><span class="token keyword">return</span>    bank<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> amount    <span class="token keyword">return</span>subtract_funds<span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-使用utf-8-编码转换后">2.2 使用<code>utf-8</code> 编码转换后</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">bank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'alice'</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">subtract_funds</span><span class="token punctuation">(</span>account<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Subtract funds from bank account then ⁧'''</span> <span class="token punctuation">;</span><span class="token keyword">return</span>    bank<span class="token punctuation">[</span>account<span class="token punctuation">]</span> <span class="token operator">-=</span> amount    <span class="token keyword">return</span>subtract_funds<span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-╨¥-西里尔字母H-使用">3. <code>'╨¥'</code>(西里尔字母H)使用</h2><h3 id="3-1-使用DOS-CP437-编码">3.1 使用<code>DOS(CP437)</code>编码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> say╨¥ello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye, World!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>say╨¥ello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用utf-8-编码转换后-╨¥-变为类似H的字符">3.2 使用<code>utf-8</code> 编码转换后 <code>╨¥</code> 变为类似<code>H</code>的字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> sayНello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Goodbye, World!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>sayНello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考">参考</h2><table><thead><tr><th>Abbreviation</th><th>Code Point</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>LRE</td><td>U+202A</td><td>Left-to-Right Embedding</td><td>尝试将以下文本视为从左到右</td></tr><tr><td>RLE</td><td>U+202B</td><td>Right-to-Left Embedding</td><td>尝试将以下文本视为从右到左</td></tr><tr><td>LRO</td><td>U+202D</td><td>Left-to-Right Override</td><td>强制将以下文本视为从左到右</td></tr><tr><td>RLO</td><td>U+202E</td><td>Right-to-Left Override</td><td>强制将以下文本视为从右到左</td></tr><tr><td>LRI</td><td>U+2066</td><td>Left-to-Right Isolate</td><td>强制将后续文本视为从左到右，而不影响相邻文本</td></tr><tr><td>RLI</td><td>U+2067</td><td>Right-to-Left Isolate</td><td>强制将后续文本视为从右到左，而不影响相邻文本</td></tr><tr><td>FSI</td><td>U+2068</td><td>First Strong Isolate</td><td>强制按照下一个字符指示的方向处理后续文本</td></tr><tr><td>PDF</td><td>U+202C</td><td>Pop Directional Formatting</td><td>终止最近的 LRE.RLE.LRO 或 RLO</td></tr><tr><td>PDI</td><td>U+2069</td><td>Pop Directional Isolate</td><td>终止最近的 LRI 或 RLI</td></tr></tbody></table><p><a href="https://trojansource.codes/trojan-source.pdf">trojan-source论文</a></p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【如何百科】pip 离线安装第三方库及依赖</title>
      <link href="/news/1677407864745.html"/>
      <url>/news/1677407864745.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-已安装的模块名称导出到文件">1. 已安装的模块名称导出到文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">></span>requirements.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-在线下载依赖">2. 在线下载依赖</h2><h3 id="2-1-直接下载对应包">2.1 直接下载对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip download <span class="token parameter variable">-d</span> D:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-通过requirements-txt直接下载对应包">2.2 通过requirements.txt直接下载对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip download <span class="token parameter variable">-d</span> D:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package <span class="token parameter variable">-r</span> requirements.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-将在线下载的包复制到离线电脑上">3. 将在线下载的包复制到离线电脑上</h2><ul><li>本文中从在线电脑上的路径<code>D:\python\pip\package</code> 下的包拷贝到离线电脑的<code>E:\python\pip\package</code>路径下</li></ul><h2 id="4-在离线电脑上安装已导出的模块，指定模块名称或指定包含所有模块列表的文件">4. 在离线电脑上安装已导出的模块，指定模块名称或指定包含所有模块列表的文件</h2><h3 id="4-1-直接安装对应包">4.1 直接安装对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --no-index --find-links<span class="token operator">=</span>E:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package <span class="token parameter variable">-r</span> requirements<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-通过requirements-txt直接安装对应包">4.2 通过<code>requirements.txt</code>直接安装对应包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --no-index --find-links<span class="token operator">=</span>E:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pip<span class="token punctuation">\</span>package mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 万法天书 </category>
          
          <category> 如何百科 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
